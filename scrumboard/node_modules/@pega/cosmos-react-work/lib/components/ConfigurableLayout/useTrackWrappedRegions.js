import { useRef, useEffect, useState } from 'react';
import { debounce } from '@pega/cosmos-react-core';
const useTrackWrappedRegions = (regionElArray, disabled) => {
    const containerRef = useRef(null);
    const [regionWrappedStates, setRegionWrappedStates] = useState(new Array(regionElArray.length).fill(false));
    useEffect(() => {
        if (disabled)
            return;
        let isMounted = true;
        const observer = new ResizeObserver(debounce(entries => {
            if (isMounted) {
                const containerWidth = entries[0].contentRect.width;
                const newWrappedStates = [...regionWrappedStates];
                regionElArray.forEach((regionEl, index) => {
                    const regionWidth = regionEl?.getBoundingClientRect().width;
                    if (regionWidth !== undefined && regionWidth >= containerWidth) {
                        newWrappedStates[index] = true;
                    }
                    else {
                        newWrappedStates[index] = false;
                    }
                });
                setRegionWrappedStates(newWrappedStates);
            }
        }, 100));
        if (containerRef.current && regionElArray.length) {
            observer.observe(containerRef.current);
        }
        return () => {
            isMounted = false;
            observer.disconnect();
        };
    }, [containerRef, regionElArray]);
    return { containerRef, regionWrappedStates };
};
export default useTrackWrappedRegions;
//# sourceMappingURL=useTrackWrappedRegions.js.map