{"version":3,"file":"ConfigurableLayout.types.js","sourceRoot":"","sources":["../../../src/components/ConfigurableLayout/ConfigurableLayout.types.ts"],"names":[],"mappings":"","sourcesContent":["import type widthConfigOptions from './options';\n\n/**\n * Type for config of a single ConfigurableLayout item.\n */\nexport interface Config {\n  /** Unique identifier in render region */\n  id: string;\n  /** Element to render */\n  content: JSX.Element;\n  /** Config for element */\n  layoutConfig: {\n    /** Responsive width option */\n    width: keyof typeof widthConfigOptions;\n    /**\n     * Fills remaining space if true, else does not grow beyond `width` value.\n     * @default true\n     */\n    fillAvailable?: boolean;\n    /** Flex basis (minimum fixed width) of element as:\n     *  - a numeric value to be applied in __pixels__\n     *  - a tuple of a numeric value and string unit\n     */\n    minWidth?: number | [number, 'px' | 'ch' | 'rem' | 'em'];\n  };\n}\n\nexport interface ConfigurableLayoutProps {\n  /** Array of configs for individual layout cells */\n  items: Config[];\n  /** Arrangement properties */\n  arrangement?: {\n    /** Defines the arrangement size of the given ConfigurableLayout.\n     * Used to determine what width to apply to the given item when the arrangement is applied,\n     * with the following mapping:\n     * - 'narrow' --> applies 'full' width\n     * - 'main' --> applies configured width\n     * - 'half' --> applies double the configured width, or 'full' width (whichever is smaller)\n     */\n    size: 'narrow' | 'main' | 'half';\n    /** Indicates when the ConfigurableLayout has wrapped to the full width of it's container */\n    hasWrapped: boolean;\n  };\n}\n"]}