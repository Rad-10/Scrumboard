import type widthConfigOptions from './options';
/**
 * Type for config of a single ConfigurableLayout item.
 */
export interface Config {
    /** Unique identifier in render region */
    id: string;
    /** Element to render */
    content: JSX.Element;
    /** Config for element */
    layoutConfig: {
        /** Responsive width option */
        width: keyof typeof widthConfigOptions;
        /**
         * Fills remaining space if true, else does not grow beyond `width` value.
         * @default true
         */
        fillAvailable?: boolean;
        /** Flex basis (minimum fixed width) of element as:
         *  - a numeric value to be applied in __pixels__
         *  - a tuple of a numeric value and string unit
         */
        minWidth?: number | [number, 'px' | 'ch' | 'rem' | 'em'];
    };
}
export interface ConfigurableLayoutProps {
    /** Array of configs for individual layout cells */
    items: Config[];
    /** Arrangement properties */
    arrangement?: {
        /** Defines the arrangement size of the given ConfigurableLayout.
         * Used to determine what width to apply to the given item when the arrangement is applied,
         * with the following mapping:
         * - 'narrow' --> applies 'full' width
         * - 'main' --> applies configured width
         * - 'half' --> applies double the configured width, or 'full' width (whichever is smaller)
         */
        size: 'narrow' | 'main' | 'half';
        /** Indicates when the ConfigurableLayout has wrapped to the full width of it's container */
        hasWrapped: boolean;
    };
}
//# sourceMappingURL=ConfigurableLayout.types.d.ts.map