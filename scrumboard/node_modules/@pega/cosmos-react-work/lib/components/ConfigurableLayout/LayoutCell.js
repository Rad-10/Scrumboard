import { jsx as _jsx } from "react/jsx-runtime";
import { useMemo } from 'react';
import styled, { css } from 'styled-components';
import { Flex, defaultThemeProp } from '@pega/cosmos-react-core';
import { StyledAppAnnouncement } from '../AppAnnouncement/AppAnnouncement';
import widthConfigOptions from './options';
import { itemMinWidth, cellGap } from './defaults';
const StyledCell = styled.div(({ fillAvailable = true, percentageWidth, minWidth, theme }) => {
    return css `
      /* variables */
      --marginGap: calc(${cellGap} * ${theme.base.spacing});
      --totalMargin: calc(2 * var(--marginGap));
      --percentageBasis: calc(${percentageWidth} - var(--totalMargin));
      --maxWidth: calc(100% - var(--totalMargin));

      /* styles */
      flex-wrap: wrap;
      flex-basis: var(--percentageBasis);
      min-width: min(var(--maxWidth), ${minWidth || itemMinWidth});
      max-width: var(--maxWidth);
      margin-block-end: var(--totalMargin);
      margin-inline: var(--marginGap);

      ${!fillAvailable &&
        css `
        flex-grow: 0;
      `}

      ${StyledAppAnnouncement} {
        align-self: stretch;
      }

      > * {
        width: 100%;
        height: auto;
        overflow-x: auto;
      }
    `;
});
StyledCell.defaultProps = defaultThemeProp;
const validWidthUnits = ['px', 'ch', 'rem', 'em'];
const LayoutCell = ({ config }) => {
    const layoutConfig = useMemo(() => config.layoutConfig, [config]);
    const percentageWidth = useMemo(() => {
        return widthConfigOptions[layoutConfig.width] || '100%';
    }, [layoutConfig.width]);
    const minWidth = useMemo(() => {
        const value = layoutConfig.minWidth;
        if (typeof value === 'number') {
            return `${value}px`;
        }
        if (Array.isArray(value) &&
            value.length >= 2 &&
            typeof value[0] === 'number' &&
            validWidthUnits.includes(value[1])) {
            return `${value[0]}${value[1]}`;
        }
    }, [layoutConfig.minWidth]);
    return config?.content ? (_jsx(Flex, { as: StyledCell, item: {
            grow: 1
        }, container: { justify: 'stretch', alignItems: 'start' }, fillAvailable: layoutConfig.fillAvailable, percentageWidth: percentageWidth, minWidth: minWidth, children: config.content })) : null;
};
export default LayoutCell;
//# sourceMappingURL=LayoutCell.js.map