{"version":3,"file":"Stakeholders.types.js","sourceRoot":"","sources":["../../../src/components/Stakeholders/Stakeholders.types.ts"],"names":[],"mappings":"","sourcesContent":["import type { ComponentType } from 'react';\n\nimport type {\n  SummaryListProps,\n  ForwardProps,\n  NoChildrenProp,\n  SummaryListItem\n} from '@pega/cosmos-react-core';\n\nexport type Role = {\n  name: string;\n  description: string;\n};\n\n/** A simple extension of a SummaryListItem. Pass onEdit and or onRemove to render either action for a stakeholder. */\nexport interface Stakeholder extends SummaryListItem, ForwardProps {\n  onEdit?: () => void;\n  onRemove?: () => void;\n}\n\nexport interface StakeholdersProps\n  extends NoChildrenProp,\n    Pick<SummaryListProps, 'count' | 'loading' | 'error' | 'ref'> {\n  /**\n   * The initial array of stakeholders presented in the default state of the widget.\n   * This array will be sliced internally to the first three items but recommend only passing up to that length as a best practice.\n   */\n  items: Stakeholder[];\n  /** Called when a user opens the add form. */\n  onAddNew?: () => void;\n  /**\n   * Data and a component required to render a form for both add and edit.\n   * If there are roles, the renderer is passed the currently selected role.\n   */\n  form: {\n    /** Indicates the form is in a loading state either initially or after add/edit is submitted. */\n    loading?: boolean;\n    /** An array of available roles a stakeholder may be assigned. */\n    roles?: Role[];\n    /**\n     * Use this when onAdd or onEdit is invoked to indicate to the component which role option to select.\n     */\n    currentRole?: Role;\n    /**\n     * A component to render the main portion of the add/edit stakeholder form.\n     * This may be a simple function and will be pass a prop when the selected role changes.\n     */\n    renderer: ComponentType<{ selectedRoleName?: Role['name'] }>;\n    /**\n     * A props object that will be passed to the form renderer.\n     */\n    rendererProps?: {\n      [key: string]: unknown;\n    };\n    /**\n     * Called when a user submits the form.\n     * The name of the currently selected role will be passed along with a function to close the form on an arg object.\n     * closeForm will close the modal or popover the form is preseneted in.\n     * closeForm can be call once validations and requests have resolved.\n     */\n    onSubmit: ({\n      selectedRoleName,\n      closeForm\n    }: {\n      selectedRoleName: Role['name'] | undefined;\n      closeForm: () => void;\n    }) => void;\n    /**\n     * Called when a user cancels a form.\n     * A function to close the form will be passed on an arg object.\n     */\n    onDismiss: ({ closeForm }: { closeForm: () => void }) => void;\n    /**\n     * Called after the modal or popover transitions and un-mounts as a result of a closeForm call or user dismissal.\n     */\n    onAfterClose?: () => void;\n  };\n  /** Called when a user opens the view all modal. */\n  onViewAll?: () => void;\n  viewAll: {\n    /** Indicates the view all list is in a loading state while data is fetched. */\n    loading?: boolean;\n    /** Pass a full or filtered list of stakeholder items. Filter based on search input. */\n    items: StakeholdersProps['items'];\n    /** Called when a user enters a view all search. Return a filtered array to viewAll['items'] with matching stakeholders. */\n    onSearch?: (value: string) => void;\n    /**\n     * Called after the modal or popover transitions and un-mounts as a result of a closeForm call or user dismissal.\n     */\n    onAfterClose?: () => void;\n  };\n}\n"]}