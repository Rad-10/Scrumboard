import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useEffect, useRef, useState } from 'react';
import { ComboBox, RadioButtonGroup, RadioButton, Flex, useI18n, Input, getFocusables } from '@pega/cosmos-react-core';
export default ({ roles, currentRole, renderer: Renderer, rendererProps, setSelectedRoleNameRef }) => {
    const contentRef = useRef(null);
    const t = useI18n();
    const [selectedRoleName, setSelectedRoleName] = useState(() => {
        if (roles) {
            return (currentRole ? roles.find(role => role.name === currentRole.name) : roles[0])?.name;
        }
    });
    let control = null;
    if (roles) {
        const label = t('stakeholders_role');
        if (roles.length > 3) {
            const items = roles.map(role => {
                return {
                    id: role.name,
                    primary: role.name,
                    selected: role.name === selectedRoleName
                };
            });
            const selected = items.find(item => item.selected);
            control = (_jsx(ComboBox, { label: label, selected: selected ? { items: { id: selected.id, text: selected.primary } } : undefined, menu: {
                    mode: 'single-select',
                    items,
                    onItemClick: setSelectedRoleName
                } }));
        }
        else {
            control = (_jsx(RadioButtonGroup, { label: label, name: 'role', inline: true, onChange: e => {
                    setSelectedRoleName(e.target.value);
                }, children: roles.map(role => (_jsx(RadioButton, { label: role.name, value: role.name, checked: role.name === selectedRoleName }, role.name))) }));
        }
    }
    else if (currentRole) {
        control = (_jsx(Input, { readOnly: true, label: t('stakeholders_role'), value: currentRole.name, info: currentRole.description }));
    }
    useEffect(() => {
        getFocusables(contentRef)[0]?.focus();
    }, []);
    useEffect(() => {
        if (!roles)
            return;
        setSelectedRoleNameRef(selectedRoleName);
    }, [selectedRoleName]);
    return (_jsxs(Flex, { container: { direction: 'column', gap: 2 }, ref: contentRef, children: [control, _jsx(Renderer, { ...rendererProps, selectedRoleName: selectedRoleName })] }));
};
//# sourceMappingURL=StakeholderForm.js.map