import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef } from 'react';
import styled, { css } from 'styled-components';
import { readableColor } from 'polished';
import { Button, StyledButton, Text, Icon, registerIcon, useI18n, tryCatch, defaultThemeProp, useDirection } from '@pega/cosmos-react-core';
import * as timesIcon from '@pega/cosmos-react-core/lib/components/Icon/icons/times.icon';
registerIcon(timesIcon);
const StyledDismissButton = styled.button `
  font-size: 1.25rem;
  border: none;
`;
export const StyledAppAnnouncement = styled.article(props => {
    const { theme: { base: { palette: { 'brand-primary': brandBackground }, shadow, spacing }, components: { card: { 'border-radius': borderRadius } } }, image } = props;
    const { end } = useDirection();
    const color = tryCatch(() => readableColor(brandBackground));
    return css `
    padding: calc(2 * ${spacing});
    background: ${brandBackground};
    border-radius: ${borderRadius};
    color: ${color};
    position: relative;

    &::after {
      background: url('${image}') no-repeat;
      background-position: ${end} bottom;
      background-size: contain;
      background-origin: content-box;
      opacity: 0.2;
      content: '';
      display: block;
      position: absolute;
      width: 50%;
      height: 100%;
      inset-inline-end: 0;
      bottom: 0;
      padding: calc(2 * ${spacing});
    }

    h2 {
      position: relative;
      z-index: 2;
      margin-bottom: ${spacing};
    }

    ${StyledDismissButton} {
      position: absolute;
      top: 0.75rem;
      inset-inline-end: 0.75rem;
      color: inherit;
      z-index: 3;
      &:enabled:hover {
        background: #ffffff19;
      }
      &:enabled:focus {
        box-shadow: ${shadow['focus-inverted']};
      }
    }

    > div {
      width: 75%;
      position: relative;
      z-index: 2;

      p,
      ul {
        padding-top: calc(2 * ${spacing});
      }

      ul {
        padding-inline-start: calc(2 * ${spacing});
      }

      ${StyledButton} {
        margin-top: calc(2 * ${spacing});
        &:enabled:focus,
        &:not([disabled]):focus {
          box-shadow: ${shadow['focus-inverted']};
        }
      }
    }
  `;
});
StyledAppAnnouncement.defaultProps = defaultThemeProp;
const AppAnnouncement = forwardRef((props, ref) => {
    const t = useI18n();
    const { heading, description, details, whatsNewLink, whatsNewText = t('app_announcement_whats_new_button_label'), image, onDismiss, ...restProps } = props;
    return (_jsxs(StyledAppAnnouncement, { ...restProps, ref: ref, image: image, children: [onDismiss && (_jsx(Button, { as: StyledDismissButton, variant: 'simple', icon: true, onClick: onDismiss, "aria-label": t('app_announcement_dismiss_button_label_a11y'), children: _jsx(Icon, { name: 'times' }) })), _jsx(Text, { variant: 'h2', children: heading || t('app_announcement_details_list_header') }), _jsxs("div", { children: [description && _jsx("p", { children: description }), details && (_jsx("ul", { children: details.map((item, index) => {
                            return _jsx("li", { children: item }, index.toString());
                        }) })), whatsNewLink && (_jsx(Button, { variant: 'secondary', href: whatsNewLink, target: '_blank', children: whatsNewText }))] })] }));
});
export default AppAnnouncement;
//# sourceMappingURL=AppAnnouncement.js.map