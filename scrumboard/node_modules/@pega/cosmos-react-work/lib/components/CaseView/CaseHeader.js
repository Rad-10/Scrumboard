import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useRef } from 'react';
import { Breadcrumbs, Flex, Icon, registerIcon, Text, Link, Button, MenuButton, useI18n, useAfterInitialEffect } from '@pega/cosmos-react-core';
import * as pencilIcon from '@pega/cosmos-react-core/lib/components/Icon/icons/pencil.icon';
import * as moreIcon from '@pega/cosmos-react-core/lib/components/Icon/icons/more.icon';
import { StyledCaseHeader, StyledCaseIconWrap, StyledCaseHeaderText, StyledPromotedActions, StyledExpandCollapseButton, StyledSubheading } from './CaseView.styles';
import { useCaseViewContext } from './CaseView.context';
registerIcon(pencilIcon, moreIcon);
const CaseHeader = () => {
    const t = useI18n();
    const { caseId, icon, heading, subheading, actions, caseLink, parentCases, onEdit, followed, onFollowedChange, promotedActions, summaryId, summaryExpanded, onToggleSummary, isPreview, aboveMD, persistentUtility } = useCaseViewContext();
    const caseActions = actions
        ? actions.map(action => {
            return {
                ...action,
                primary: action.text,
                visual: action.icon ? _jsx(Icon, { name: action.icon }) : null
            };
        })
        : undefined;
    const toggleButtonRef = useRef(null);
    // FIXME: This is a hack to get the Tooltip to reset its position when the summary changes layout.
    useAfterInitialEffect(() => {
        if (toggleButtonRef.current && toggleButtonRef.current === document.activeElement) {
            toggleButtonRef.current.blur();
            setTimeout(() => {
                toggleButtonRef.current?.focus();
            }, 0);
        }
    }, [summaryExpanded]);
    return (_jsxs("div", { children: [_jsxs(Flex, { as: StyledCaseHeader, container: { gap: 2, alignItems: 'start' }, children: [!isPreview && aboveMD && onToggleSummary && !persistentUtility && (_jsx(StyledExpandCollapseButton, { ref: toggleButtonRef, onClick: onToggleSummary, label: t(summaryExpanded ? 'collapse' : 'expand'), "aria-label": t(summaryExpanded ? 'collapse_summary_panel' : 'expand_summary_panel'), icon: true, compact: true, "aria-expanded": summaryExpanded ? 'true' : 'false', "aria-controls": summaryId, children: _jsx(Icon, { name: 'arrow-micro-left' }) })), icon && (_jsx(Flex, { container: true, item: { shrink: 0 }, as: StyledCaseIconWrap, children: icon })), _jsxs(Flex, { as: StyledCaseHeaderText, container: { direction: 'column' }, item: { grow: 1, shrink: 0, basis: '0' }, children: [_jsx(Text, { variant: 'h1', children: caseLink ? _jsx(Link, { ...caseLink, children: heading }) : heading }), subheading && (!parentCases || subheading !== caseId) && (_jsx(StyledSubheading, { children: subheading })), parentCases && (_jsx(Breadcrumbs, { forwardedAs: 'p', path: [
                                    ...parentCases,
                                    { ...caseLink, id: caseId, primary: caseId, href: caseLink?.href }
                                ] }))] }), _jsxs("div", { children: [onEdit && (_jsx(Button, { icon: true, variant: 'simple', onClick: onEdit, label: t('edit'), children: _jsx(Icon, { name: 'pencil' }) })), caseActions && (_jsx(MenuButton, { icon: 'more', iconOnly: true, variant: 'simple', text: t('actions'), menu: {
                                    items: followed !== undefined
                                        ? [
                                            {
                                                id: 'follow',
                                                primary: followed ? t('unfollow') : t('follow'),
                                                onClick: () => onFollowedChange?.(!followed)
                                            },
                                            ...caseActions
                                        ]
                                        : caseActions,
                                    scrollAt: 20
                                } }))] })] }), promotedActions && promotedActions.length > 0 ? (_jsx(Flex, { as: StyledPromotedActions, container: { wrap: 'wrap', gap: 1, pad: [1, 2] }, children: promotedActions.map(promotedAction => (_jsx(Button, { variant: 'secondary', onClick: (e) => promotedAction.onClick?.(promotedAction.id, e), children: promotedAction.text }))) })) : null] }));
};
export default CaseHeader;
//# sourceMappingURL=CaseHeader.js.map