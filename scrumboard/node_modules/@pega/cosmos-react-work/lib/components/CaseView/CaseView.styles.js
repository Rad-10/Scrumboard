import styled, { css } from 'styled-components';
import { hideVisually, parseToHsl, readableColor, transparentize } from 'polished';
import { Button, calculateFontSize, defaultThemeProp, StyledBreadcrumbs, StyledButton, StyledFieldValue, StyledFieldValueList, StyledIcon, StyledPopover, StyledText, StyledTooltip, tryCatch } from '@pega/cosmos-react-core';
import { StyledMenu } from '@pega/cosmos-react-core/lib/components/Menu/Menu.styles';
import { useCaseViewContext } from './CaseView.context';
export const StyledCaseSummaryFields = styled.div(({ theme }) => {
    const fontSizes = calculateFontSize(theme.base['font-size'], theme.base['font-scale']);
    return css `
    padding: calc(2 * ${theme.base.spacing});

    > ${StyledFieldValueList}:first-child {
      grid-template-columns: 16ch auto;

      ${StyledFieldValue} {
        font-size: ${fontSizes[theme.components.text.h1['font-size']]};
        font-weight: ${theme.components.text.h1['font-weight']};
      }
    }
  `;
});
StyledCaseSummaryFields.defaultProps = defaultThemeProp;
export const StyledCaseHeader = styled.header(({ theme }) => {
    const color = tryCatch(() => readableColor(theme.base.palette['brand-primary']));
    return css `
    background-color: ${theme.base.palette['brand-primary']};
    color: ${color};
    padding: calc(2 * ${theme.base.spacing});
    position: relative;

    ${StyledMenu} {
      color: ${theme.base.palette['foreground-color']};
      z-index: ${theme.base['z-index'].popover + 1};
    }
  `;
});
StyledCaseHeader.defaultProps = defaultThemeProp;
export const StyledCaseIconWrap = styled.div(({ theme }) => {
    const spacing = theme.base.spacing;
    const borderRadius = theme.base['border-radius'];
    const backgroundColor = tryCatch(() => {
        const { lightness } = parseToHsl(theme.base.palette['brand-primary']);
        return lightness > 0.35 ? 'rgba(0, 0, 0, 0.2)' : 'rgba(255, 255, 255, 0.2)';
    });
    return css `
    background: ${backgroundColor};
    border-radius: calc(${borderRadius} / 2);
    width: calc(5 * ${spacing});
    height: calc(5 * ${spacing});
    ${StyledIcon} {
      font-size: calc(3 * ${spacing});
      margin: auto;
    }
  `;
});
StyledCaseIconWrap.defaultProps = defaultThemeProp;
export const StyledFollowIconWrap = styled.label `
  font-size: 1.25rem;
  input {
    ${hideVisually}
  }

  input:focus + svg {
    box-shadow: ${({ theme }) => theme.base.shadow['focus-inverted']};
  }
`;
StyledFollowIconWrap.defaultProps = defaultThemeProp;
export const StyledSubheading = styled.p ``;
StyledSubheading.defaultProps = defaultThemeProp;
export const StyledCaseHeaderText = styled.hgroup(({ theme }) => {
    const color = readableColor(theme.base.palette['brand-primary']);
    const transparentColor = tryCatch(() => transparentize(0.1, color));
    const fontSize = calculateFontSize(theme.base['font-size'], theme.base['font-scale']);
    const idStyle = css `
    color: ${transparentColor};
    font-size: ${fontSize.s};
    font-weight: normal;
  `;
    return css `
    word-break: break-word;

    ${StyledSubheading} {
      ${idStyle}
    }

    ${StyledBreadcrumbs} {
      > a,
      > span,
      > button,
      > svg {
        ${idStyle}
      }

      > a,
      > button {
        &:focus {
          box-shadow: ${theme.base.shadow['focus-inverted']};
        }
      }

      ${StyledPopover}:not(${StyledTooltip}) {
        color: ${theme.base.palette['foreground-color']};
      }
    }

    > ${StyledText} > ${StyledButton} {
      color: ${color};
    }
  `;
});
StyledCaseHeaderText.defaultProps = defaultThemeProp;
export const StyledPromotedActions = styled.div(({ theme }) => {
    return css `
    border-bottom: 0.0625rem solid ${theme.base.palette['border-line']};
  `;
});
StyledPromotedActions.defaultProps = defaultThemeProp;
export const StyledCaseSummaryInfo = styled.div(() => {
    const { intelligentGuidance } = useCaseViewContext();
    return css `
    overflow: auto;
    flex: 1;
    ${intelligentGuidance &&
        css `
      /* Accounts for collapsed intelligentGuidance list covering summary panel content when fully scrolled. */
      padding-block-end: 4rem;
    `}
  `;
});
StyledCaseSummaryInfo.defaultProps = defaultThemeProp;
export const StyledExpandCollapseButton = styled(Button)(({ theme }) => {
    const { summaryExpanded } = useCaseViewContext();
    return css `
    position: absolute;
    z-index: 1;
    bottom: 0;
    inset-inline-start: ${summaryExpanded ? 'calc(100% - 0.75rem)' : '0'};
    border-radius: ${summaryExpanded ? '1.5rem' : '0 1.5rem 1.5rem 0'};
    box-shadow: ${theme.base.shadow.low};
    border: none;
    opacity: 0;

    &:focus {
      opacity: 1;
    }

    ${StyledIcon} {
      width: 1.5rem;
      height: 1.5rem;
      transform: rotate(${summaryExpanded ? 0 : css `180deg`});
    }
  `;
});
StyledExpandCollapseButton.defaultProps = defaultThemeProp;
export const StyledCaseSummary = styled.div(() => {
    const { summaryExpanded, aboveMD, aboveLG } = useCaseViewContext();
    return css `
    position: relative;
    height: 100%;

    ${aboveMD &&
        css `
      ${summaryExpanded
            ? css `
            width: ${aboveLG ? css `25rem` : css `22rem`};

            &:focus-within,
            &:hover {
              &::after {
                content: '';
                position: absolute;
                top: 0;
                bottom: 0;
                inset-inline-start: 100%;
                width: 0.75rem;
              }

              ${StyledExpandCollapseButton} {
                opacity: 1;
              }
            }
          `
            : css `
            width: 100%;
            ${StyledExpandCollapseButton} {
              opacity: 1;
            }
          `}
    `}
  `;
});
StyledCaseSummary.defaultProps = defaultThemeProp;
export const StyledWorkArea = styled.div(({ theme }) => {
    const { summaryExpanded, aboveMD, intelligentGuidance } = useCaseViewContext();
    let pbeRem = 0;
    if (intelligentGuidance) {
        pbeRem = aboveMD && !summaryExpanded ? 4 : 6;
    }
    return css `
    grid-area: work-area;
    padding: calc(2 * ${theme.base.spacing});

    ${aboveMD &&
        css `
      padding: calc(2 * ${theme.base.spacing}) 0;

      ${!summaryExpanded &&
            css `
        margin-inline-start: calc(2 * ${theme.base.spacing});
      `}
    `}

    /* Order of style here is necessary for overriding styles above. */
    ${pbeRem > 0 &&
        css `
      /* Accounts for collapsed intelligentGuidance bubble covering work area content when fully scrolled. */
      padding-block-end: ${pbeRem}rem;
    `}
  `;
});
StyledWorkArea.defaultProps = defaultThemeProp;
export const StyledUtilToggle = styled.button(({ theme }) => {
    return css `
    align-self: flex-end;
    color: ${theme.base.palette['foreground-color']};
    margin-inline-end: 0.375rem;
  `;
});
StyledUtilToggle.defaultProps = defaultThemeProp;
export const StyledUtilities = styled.div(() => {
    const { utilitiesExpanded, aboveLG } = useCaseViewContext();
    return css `
    height: max-content;

    ${aboveLG &&
        utilitiesExpanded &&
        css `
      width: 25rem;
    `}
  `;
});
StyledUtilities.defaultProps = defaultThemeProp;
export const StyledSummary = styled.div(({ theme }) => {
    const { summaryExpanded, aboveMD } = useCaseViewContext();
    return css `
    position: sticky;
    top: ${summaryExpanded ? 'var(--top-offset)' : 'var(--appshell-offset, 0)'};
    width: 100%;
    background-color: ${theme.base.palette['primary-background']};
    z-index: ${theme.base['z-index'].popover};

    ${aboveMD &&
        summaryExpanded &&
        css `
      height: var(--case-view-height);
    `}
  `;
});
StyledSummary.defaultProps = defaultThemeProp;
export const StyledCaseDrawer = styled.div(({ theme }) => {
    return css `
    min-width: 21.875rem;
    max-width: 31.25rem;
    width: calc((100vw - 31.25rem) / 10 + 21.875rem);
    background-color: ${theme.base.palette['primary-background']};
    height: var(--case-view-height);
    top: var(--top-offset);
    z-index: ${theme.base['z-index'].drawer - 1};
  `;
});
StyledCaseDrawer.defaultProps = defaultThemeProp;
export const StyledCaseDrawerContent = styled.div(({ theme }) => {
    return css `
    background-color: ${theme.base.palette['app-background']};
    padding: calc(2 * ${theme.base.spacing});
    height: 100%;
    overflow: auto;
  `;
});
StyledCaseDrawerContent.defaultProps = defaultThemeProp;
export const StyledPersistentUtility = styled.div(({ theme }) => {
    return css `
    min-width: ${theme.base['content-width'].sm};
    max-width: ${theme.base['content-width'].md};
    overflow: auto;
    position: sticky;
    z-index: 1;
    height: var(--case-view-height);
    top: var(--top-offset);
  `;
});
StyledPersistentUtility.defaultProps = defaultThemeProp;
export const ScrollStick = styled.div `
  position: sticky;
  top: 0;
`;
export const StyledCaseView = styled.div(({ theme }) => {
    const { aboveMD } = useCaseViewContext();
    return css `
    --top-offset: calc(var(--appshell-offset, 0rem) + var(--summary-height));
    --case-view-height: calc(100vh - var(--top-offset));
    position: relative;
    min-height: var(--case-view-height);
    background-color: ${theme.base.palette['app-background']};

    ${aboveMD &&
        css `
      ${StyledUtilities}:last-child {
        margin-inline-end: calc(2 * ${theme.base.spacing});
      }
    `}
  `;
});
StyledCaseView.defaultProps = defaultThemeProp;
//# sourceMappingURL=CaseView.styles.js.map