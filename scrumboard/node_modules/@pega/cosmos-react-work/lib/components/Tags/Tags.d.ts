import { FunctionComponent, Ref } from 'react';
import { BaseProps, ForwardProps, ErrorStateProps, NoChildrenProp } from '@pega/cosmos-react-core';
export interface SelectedTag {
    text: string;
    newTag?: boolean;
}
export interface TagsProps extends BaseProps, NoChildrenProp {
    /** A list of tags. */
    tags: string[];
    /**
     * A list of available tags to add from.
     * @default []
     * */
    availableTags?: string[];
    /** If true, a loading indicator will render in place of the tags list. */
    loading?: boolean;
    /** If defined, an error message will render in the component and actions will be disabled. */
    error?: boolean | string | ErrorStateProps;
    /** Callback triggered when a search query is changed in the Edit tags modal. */
    onSearch?: (filterValue: string) => void;
    /** Callback triggered when a tag is clicked. */
    onTagClick?: (tag: string) => void;
    /** Callback triggered when modified tags are submitted from the modal. */
    onEditTags?: (tags: SelectedTag[]) => Promise<void>;
    /** Ref for the Tags card. */
    ref?: Ref<HTMLElement>;
}
export declare const StyledTags: import("styled-components").StyledComponent<"article", import("styled-components").DefaultTheme, {
    isLoading?: boolean | undefined;
    viewAll?: boolean | undefined;
}, never>;
declare const Tags: FunctionComponent<TagsProps & ForwardProps>;
export default Tags;
//# sourceMappingURL=Tags.d.ts.map