import styled, { css } from 'styled-components';
import { calculateFontSize, defaultThemeProp, StyledFieldValue, StyledStackedFieldValue, StyledFieldValueList, StyledIcon, useDirection, StyledButton } from '@pega/cosmos-react-core';
const verticalGapSpacingMultiplier = 1;
// colWidth reduces by 20% as column count increases
export const colCountChWidth = {
    '1': {
        containerWidth: 100,
        colWidth: 100
    },
    '2': {
        containerWidth: 80 * 2,
        colWidth: 80
    },
    '3': {
        containerWidth: 64 * 3,
        colWidth: 64
    }
};
export const flexGapProp = 5.5;
export const chToRem = (chVal) => {
    return chVal / 2;
};
export const StyledFieldValueGroupLabel = styled.div(({ theme }) => {
    const { base: { spacing, animation } } = theme;
    const { rtl } = useDirection();
    return css `
    width: 100%;
    grid-column-start: 1;
    grid-column-end: -1;
    margin-block-end: calc(0.5 * ${spacing});

    &:not(:first-child) {
      margin-block-start: calc(3 * ${spacing});
    }

    ${StyledButton} ${StyledIcon} {
      transition: transform ${animation.speed} ${animation.timing.ease};
    }

    ${StyledButton}[aria-expanded='true'] ${StyledIcon} {
      transform: rotate(90deg);
    }

    ${StyledButton}[aria-expanded='false'] ${StyledIcon} {
      transform: rotate(${rtl ? 180 : 0}deg);
    }
  `;
});
StyledFieldValueGroupLabel.defaultProps = defaultThemeProp;
export const StyledHighlightedDetailList = styled.dl(({ theme }) => {
    const { base: { spacing, palette } } = theme;
    const fontSize = calculateFontSize(theme.base['font-size'], theme.base['font-scale']);
    return css `
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(40ch, 1fr));
    column-gap: calc(5 * ${spacing});
    gap: calc(2 * ${spacing});
    align-items: start;
    max-width: ${`${colCountChWidth[3].containerWidth}ch}`};
    padding-block-end: calc(1.5 * ${spacing});

    dd {
      font-size: ${fontSize[theme.components.text.h1['font-size']]};
      font-weight: ${theme.components.text.h1['font-weight']};
    }

    + hr {
      border-top: unset;
      border-radius: unset;
      border-style: unset;
      border-bottom: 0.0625rem solid ${palette['border-line']};
      margin-block-end: calc(1.5 * ${spacing});
    }
  `;
});
StyledHighlightedDetailList.defaultProps = defaultThemeProp;
export const StyledDetails = styled.div(() => {
    return css `
    grid-column: 1 / -1;
  `;
});
StyledDetails.defaultProps = defaultThemeProp;
const nthRecursiveContainerSelector = (depth, includeAllImmediateContainers) => {
    const firstContainerSelector = '> div:first-child';
    const baseSelector = includeAllImmediateContainers ? '> div' : firstContainerSelector;
    return baseSelector.concat(` ${firstContainerSelector}`.repeat(depth));
};
const initialLabelNoMargin = (applyToAllChildren = false) => {
    return css `
    ${nthRecursiveContainerSelector(0, applyToAllChildren)},
    ${nthRecursiveContainerSelector(1, applyToAllChildren)},
    ${nthRecursiveContainerSelector(2, applyToAllChildren)},
    ${nthRecursiveContainerSelector(3, applyToAllChildren)},
    ${nthRecursiveContainerSelector(4, applyToAllChildren)},
    ${nthRecursiveContainerSelector(5, applyToAllChildren)},
    ${nthRecursiveContainerSelector(6, applyToAllChildren)},
    ${nthRecursiveContainerSelector(7, applyToAllChildren)},
    ${nthRecursiveContainerSelector(8, applyToAllChildren)},
    ${nthRecursiveContainerSelector(9, applyToAllChildren)},
    ${nthRecursiveContainerSelector(10, applyToAllChildren)} {
      > ${StyledFieldValueGroupLabel}:first-child {
        margin-block-start: 0;
      }
    }
  `;
};
export const StyledDetailList = styled(StyledFieldValueList)(({ stacked, flex, hasName, nested, labelLength, variant, theme, wrapped = false, columnCount = 1 }) => {
    const { base: { spacing } } = theme;
    const isValueComparison = variant === 'value-comparison';
    const containerWidthCh = colCountChWidth[columnCount].containerWidth;
    const containerWidthMinusLabel = `${containerWidthCh - (labelLength ?? 0)}ch`;
    return css `
      /* Top Level Styles */
      ${!nested &&
        css `
        ${StyledFieldValue} {
          word-break: break-word;
          overflow: auto;
        }

        ${StyledFieldValueGroupLabel} {
          margin-block-start: calc(3 * ${spacing});
        }

        > ${StyledFieldValueGroupLabel}:nth-child(1) {
          margin-block-start: 0;
        }

        ${StyledStackedFieldValue} {
          grid-column: 1 / -1;
        }
      `}

      /* Nested List */
      ${nested &&
        css `
        grid-column: 1 / -1;
      `}

      /* As Field Grid */
      ${!flex &&
        css `
        display: grid;
        grid-template-columns: ${`minmax(14ch, ${labelLength}ch) minmax(14ch, 1fr)`};
        column-gap: calc(2 * ${spacing});
        row-gap: calc(${verticalGapSpacingMultiplier} * ${spacing});

        ${stacked &&
            css `
          grid-template-columns: minmax(0, 1fr);
          row-gap: 0;
        `}

        > ${StyledStackedFieldValue} {
          max-width: ${`${containerWidthCh}ch`};
        }

        > ${StyledFieldValue} {
          max-width: calc(${containerWidthMinusLabel} - calc(2 * ${spacing}));
        }

        ${isValueComparison &&
            css `
          grid-template-columns: auto auto;
          column-gap: 0;
          row-gap: calc(0.5 * ${spacing});
          max-width: ${`${containerWidthCh}ch`};
        `}
      `}

      /* As Flex Container */
      ${flex &&
        css `
        display: flex;
        flex-direction: ${wrapped ? 'column' : 'row'};
        column-gap: calc(${flexGapProp} * ${spacing});
        align-items: flex-start;

        max-width: ${`${containerWidthCh}ch`};

        ${!wrapped &&
            css `
          > * {
            max-width: ${`${100 / columnCount}%`};
          }

          ${hasName && initialLabelNoMargin(true)}
        `}

        ${wrapped &&
            css `
          ${hasName && initialLabelNoMargin()}

          ${!stacked &&
                css `
              > div:not(:first-child) {
                margin-block-start: calc(${verticalGapSpacingMultiplier} * ${spacing});
              }
            `}}
        `}
      `}

      /* Key / Group Label Spacing */
      ${!nested &&
        css `
        > div {
          + dt {
            margin-block-start: calc(3 * ${spacing});
          }

          + ${StyledStackedFieldValue} {
            margin-block-start: calc(3 * ${spacing});
          }

          ${!stacked &&
            css `
            + dt + dd {
              margin-block-start: calc(3 * ${spacing});
            }
          `}
        }

        ${initialLabelNoMargin()}
      `}

      ${stacked &&
        css `
        dt {
          margin-block-start: calc(${verticalGapSpacingMultiplier} * ${spacing});
        }
      `}

      ${StyledFieldValueGroupLabel} + div {
        > ${StyledFieldValueGroupLabel}:first-child {
          margin-block-start: 0;
        }

        ${initialLabelNoMargin()}
      }
    `;
});
StyledDetailList.defaultProps = defaultThemeProp;
//# sourceMappingURL=Details.styles.js.map