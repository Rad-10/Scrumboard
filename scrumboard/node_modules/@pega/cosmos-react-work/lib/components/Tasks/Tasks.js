import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useMemo } from 'react';
import styled, { css } from 'styled-components';
import { Card, CardHeader, CardContent, CardFooter, Flex, Text, SummaryItem, Count, Button, useI18n, defaultThemeProp } from '@pega/cosmos-react-core';
import TaskList, { TaskItem } from './TaskList';
const StyledTasks = styled(Card)(({ theme, openItem }) => {
    return openItem
        ? css `
        box-shadow: ${theme.base.shadow.low};
      `
        : null;
});
StyledTasks.defaultProps = defaultThemeProp;
const Tasks = (props) => {
    const { items = [], headerText, headerVisual, headerSecondary, count, onExpandToggle, emptyPlaceholder, ...restProps } = props;
    const openItem = items.find(item => item.content);
    const t = useI18n();
    const hasFooter = useMemo(() => {
        return !openItem && typeof count === 'number' && count > 3;
    }, [openItem, count]);
    const TaskItems = useMemo(() => {
        return openItem ? _jsx(TaskItem, { ...openItem }) : _jsx(TaskList, { items: items, hasFooter: hasFooter });
    }, [items, openItem]);
    return (_jsxs(StyledTasks, { ...restProps, openItem: !!openItem, children: [!openItem && (_jsx(CardHeader, { children: _jsx(SummaryItem, { visual: headerVisual, primary: _jsxs(Flex, { container: { alignItems: 'center', gap: 1 }, children: [_jsx(Text, { variant: 'h2', children: headerText }), _jsx(Count, { children: count ?? null })] }), secondary: headerSecondary }) })), _jsx(CardContent, { children: items.length > 0 ? TaskItems : emptyPlaceholder }), hasFooter && (_jsx(CardFooter, { justify: 'center', children: _jsx(Button, { variant: 'link', "aria-label": t(!!count && count > items.length ? 'show_more' : 'show_less', ['tasks']), onClick: (e) => {
                        onExpandToggle?.();
                        if (!!count && count <= items.length) {
                            const { currentTarget } = e;
                            requestAnimationFrame(() => {
                                if (currentTarget.getBoundingClientRect().top < 0)
                                    currentTarget.scrollIntoView();
                            });
                        }
                    }, children: t(!!count && count > items.length ? 'show_more' : 'show_less') }) }))] }));
};
export default Tasks;
//# sourceMappingURL=Tasks.js.map