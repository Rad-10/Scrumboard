import { createElement as _createElement } from "react";
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { forwardRef } from 'react';
import styled, { css } from 'styled-components';
import { SummaryItem, StyledSummaryListItem, Flex, defaultThemeProp, Button, useI18n, VisuallyHiddenText, Breadcrumbs, StyledBreadcrumbs, StyledText } from '@pega/cosmos-react-core';
const StyledTaskList = styled.ul(({ theme, hasFooter }) => {
    return css `
    ${hasFooter &&
        css `
      > li:last-child {
        border-bottom: 0.0625rem solid ${theme.base.palette['border-line']};
      }
    `}

    ${StyledBreadcrumbs} > ${StyledText} {
      font-weight: ${theme.base['font-weight']['semi-bold']};
    }
  `;
});
StyledTaskList.defaultProps = defaultThemeProp;
export const TaskItem = ({ id, name, avatar, meta, processName, onOpen, content, ...restProps }) => {
    const t = useI18n();
    const summary = (_jsx(SummaryItem, { visual: avatar, primary: processName ? (_jsx(Breadcrumbs, { path: [
                { id: 'processName', primary: processName },
                { id: 'name', primary: name }
            ] })) : (name), secondary: meta, actions: onOpen && !content ? (_jsxs(Button, { variant: 'primary', onClick: (e) => onOpen(id, e), children: [_jsx("span", { children: t('go') }), _jsx(VisuallyHiddenText, { children: `-${processName ?? ''} ${name}` })] })) : null }));
    return (_jsx(Flex, { container: { direction: 'column', gap: 2 }, item: { grow: 1 }, as: StyledSummaryListItem, forwardedAs: 'li', ...restProps, children: content ? (_jsxs(_Fragment, { children: [summary, content] })) : (summary) }));
};
const TaskList = forwardRef(({ items, hasFooter = false }, ref) => {
    return (_jsx(Flex, { container: { direction: 'column' }, as: StyledTaskList, hasFooter: hasFooter, ref: ref, children: items.map((item, i) => (_createElement(TaskItem, { ...item, key: `${i + 1}` }))) }));
});
export default TaskList;
//# sourceMappingURL=TaskList.js.map