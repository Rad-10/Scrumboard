import styled, { css } from 'styled-components';
import { rgba } from 'polished';
import { calculateFontSize, CardContent, DateTimeDisplay, defaultThemeProp, Popover, StyledIcon, tryCatch, useDirection } from '@pega/cosmos-react-core';
export const StyledStages = styled.div(props => {
    return css `
    background-color: ${props.theme.base.palette['primary-background']};
    border-radius: ${props.theme.base['border-radius']};
    width: 100%;
    overflow: hidden;
  `;
});
StyledStages.defaultProps = defaultThemeProp;
export const StyledInnerStage = styled.span(props => {
    return css `
    display: inline-block;
    text-align: center;
    white-space: nowrap;
    ${props.ellipsis &&
        css `
      overflow: hidden;
      text-overflow: ellipsis;
    `}
  `;
});
export const StyledStage = styled.button(({ theme: { base: { spacing, palette, 'hit-area': hitArea, transparency, 'border-radius': borderRadius } } }) => {
    const thinBorderWidth = '0.0625rem';
    const thickBorderWidth = '0.125rem';
    const { rtl } = useDirection();
    const borderShadow = tryCatch(() => rgba(palette['border-line'], 1));
    return css `
      /* stylelint-disable no-descending-specificity */
      background-color: inherit;
      color: ${palette['foreground-color']};
      outline: none;
      border-color: transparent;
      border-width: ${thinBorderWidth} 0;
      border-style: solid;
      position: relative;
      height: calc(4 * ${spacing});
      padding-inline-start: calc(2 * ${spacing});
      padding-inline-end: ${spacing};

      @media (pointer: coarse) {
        height: ${hitArea['finger-min']};
        padding-inline-start: calc(2.25 * ${spacing});
      }

      ${StyledIcon} {
        color: ${palette.success};
        flex-shrink: 0;

        & ~ ${StyledInnerStage} {
          margin-inline-start: 0.25rem;
        }
      }

      ${StyledInnerStage} {
        opacity: ${transparency['transparent-2']};
      }

      &:first-of-type {
        border-start-start-radius: ${borderRadius};
        border-end-start-radius: ${borderRadius};
        border-inline-start-width: ${thinBorderWidth};
        padding-inline-start: ${spacing};

        &:active {
          padding-inline-start: ${spacing};
        }

        &:focus {
          border-inline-start-width: ${thickBorderWidth};
          padding-inline-start: calc(${spacing} - ${thickBorderWidth} + ${thinBorderWidth});
        }
      }

      &:last-of-type {
        border-start-end-radius: ${borderRadius};
        border-end-end-radius: ${borderRadius};
        border-inline-end-width: ${thinBorderWidth};
        padding-inline-end: ${spacing};

        &:active {
          border-inline-end-width: ${thinBorderWidth};
          padding-inline-end: ${spacing};
        }

        &:focus {
          border-inline-end-width: ${thickBorderWidth};
          padding-inline-end: calc(${spacing} - ${thinBorderWidth});
        }
      }

      &:not(:first-of-type)::before,
      &:not(:last-of-type)::after {
        content: '';
        position: absolute;
        display: block;
        width: calc(2.25 * ${spacing});
        height: calc(2.25 * ${spacing});
        background-color: transparent;
        border-style: solid;
        border-color: ${palette['border-line']};
        border-inline-end-width: ${thinBorderWidth};
        border-inline-start-width: 0;
        border-top-width: ${rtl ? 0 : thinBorderWidth};
        border-bottom-width: ${rtl ? thinBorderWidth : 0};
        transform: rotateZ(45deg) skew(15deg, 15deg);

        @media (pointer: coarse) {
          width: calc(2.875 * ${spacing});
          height: calc(2.875 * ${spacing});
          transform: rotateZ(45deg) skew(20deg, 20deg);
        }
      }

      &:not(:first-of-type)::before {
        inset-inline-start: calc(-1.125 * ${spacing});

        @media (pointer: coarse) {
          inset-inline-start: calc(-1.375 * ${spacing});
        }
      }

      &:not(:last-of-type)::after {
        inset-inline-end: calc(-1.125 * ${spacing});
        z-index: 1;

        @media (pointer: coarse) {
          inset-inline-end: calc(-1.375 * ${spacing});
        }
      }

      &:hover,
      &:hover::before,
      &:hover::after {
        border-color: ${palette['border-line']};
      }

      &:focus,
      &:active,
      &:focus::before,
      &:active::before,
      &:focus::after,
      &:active::after {
        border-color: ${palette.interactive};
      }

      &:focus {
        border-width: ${thickBorderWidth} 0;
      }

      &:focus::before,
      &:focus::after {
        z-index: 1;
        border-inline-end-width: ${thickBorderWidth};
        border-top-width: ${rtl ? 0 : thickBorderWidth};
        border-bottom-width: ${rtl ? thickBorderWidth : 0};
      }

      &:focus::before {
        pointer-events: none;
      }

      &:active {
        border-width: ${thinBorderWidth} 0;

        ${StyledInnerStage} {
          opacity: ${transparency['transparent-3']};
        }
      }

      &:active::before,
      &:active::after {
        border-inline-end-width: ${thinBorderWidth};
        border-top-width: ${rtl ? 0 : thinBorderWidth};
        border-bottom-width: ${rtl ? thinBorderWidth : 0};
      }

      &[aria-current] {
        ${StyledInnerStage} {
          font-weight: bold;
          opacity: 1;
        }

        &:hover {
          ${StyledInnerStage} {
            opacity: ${transparency['transparent-2']};
          }
        }
      }

      &[aria-current]::after {
        filter: drop-shadow(0.0625rem -0.0625rem 0.125rem ${borderShadow});
      }
    `;
});
StyledStage.defaultProps = defaultThemeProp;
export const StyledStagePopover = styled(Popover) `
  width: 36ch;
`;
StyledStagePopover.defaultProps = defaultThemeProp;
export const StyledStepsContainer = styled.ol(({ theme }) => {
    return css `
    list-style-type: none;
    margin: calc(2 * ${theme.base.spacing}) 0 calc(3 * ${theme.base.spacing});

    &:empty {
      margin-block-end: 0;
    }
  `;
});
StyledStepsContainer.defaultProps = defaultThemeProp;
export const StyledStep = styled.li(({ completed, theme }) => {
    const textOpacity = completed ? theme.base.transparency['transparent-2'] : 1;
    return css `
    border-radius: 0;
    margin-block-end: calc(${theme.base.spacing});
    color: ${theme.base.palette['foreground-color']};

    &:last-child {
      margin-block-end: 0;
    }

    & > ${StyledIcon} {
      flex-shrink: 0;
      text-align: center;

      ${completed &&
        css `
        color: ${theme.base.palette.success};
      `}
    }

    div {
      opacity: ${textOpacity};
    }
  `;
});
StyledStep.defaultProps = defaultThemeProp;
export const StyledPopoverContent = styled(CardContent) `
  min-height: 6rem;
`;
StyledPopoverContent.defaultProps = defaultThemeProp;
export const StyledDateTimeDisplay = styled(DateTimeDisplay)(({ theme }) => {
    const fontSize = calculateFontSize(theme.base['font-size'], theme.base['font-scale']);
    return css `
    font-size: ${fontSize.xs};
    opacity: ${theme.base.transparency['transparent-2']};
  `;
});
StyledDateTimeDisplay.defaultProps = defaultThemeProp;
export const StyledStageGlimpse = styled.div(({ theme }) => {
    return css `
    h2 {
      margin-block-end: calc(0.25 * ${theme.base.spacing});
    }
  `;
});
StyledStageGlimpse.defaultProps = defaultThemeProp;
//# sourceMappingURL=Stages.styles.js.map