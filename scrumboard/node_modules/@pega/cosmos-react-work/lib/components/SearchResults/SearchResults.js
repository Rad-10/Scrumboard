import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { forwardRef, useContext, useRef, useState } from 'react';
import { createPortal } from 'react-dom';
import { Button, Count, Flex, Grid, Icon, registerIcon, Modal, EmptyState, SearchInput, Selectable, Text, useModalManager, useI18n, useBreakpoint, useAfterInitialEffect, SummaryItem, Avatar, useTheme, AppShellContext, Progress } from '@pega/cosmos-react-core';
import * as filterIcon from '@pega/cosmos-react-core/lib/components/Icon/icons/filter.icon';
import * as filterOnIcon from '@pega/cosmos-react-core/lib/components/Icon/icons/filter-on.icon';
import SearchResult from './SearchResult';
import Filter from './Filter';
import { StyledModalFilterContent, StyledCountText, StyledSelectedFilters, StyledSearchResults, StyledResults, StyledFilters, StyledSearchSummaryItem } from './SearchResults.styles';
registerIcon(filterIcon, filterOnIcon);
const FilterModal = (props) => {
    const { activeFilters, count, filters, onFilterChange, onClearFilter, onClearAllFilters } = props;
    const t = useI18n();
    return (_jsx(Modal, { heading: t('filters'), autoWidth: true, children: _jsxs(Grid, { as: StyledModalFilterContent, container: { rowGap: 2 }, children: [_jsxs(Flex, { container: { gap: 1, alignItems: 'center' }, children: [_jsx(Text, { as: StyledCountText, variant: 'secondary', children: t('results_count', [count], { count }) }), onClearAllFilters && !!activeFilters.length && (_jsx(Button, { variant: 'link', onClick: onClearAllFilters, children: t('clear_all') }))] }), !!activeFilters.length && (_jsx(Flex, { as: StyledSelectedFilters, container: { gap: 1 }, children: activeFilters.map(filter => {
                        return (_jsx(Selectable, { id: filter.id, onRemove: () => onFilterChange?.({
                                name: filter.groupName,
                                type: filter.type,
                                value: filter.resetValue
                            }), children: `${filter.groupName}: ${filter.name}` }, filter.id));
                    }) })), _jsx("div", { children: filters.map((filter) => {
                        return (_jsx(Filter, { onFilterChange: onFilterChange, onClearFilter: onClearFilter, ...filter }, filter.name));
                    }) })] }) }));
};
const SearchResults = forwardRef(({ results, searchInputProps, count, filters, onFilterChange, onClearAllFilters, onClearFilter, onShowMore, loading = false, ...restProps }, ref) => {
    const t = useI18n();
    const isMedium = useBreakpoint('md');
    const { create } = useModalManager();
    const { searchContainerEl } = useContext(AppShellContext);
    const filtersMethods = useRef();
    const { placeholder = t('search_placeholder_default') } = searchInputProps;
    const { base: { palette: { 'brand-primary': primary } } } = useTheme();
    const [accent, setAccent] = useState();
    const [submittedSearchValue, setSubmittedSearchValue] = useState(searchInputProps.value);
    const activeFilters = filters.flatMap(group => {
        if (group.type === 'select') {
            return group.items.flatMap(item => {
                if (item.checked) {
                    return {
                        id: item.id,
                        name: item.name,
                        resetValue: { ...item, checked: false },
                        groupName: group.name,
                        type: group.type
                    };
                }
                return [];
            });
        }
        return [];
    });
    const openFiltersModal = () => {
        filtersMethods.current = create(FilterModal, {
            activeFilters,
            count,
            filters,
            onFilterChange,
            onClearFilter,
            onClearAllFilters
        });
    };
    useAfterInitialEffect(() => {
        if (filtersMethods.current) {
            filtersMethods.current.update({
                activeFilters,
                count,
                filters
            });
        }
    }, [activeFilters, count, filters]);
    useAfterInitialEffect(() => {
        if (isMedium && filtersMethods.current)
            filtersMethods.current.dismiss();
    }, [isMedium]);
    useAfterInitialEffect(() => {
        setAccent(submittedSearchValue ? new RegExp(submittedSearchValue, 'gi') : undefined);
    }, [submittedSearchValue]);
    const searchTitle = (_jsx(SummaryItem, { as: StyledSearchSummaryItem, visual: _jsx(Avatar, { icon: 'search', name: 'search', shape: 'squircle', backgroundColor: primary, color: 'white' }), primary: _jsx(Text, { variant: 'h1', children: "Search" }), actions: onClearAllFilters &&
            isMedium &&
            !!activeFilters.length && (_jsx(Button, { variant: 'link', onClick: onClearAllFilters, children: t('clear_all') })) }));
    const searchInput = (_jsx(SearchInput, { ...searchInputProps, onSearchSubmit: val => {
            searchInputProps.onSearchSubmit?.(val);
            setSubmittedSearchValue(val);
        }, placeholder: placeholder }));
    return (_jsxs(Grid, { ...restProps, as: StyledSearchResults, ref: ref, md: filters.length
            ? {
                container: {
                    cols: '15rem auto'
                }
            }
            : undefined, sm: filters.length
            ? {
                container: {
                    cols: 'auto',
                    rowGap: 2
                }
            }
            : undefined, container: {
            rows: 'auto auto',
            cols: 'auto 1fr',
            areas: '"filters results"'
        }, children: [isMedium && !!filters.length && (_jsxs(Grid, { item: { area: 'filters', alignSelf: 'start' }, as: StyledFilters, children: [searchTitle, filters.map((filter) => {
                        return (_jsx(Filter, { onFilterChange: onFilterChange, onClearFilter: onClearFilter, ...filter }, filter.name));
                    })] })), _jsxs(Grid, { item: { alignSelf: 'start', area: 'results' }, container: {
                    alignItems: 'center',
                    rowGap: 2,
                    rows: 'auto auto 1fr',
                    areas: '"search" "meta" "items"'
                }, as: StyledResults, children: [loading && _jsx(Progress, { placement: 'local' }), searchContainerEl && isMedium ? (createPortal(searchInput, searchContainerEl)) : (_jsxs(Grid, { item: { area: 'search' }, children: [!isMedium && searchTitle, searchInput] })), _jsxs(Grid, { item: { area: 'meta' }, container: { rowGap: 1 }, children: [_jsxs(Flex, { container: { justify: 'between', alignItems: 'center' }, children: [!loading && (_jsx(Text, { as: StyledCountText, variant: 'secondary', children: submittedSearchValue !== '' || results.length > 0
                                            ? t('results_count', [count], { count })
                                            : '' })), !isMedium && !!filters.length && (_jsxs(Button, { variant: 'simple', onClick: openFiltersModal, children: [_jsx(Icon, { name: activeFilters.length > 0 ? 'filter-on' : 'filter' }), "\u00A0", t('filters'), "\u00A0", _jsx(Count, { children: activeFilters.length })] }))] }), !!activeFilters.length && (_jsx(Flex, { as: StyledSelectedFilters, container: { gap: 1, wrap: 'wrap' }, children: activeFilters.map(filter => {
                                    return (_jsx(Selectable, { id: filter.id, onRemove: () => onFilterChange?.({
                                            name: filter.groupName,
                                            type: filter.type,
                                            value: filter.resetValue
                                        }), children: `${filter.groupName}: ${filter.name}` }, filter.id));
                                }) }))] }), _jsx(Grid, { item: { area: 'items', alignSelf: results.length ? 'start' : 'stretch' }, container: { rowGap: 2 }, children: !loading && (_jsxs(_Fragment, { children: [results.length ? (results.map((result) => {
                                    return _jsx(SearchResult, { ...result, accent: accent }, result.id);
                                })) : (_jsx(Grid, { item: { alignSelf: 'stretch' }, children: _jsx(EmptyState, { message: submittedSearchValue === '' ? t('empty_search') : undefined }) })), onShowMore && (_jsx(Flex, { container: { justify: 'center' }, children: _jsx(Button, { variant: 'link', onClick: onShowMore, children: t('show_more') }) }))] })) })] })] }));
});
export default SearchResults;
//# sourceMappingURL=SearchResults.js.map