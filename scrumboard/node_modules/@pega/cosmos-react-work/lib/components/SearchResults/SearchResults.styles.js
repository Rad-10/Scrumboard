import styled, { css } from 'styled-components';
import { Button, calculateFontSize, defaultThemeProp, StyledIcon, StyledSearchInput, useDirection } from '@pega/cosmos-react-core';
export const StyledSearchResults = styled.div `
  min-height: inherit;
`;
StyledSearchResults.defaultProps = defaultThemeProp;
export const StyledFilterTitle = styled.span(({ theme: { base } }) => {
    return css `
    padding-bottom: calc(2 * ${base.spacing});
  `;
});
StyledFilterTitle.defaultProps = defaultThemeProp;
export const StyledCountText = styled.span(({ theme: { base } }) => {
    return css `
    font-weight: ${base['font-weight']['semi-bold']};
  `;
});
StyledCountText.defaultProps = defaultThemeProp;
export const StyledModalFilterContent = styled.div(({ theme: { base: { spacing } } }) => {
    return css `
      margin-top: calc(0.5 * ${spacing});
      width: calc(${spacing} * 50);
    `;
});
StyledModalFilterContent.defaultProps = defaultThemeProp;
export const StyledSelectedFilters = styled.div(({ theme: { base: { spacing } } }) => {
    return css `
      overflow-x: auto;
      padding-bottom: calc(1 * ${spacing});
    `;
});
StyledSelectedFilters.defaultProps = defaultThemeProp;
export const StyledFilter = styled.div ``;
StyledFilter.defaultProps = defaultThemeProp;
export const StyledFilterButton = styled(Button)(({ theme: { base } }) => {
    const fontSize = calculateFontSize(base['font-size'], base['font-scale']);
    const { rtl } = useDirection();
    return css `
    display: inline-flex;
    font-size: ${fontSize.xl};

    ${StyledIcon} {
      height: 1em;
      width: 1em;
      transition: transform ${base.animation.speed} ${base.animation.timing.ease};
    }

    &[aria-expanded='true'] ${StyledIcon} {
      transform: rotate(0);
    }

    &[aria-expanded='false'] ${StyledIcon} {
      transform: rotate(calc(${rtl ? '1' : '-1'} * 90deg));
    }
  `;
});
StyledFilterButton.defaultProps = defaultThemeProp;
export const StyledSearchSummaryItem = styled.div(({ theme: { base: { spacing } } }) => css `
    column-gap: calc(${spacing} * 1);

    + ${StyledSearchInput} {
      margin-block-start: calc(${spacing} * 1);
    }
  `);
StyledSearchSummaryItem.defaultProps = defaultThemeProp;
export const StyledFilters = styled.div(({ theme }) => {
    return css `
    position: sticky;
    top: var(--appshell-offset, 0);
    max-height: calc(100vh - var(--appshell-offset, 0rem));
    overflow: auto;
    > ${StyledFilter}, ${StyledSearchSummaryItem} {
      border-bottom: 0.0125rem solid ${theme.base.palette['border-line']};
      padding: calc(${theme.base.spacing} * 2);
    }
  `;
});
StyledFilters.defaultProps = defaultThemeProp;
export const StyledResults = styled.div(({ theme }) => {
    return css `
    background-color: ${theme.base.palette['primary-background']};
    padding: calc(${theme.base.spacing} * 2);
    position: relative;
    min-height: calc(100vh - var(--appshell-offset, 0rem));
  `;
});
StyledResults.defaultProps = defaultThemeProp;
//# sourceMappingURL=SearchResults.styles.js.map