import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState } from 'react';
import { Button, Checkbox, CheckboxGroup, ExpandCollapse, Flex, Icon, registerIcon, RadioButton, RadioButtonGroup, Text, useI18n } from '@pega/cosmos-react-core';
import * as caretDownIcon from '@pega/cosmos-react-core/lib/components/Icon/icons/caret-down.icon';
import { StyledFilter, StyledFilterButton } from './SearchResults.styles';
registerIcon(caretDownIcon);
const Filter = ({ onFilterChange, onClearFilter, name, expanded = true, ...control }) => {
    const t = useI18n();
    const [filterExpanded, setFilterExpanded] = useState(expanded);
    let filterControl;
    let filterActive = false;
    // eslint-disable-next-line sonarjs/no-small-switch
    switch (control.type) {
        case 'select': {
            const { selectType, items } = control;
            let SelectFilterGroup = CheckboxGroup;
            let SelectFilter = Checkbox;
            if (selectType === 'single-select') {
                SelectFilterGroup = RadioButtonGroup;
                SelectFilter = RadioButton;
            }
            filterControl = (_jsx(SelectFilterGroup, { label: name, labelHidden: true, onChange: e => {
                    const item = items.find((x) => x.id === e.target.id);
                    if (!item)
                        return;
                    const newItem = { ...item, checked: !item.checked };
                    onFilterChange?.({
                        name,
                        type: control.type,
                        value: newItem
                    });
                }, children: control.items.map((filterOption) => {
                    if (filterOption.checked)
                        filterActive = true;
                    return (_jsx(SelectFilter, { id: filterOption.id, name: filterOption.name, label: filterOption.label, checked: filterOption.checked }, filterOption.id));
                }) }));
            break;
        }
        default:
            filterControl = null;
    }
    return (_jsxs(StyledFilter, { children: [_jsxs(Flex, { container: { justify: 'between' }, children: [_jsxs(Flex, { as: StyledFilterButton, container: { gap: 1, alignItems: 'center' }, variant: 'text', onClick: () => setFilterExpanded(curr => !curr), "aria-expanded": filterExpanded, "aria-label": t(filterExpanded ? 'collapse_noun' : 'expand_noun', [name]), children: [_jsx(Icon, { name: 'caret-down' }), _jsx(Text, { variant: 'h3', as: 'span', children: name })] }), filterActive && (_jsx(Button, { variant: 'link', onClick: () => onClearFilter?.(name), children: t('clear') }))] }), _jsx(ExpandCollapse, { collapsed: !filterExpanded, children: filterControl })] }));
};
export default Filter;
//# sourceMappingURL=Filter.js.map