import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import styled, { css } from 'styled-components';
import { defaultThemeProp, Text, MetaList, Link, Flex, StyledPopover, calculateFontSize, replaceMatchWithElement, Mark } from '@pega/cosmos-react-core';
const StyledSearchResult = styled.article(({ theme }) => {
    const fontSize = calculateFontSize(theme.base['font-size'], theme.base['font-scale']);
    return css `
    h2 ${StyledPopover} {
      font-size: ${fontSize.s};
      font-weight: ${theme.base['font-weight'].normal};
    }
    padding-block-end: calc(2 * ${theme.base.spacing});
    border-bottom: 0.0125rem solid ${theme.base.palette['border-line']};

    &:last-of-type {
      border-bottom: none;
    }
  `;
});
StyledSearchResult.defaultProps = defaultThemeProp;
const StyledDescription = styled(Text) `
  word-break: break-word;
`;
const SearchResult = ({ title, link, description, meta = [], accent }) => {
    return (_jsxs(Flex, { as: StyledSearchResult, container: { direction: 'column', gap: 1 }, children: [_jsxs(Flex, { container: { direction: 'column' }, children: [_jsx(Text, { variant: 'h2', children: _jsx(Link, { ...link, children: accent ? replaceMatchWithElement(title, accent, match => _jsx(Mark, { children: match })) : title }) }), !!meta.length && _jsx(MetaList, { items: meta })] }), description && _jsx(StyledDescription, { forwardedAs: 'p', children: description })] }));
};
export default SearchResult;
//# sourceMappingURL=SearchResult.js.map