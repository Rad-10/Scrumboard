import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef, useState, useCallback, useEffect, useContext } from 'react';
import styled, { css } from 'styled-components';
import { readableColor } from 'polished';
import { Drawer, Icon, registerIcon, Button, Flex, tryCatch, defaultThemeProp, useBreakpoint, useElement, useDirection, useI18n, AppShellContext } from '@pega/cosmos-react-core';
import * as timesIcon from '@pega/cosmos-react-core/lib/components/Icon/icons/times.icon';
import CaseView, { StyledCaseView, StyledCaseViewContent, StyledCaseDrawer, StyledSummaryRegion } from '../CaseView';
registerIcon(timesIcon);
const StyledPreviewHeader = styled.div(({ theme }) => {
    return css `
    z-index: ${theme.base['z-index'].drawer};
    background-color: ${theme.base.palette['primary-background']};
  `;
});
StyledPreviewHeader.defaultProps = defaultThemeProp;
const StyledPreviewActions = styled.div(({ theme: { base: { spacing, palette: { 'brand-primary': brandPrimary } } } }) => {
    const buttonColor = tryCatch(() => readableColor(brandPrimary));
    return css `
      background-color: ${brandPrimary};
      padding: ${spacing} calc(2 * ${spacing}) 0;

      button {
        color: ${buttonColor};
      }
    `;
});
StyledPreviewActions.defaultProps = defaultThemeProp;
const StyledPreviewDrawer = styled(StyledCaseDrawer)(({ theme }) => {
    return css `
    height: calc(100vh - var(--appshell-offset, 0rem));
    top: var(--appshell-offset, 0);
    z-index: calc(${theme.base['z-index'].drawer} + 500);

    ${StyledCaseView} {
      height: calc(100vh - ${theme.base.spacing} - ${theme.base['hit-area']['mouse-min']});

      @media (pointer: coarse) {
        height: calc(100vh - ${theme.base.spacing} - ${theme.base['hit-area']['finger-min']});
      }

      ${StyledSummaryRegion} {
        position: relative;
        top: 0;
      }
    }

    ${StyledCaseViewContent} {
      overflow-y: auto;
      margin-bottom: calc(${theme.base['hit-area']['mouse-min']} + ${theme.base.spacing});

      @media (pointer: coarse) {
        margin-bottom: calc(${theme.base['hit-area']['finger-min']} + ${theme.base.spacing});
      }

      & > :last-child {
        padding-bottom: calc(2 * ${theme.base.spacing});
      }
    }
  `;
});
StyledPreviewDrawer.defaultProps = defaultThemeProp;
const CasePreview = forwardRef((props, ref) => {
    const { open: openProp, caseId, heading, subheading, caseLink, parentCases, icon, followed, onFollowedChange, summary, tabs, stages, tasks, tabContent, utilities, utilitiesSummaryItems, actions, banners, onEdit, ...restProps } = props;
    const t = useI18n();
    const { previewTriggerRef } = useContext(AppShellContext);
    const [closeButtonEl, setCloseButtonEl] = useElement();
    const isSmallOrAbove = useBreakpoint('sm');
    const [open, setOpen] = useState(openProp);
    const direction = useDirection();
    const closePreview = useCallback(() => {
        setOpen(false);
        previewTriggerRef.current?.focus();
    }, []);
    useEffect(() => {
        setOpen(openProp);
    }, [openProp]);
    useEffect(() => {
        if (openProp && closeButtonEl) {
            closeButtonEl.focus();
        }
    }, [openProp, closeButtonEl]);
    return (_jsxs(Drawer, { ...restProps, as: StyledPreviewDrawer, role: 'complementary', forwardedAs: Flex, container: { direction: 'column' }, ref: ref, open: open && isSmallOrAbove, position: 'fixed', placement: direction.end, "aria-label": t('preview_of_noun', [heading]), shadow: true, nullWhenClosed: true, children: [_jsx(StyledPreviewActions, { children: _jsx(Button, { variant: 'simple', icon: true, onClick: closePreview, ref: setCloseButtonEl, label: t('close_preview'), children: _jsx(Icon, { name: 'times' }) }) }), _jsx(CaseView, { caseId: caseId, parentCases: parentCases, heading: heading, subheading: subheading, caseLink: caseLink, icon: icon, followed: followed, onFollowedChange: onFollowedChange, summary: summary, tabs: tabs, stages: stages, tasks: tasks, tabContent: tabContent, utilities: utilities, utilitiesSummaryItems: utilitiesSummaryItems, actions: actions, banners: banners, onEdit: onEdit, isPreview: true })] }));
});
export default CasePreview;
//# sourceMappingURL=CasePreview.js.map