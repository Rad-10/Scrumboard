import { getQuarter, parseToDate } from '@pega/cosmos-react-core/lib/components/DateTime/Input/utils';
export function sortByDateAscending(dates) {
    return [...dates].sort((a, b) => parseToDate(a.date).getTime() - parseToDate(b.date).getTime());
}
export function sortByDateDescending(dates) {
    return [...dates].sort((a, b) => parseToDate(b.date).getTime() - parseToDate(a.date).getTime());
}
export function sortByDate(activity, sortOrder) {
    return sortOrder === 'ascending' ? sortByDateAscending(activity) : sortByDateDescending(activity);
}
export function getDatePartAsDate(date) {
    const parsedDate = parseToDate(date);
    return new Date(parsedDate.getUTCFullYear(), parsedDate.getUTCMonth(), parsedDate.getUTCDate());
}
export function getMonthYearPartAsDate(date) {
    const parsedDate = parseToDate(date);
    return new Date(parsedDate.getUTCFullYear(), parsedDate.getUTCMonth());
}
export function getYearPartAsDate(date) {
    const parsedDate = parseToDate(date);
    return new Date(parsedDate.getUTCFullYear());
}
export function isSameDate(firstDate, secondDate) {
    return getDatePartAsDate(firstDate).getTime() === getDatePartAsDate(secondDate).getTime();
}
export function isSameMonthYear(firstDate, secondDate) {
    return (getMonthYearPartAsDate(firstDate).getTime() === getMonthYearPartAsDate(secondDate).getTime());
}
export function isSameYear(firstDate, secondDate) {
    return getYearPartAsDate(firstDate).getTime() === getYearPartAsDate(secondDate).getTime();
}
export function isSameQuarterYear(firstDate, secondDate) {
    return isSameYear(firstDate, secondDate) && getQuarter(firstDate) === getQuarter(secondDate);
}
export function isSameGroup(firstDate, secondDate, groupBy) {
    if (!firstDate || !secondDate)
        return false;
    switch (groupBy) {
        case 'none': {
            return true;
        }
        case 'date': {
            return isSameDate(firstDate, secondDate);
        }
        case 'monthyear': {
            return isSameMonthYear(firstDate, secondDate);
        }
        case 'quarteryear': {
            return isSameQuarterYear(firstDate, secondDate);
        }
        case 'year': {
            return isSameYear(firstDate, secondDate);
        }
        default:
            return false;
    }
}
export function isFutureDate(date, current) {
    if (!date || !current)
        return false;
    return parseToDate(date).getTime() > current.getTime();
}
//# sourceMappingURL=utils.js.map