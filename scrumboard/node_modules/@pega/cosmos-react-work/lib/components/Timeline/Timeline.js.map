{"version":3,"file":"Timeline.js","sourceRoot":"","sources":["../../../src/components/Timeline/Timeline.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n  forwardRef,\n  Fragment,\n  FunctionComponent,\n  PropsWithoutRef,\n  useEffect,\n  useState\n} from 'react';\n\nimport {\n  Progress,\n  ForwardProps,\n  useConsolidatedRef,\n  useItemIntersection\n} from '@pega/cosmos-react-core';\n\nimport { isSameGroup, sortByDate } from './utils';\nimport type TimelineProps from './Timeline.types';\nimport { StyledDate, StyledTimelineTable, StyledLoadingCell } from './Timeline.styles';\nimport TimelineItem from './TimelineItem';\n\nconst Timeline: FunctionComponent<TimelineProps & ForwardProps> = forwardRef(\n  (\n    {\n      activity,\n      currentTime,\n      sortOrder = 'descending',\n      groupBy = 'date',\n      loading,\n      loadMore,\n      ...restProps\n    }: PropsWithoutRef<TimelineProps>,\n    ref: TimelineProps['ref']\n  ) => {\n    const [sortedData, setSortedData] = useState(() => sortByDate(activity, sortOrder));\n\n    const tableRef = useConsolidatedRef(ref);\n    useItemIntersection(\n      tableRef,\n      activity.length - 1,\n      () => {\n        if (!loading) loadMore?.();\n      },\n      ':scope > tbody > tr'\n    );\n\n    useEffect(() => {\n      setSortedData(sortByDate(activity, sortOrder));\n    }, [activity, sortOrder]);\n\n    return (\n      <StyledTimelineTable ref={tableRef} {...restProps}>\n        <tbody>\n          {sortedData.map((item, index) => {\n            const isFirstItemInGroup = !isSameGroup(\n              sortedData[index - 1]?.date,\n              item.date,\n              groupBy\n            );\n            const isLastItemInGroup = !isSameGroup(sortedData[index + 1]?.date, item.date, groupBy);\n            return (\n              <Fragment key={item.id}>\n                {isFirstItemInGroup && groupBy !== 'none' && (\n                  <tr>\n                    <td colSpan={3}>\n                      <StyledDate variant={groupBy} format='long' value={item.date} />\n                    </td>\n                  </tr>\n                )}\n                <TimelineItem\n                  item={item}\n                  timeFormat={groupBy === 'date' ? 'time' : 'datetime'}\n                  prevItemDate={isFirstItemInGroup ? undefined : sortedData[index - 1].date}\n                  nextItemDate={isLastItemInGroup ? undefined : sortedData[index + 1].date}\n                  currentTime={currentTime}\n                />\n              </Fragment>\n            );\n          })}\n          {loading && (\n            <tr>\n              <StyledLoadingCell colSpan={3}>\n                <Progress placement='local' />\n              </StyledLoadingCell>\n            </tr>\n          )}\n        </tbody>\n      </StyledTimelineTable>\n    );\n  }\n);\n\nexport default Timeline;\n"]}