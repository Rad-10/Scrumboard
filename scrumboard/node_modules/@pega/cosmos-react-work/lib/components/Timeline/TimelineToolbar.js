import { jsx as _jsx } from "react/jsx-runtime";
import { forwardRef, useMemo } from 'react';
import { ListToolbar, useI18n } from '@pega/cosmos-react-core';
const TimelineToolbar = forwardRef(({ sort, group, ...restProps }, ref) => {
    const t = useI18n();
    const timelineSort = useMemo(() => {
        const selected = sort?.selected || 'descending';
        return {
            mode: 'single-select',
            items: [
                {
                    id: 'descending',
                    text: t('timeline_toolbar_sort_descending'),
                    icon: 'arrow-down',
                    selected: selected === 'descending'
                },
                {
                    id: 'ascending',
                    text: t('timeline_toolbar_sort_ascending'),
                    icon: 'arrow-up',
                    selected: selected === 'ascending'
                }
            ],
            onItemClick: (id, e) => {
                sort?.onItemClick(id, e);
            }
        };
    }, [sort?.selected, sort?.onItemClick]);
    const timelineGroup = useMemo(() => {
        const selected = group?.selected || 'date';
        return {
            mode: 'single-select',
            items: [
                {
                    id: 'date',
                    text: t('timeline_toolbar_group_date'),
                    selected: selected === 'date'
                },
                {
                    id: 'monthyear',
                    text: t('timeline_toolbar_group_monthyear'),
                    selected: selected === 'monthyear'
                },
                {
                    id: 'quarteryear',
                    text: t('timeline_toolbar_group_quarteryear'),
                    selected: selected === 'quarteryear'
                },
                {
                    id: 'year',
                    text: t('timeline_toolbar_group_year'),
                    selected: selected === 'year'
                },
                {
                    id: 'none',
                    text: t('timeline_toolbar_group_none'),
                    selected: selected === 'none'
                }
            ],
            onItemClick: (id, e) => {
                group?.onItemClick(id, e);
            }
        };
    }, [group?.selected, group?.onItemClick]);
    return (_jsx(ListToolbar, { ...restProps, sort: sort ? timelineSort : undefined, group: group ? timelineGroup : undefined, ref: ref }));
});
export default TimelineToolbar;
//# sourceMappingURL=TimelineToolbar.js.map