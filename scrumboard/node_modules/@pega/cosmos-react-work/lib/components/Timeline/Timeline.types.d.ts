import { MouseEvent, ReactNode, Ref } from 'react';
import { BaseProps, FieldValueListProps, IconProps, ListToolbarProps, NoChildrenProp, OmitStrict, StatusProps } from '@pega/cosmos-react-core';
import { DateTimeVariant } from '@pega/cosmos-react-core/lib/components/DateTime/DateTime.types';
import { AcceptedMouseEventElement } from '@pega/cosmos-react-core/lib/components/Menu/Menu.types';
export interface ActivityObject {
    /** Unique id for activity */
    id: string;
    /** Date as ISO8601 string, timestamp or native Date object. */
    date: string | number | Date;
    /** Header region for rendering text and links. */
    title: ReactNode;
    /** Name of the icon (to be selected from default Pega icon set) */
    icon?: IconProps['name'];
    /** Represents the current status of activity */
    status?: StatusProps;
    /** The set of field values to render in the list. */
    content?: FieldValueListProps['fields'] | ReactNode;
}
export declare type TimelineSortOrder = 'ascending' | 'descending';
export declare type TimelineGroupBy = Extract<DateTimeVariant, 'date' | 'monthyear' | 'quarteryear' | 'year'> | 'none';
export default interface TimelineProps extends BaseProps, NoChildrenProp {
    /** List of activity */
    activity: ActivityObject[];
    /** Current time as Date */
    currentTime: Date;
    /**
     * List of activity sorted in ascending or descending order.
     * @default "descending"
     */
    sortOrder?: TimelineSortOrder;
    /**
     * List of activity grouped by day, month, quarter or year.
     * @default "date"
     */
    groupBy?: TimelineGroupBy;
    /**
     * Show a Progress indicator at the end of a list where newly loaded items will be appended.
     * @default false
     */
    loading?: boolean;
    /** Callback to fetch more activity items */
    loadMore?: () => void;
    /** Ref for the wrapping element. */
    ref?: Ref<HTMLTableElement>;
}
export interface TimelineToolbarProps extends OmitStrict<ListToolbarProps, 'sort' | 'group'> {
    sort?: {
        /** An item click handler for all item clicks. */
        onItemClick: (id: TimelineSortOrder, e: MouseEvent<AcceptedMouseEventElement>) => void;
        /**
         * Currently selected sort order.
         * @default "descending"
         */
        selected: TimelineProps['sortOrder'];
    };
    group?: {
        /** An item click handler for all item clicks. */
        onItemClick: (id: TimelineGroupBy, e: MouseEvent<AcceptedMouseEventElement>) => void;
        /**
         * Currently selected sort order.
         * @default "date"
         */
        selected: TimelineProps['groupBy'];
    };
}
//# sourceMappingURL=Timeline.types.d.ts.map