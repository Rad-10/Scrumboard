import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef, useEffect, useLayoutEffect, useRef, useState } from 'react';
import { Icon, registerIcon, useI18n, Count, useBreakpoint, usePrevious, useAfterInitialEffect } from '@pega/cosmos-react-core';
import * as polarisSolidIcon from '@pega/cosmos-react-core/lib/components/Icon/icons/polaris-solid.icon';
import { StyledIntelligentGuidanceList, StyledIntelligentGuidance, StyledIntelligentGuidanceButton } from './IntelligentGuidance.styles';
registerIcon(polarisSolidIcon);
const IntelligentGuidance = forwardRef(({ items, heading, ...restProps }, ref) => {
    const t = useI18n();
    const isMediumOrAbove = useBreakpoint('md');
    const [isCollapsed, setIsCollapsed] = useState(true);
    const previousItems = usePrevious(items);
    const summaryListRef = useRef(null);
    const toggleButtonRef = useRef(null);
    useEffect(() => {
        const previousItemsCount = previousItems?.length || 0;
        if (previousItemsCount < items.length) {
            setIsCollapsed(false);
        }
        else if (previousItemsCount && !items.length) {
            setIsCollapsed(true);
        }
    }, [previousItems, items]);
    const listItems = items.map(item => {
        return {
            id: item.id,
            visual: _jsx(Icon, { name: item.icon }),
            primary: item.label,
            secondary: item.type,
            actions: item.onDismiss
                ? [
                    {
                        text: t('dismiss_label_a11y', [item.label]),
                        id: item.id,
                        icon: 'times',
                        onClick: (id, e) => {
                            e.stopPropagation();
                            item.onDismiss?.(id, e);
                        }
                    }
                ]
                : undefined,
            container: { colGap: 1 },
            role: 'button',
            tabIndex: 0,
            'aria-label': t('continue_label_a11y', [item.label]),
            onClick: item.onClick,
            onKeyDown: (e) => {
                if (e.key === 'Enter') {
                    item.onClick(e);
                }
            }
        };
    });
    const [headerHeight, setHeaderHeight] = useState(0);
    useLayoutEffect(() => {
        if (summaryListRef.current) {
            setHeaderHeight(summaryListRef.current.querySelector('header')?.offsetHeight || 0);
        }
    }, [summaryListRef.current]);
    // FIXME: This is a hack to get the Tooltip to reset its position when the list is toggled.
    useAfterInitialEffect(() => {
        if (toggleButtonRef.current && toggleButtonRef.current === document.activeElement) {
            toggleButtonRef.current.blur();
            setTimeout(() => {
                toggleButtonRef.current?.focus();
            }, 1000);
        }
    }, [isCollapsed]);
    return (_jsx(StyledIntelligentGuidance, { ...restProps, ref: ref, role: 'region', "aria-live": 'polite', "aria-relevant": 'all', isCollapsed: isCollapsed, hasItems: !!items.length, children: isMediumOrAbove || !isCollapsed ? (_jsx(StyledIntelligentGuidanceList, { ref: summaryListRef, icon: 'polaris-solid', name: heading, count: items.length, items: listItems, actions: [
                {
                    text: t(isCollapsed ? 'expand' : 'collapse'),
                    id: 'IntelligentGuidanceButton',
                    icon: 'caret-down',
                    'aria-label': isCollapsed
                        ? t('expand_noun', [heading])
                        : t('collapse_noun', [heading]),
                    onClick() {
                        setIsCollapsed(prevState => !prevState);
                    },
                    ref: toggleButtonRef
                }
            ], EmptyStateText: t('no_recommendations'), style: { '--headerHeight': `${headerHeight}px` } })) : (_jsxs(StyledIntelligentGuidanceButton, { variant: 'simple', "aria-label": isCollapsed ? t('expand_noun', [heading]) : t('collapse_noun', [heading]), icon: true, onClick: () => {
                setIsCollapsed(false);
            }, children: [_jsx(Icon, { name: 'polaris-solid' }), _jsx(Count, { children: items.length })] })) }));
});
export default IntelligentGuidance;
//# sourceMappingURL=IntelligentGuidance.js.map