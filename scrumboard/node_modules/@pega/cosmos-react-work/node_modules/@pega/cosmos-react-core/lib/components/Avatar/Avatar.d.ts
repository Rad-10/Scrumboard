import { FunctionComponent, Ref, SyntheticEvent } from 'react';
import { BaseProps, ForwardProps, PropsWithDefaults, NoChildrenProp, OmitStrict } from '../../types';
export interface AvatarProps extends BaseProps, NoChildrenProp {
    /** The name of the identity the Avatar represents. */
    name: string;
    /** Content of the Avatar as an image source url. */
    imageSrc?: string;
    /** An icon to render as the content of the avatar. imageSrc will take precedence if passed. */
    icon?: string;
    /** Optional color for the icon to be rendered */
    color?: string;
    /** Optional background color for the avatar. Will be auto computed if not passed */
    backgroundColor?: string;
    /**
     * Shape of the Avatar.
     * @default "circle"
     */
    shape?: 'circle' | 'squircle';
    /**
     * Avatar size.
     * @default "m"
     */
    size?: 's' | 'm' | 'l' | 'xl';
    /** If defined, will render status icon on the avatar. */
    status?: 'active';
    /** Optional error handler in the event an image fails to load. */
    onImageError?: (err: SyntheticEvent<HTMLImageElement>) => void;
    /** Ref for the wrapping element. */
    ref?: Ref<HTMLDivElement | HTMLImageElement>;
}
declare type AvatarPropsWithDefaults = PropsWithDefaults<AvatarProps, 'shape' | 'size'>;
export declare const StyledAvatarImage: import("styled-components").StyledComponent<FunctionComponent<import("../Image").ImageProps & ForwardProps>, import("styled-components").DefaultTheme, {}, never>;
export declare const StyledAvatar: import("styled-components").StyledComponent<"div", import("styled-components").DefaultTheme, OmitStrict<AvatarPropsWithDefaults, "children" | "name"> & {
    hasSrc?: boolean | undefined;
    hasBrokenImage?: boolean | undefined;
}, never>;
export declare const StyledStatus: import("styled-components").StyledComponent<"div", import("styled-components").DefaultTheme, Pick<AvatarPropsWithDefaults, "size">, never>;
/**
 * Generally, avatars are used to distinguish between different operators and
 * objects when they are shown in a list or in a small space. Users of applications
 * can upload a custom avatar of their choice.
 */
declare const Avatar: FunctionComponent<AvatarProps & ForwardProps>;
export default Avatar;
//# sourceMappingURL=Avatar.d.ts.map