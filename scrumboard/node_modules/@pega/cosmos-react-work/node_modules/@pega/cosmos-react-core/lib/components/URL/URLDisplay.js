import { jsx as _jsx } from "react/jsx-runtime";
import { forwardRef } from 'react';
import Link from '../Link';
/**
 * Function gets the url as a string and converts it to a HTML markup with whitespace opportunity elements.
 * It helps breaking a long url correctly to avoid parent container overflow issues
 * according to "The Chicago Manual of Style" copywriting standard.
 * @param url input url to construct markup for
 * @returns array of nodes
 */
const generateUrlMarkup = (url) => {
    const markedUrl = url
        .split('//')
        /* Insert \x1f (unit separator) char as a placeholder at correct position. */
        .map(str => {
        return str
            .replace(/:/giu, '$&\x1f')
            .replace(/[/~.,\\-_?#%]/giu, '\x1f$&')
            .replace(/[=&]/giu, '\x1f$&\x1f');
    })
        .join('//\x1f');
    /* Replace unit separator character with <wbr /> element. Create an array of nodes in place of string to pass tags escaping. */
    return markedUrl.split('\x1f').reduce((urlFragments, part) => {
        urlFragments.push(part, _jsx("wbr", {}, urlFragments.length));
        return urlFragments;
    }, []);
};
const URLDisplay = forwardRef(({ value, displayText, variant = 'link', ...restProps }, ref) => {
    const displayValue = value ? (displayText || generateUrlMarkup(value)) : (_jsx("span", { "aria-hidden": 'true', children: "\u2013\u2013" }));
    return variant === 'text' || !value ? (_jsx("span", { ref: ref, ...restProps, children: displayValue })) : (_jsx(Link, { ref: ref, ...restProps, href: value, children: displayValue }));
});
export default URLDisplay;
//# sourceMappingURL=URLDisplay.js.map