import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef, useCallback, useState } from 'react';
import styled, { css } from 'styled-components';
import { defaultThemeProp } from '../../theme';
import Button, { StyledButton } from '../Button';
import Grid from '../Grid';
import { useI18n } from '../../hooks';
import { getKindFromMimeType, getMimeTypeFromFile } from './utils';
import FileVisual, { StyledFileVisual } from './FileVisual';
const StyledFileItem = styled.div(({ theme: { base, components } }) => {
    return css `
    border-radius: calc(0.5 * ${base['border-radius']});

    > ${StyledFileVisual} {
      border-start-start-radius: inherit;
      border-end-start-radius: inherit;
      border-start-end-radius: 0;
      border-end-end-radius: 0;
      height: ${components.input.height};
      width: ${components.input.height};
    }

    > ${StyledFileVisual} + ${StyledButton} {
      margin-inline-start: 0;
      border: 0.0625rem solid ${base.palette['border-line']};
      background-color: ${base.palette['primary-background']};
      opacity: 1;
      padding: 0 ${base.spacing};
      border-inline-start: 0;
      border-start-start-radius: 0;
      border-end-start-radius: 0;
      border-start-end-radius: inherit;
      border-end-end-radius: inherit;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
  `;
});
StyledFileItem.defaultProps = defaultThemeProp;
const FileItem = forwardRef((props, ref) => {
    const { name, url, thumbnail, onPreview, onDownload, ...restProps } = props;
    const [thumbnailError, setThumbnailError] = useState(false);
    const t = useI18n();
    const onDownloadClick = useCallback(() => {
        onDownload?.(url);
    }, [url, onDownload]);
    const type = getMimeTypeFromFile(url);
    const text = name || url;
    return (_jsxs(Grid, { as: StyledFileItem, container: { cols: 'auto 1fr' }, ref: ref, children: [_jsx(FileVisual, { type: getKindFromMimeType(type ?? ''), thumbnail: thumbnailError ? undefined : thumbnail, onThumbnailError: () => {
                    setThumbnailError(true);
                }, disabled: !onPreview, onClick: () => onPreview?.(url), "aria-label": `${t('preview')}: ${text}` }), _jsx(Button, { ...restProps, variant: 'text', disabled: !onDownload, onClick: onDownloadClick, "aria-label": `${t('download')}: ${text}`, children: text })] }));
});
export default FileItem;
//# sourceMappingURL=FileItem.js.map