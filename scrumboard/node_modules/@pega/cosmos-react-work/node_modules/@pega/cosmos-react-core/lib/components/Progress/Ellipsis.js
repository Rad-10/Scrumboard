import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef } from 'react';
import styled, { css } from 'styled-components';
import { defaultThemeProp } from '../../theme';
export const StyledProgressEllipsis = styled.div(({ theme, placement }) => {
    return css `
      line-height: 1;
      display: ${placement === 'inline' ? 'inline-flex' : 'block'};

      @keyframes LoadingEllipsis {
        0% {
          transform: scale(0);
          opacity: 0;
        }

        50% {
          transform: scale(1);
          opacity: 1;
        }

        100% {
          transform: scale(0);
          opacity: 0;
        }
      }

      > span {
        display: flex;
        mix-blend-mode: multiply;

        ${placement === 'inline' &&
        css `
          display: inline-flex;
          margin-left: 0.1875rem;
        `}
      }

      > span span {
        margin: 0 0.3125rem;
        background: ${theme.components.progress['progress-color']};
        border-radius: 50%;
        animation: LoadingEllipsis calc(4 * ${theme.base.animation.speed}) infinite;

        ${placement === 'global' &&
        css `
          width: 1.25rem;
          height: 1.25rem;
        `}

        ${placement === 'local' &&
        css `
          width: 0.625rem;
          height: 0.625rem;
        `}

      ${placement === 'inline' &&
        css `
          width: 0.1875rem;
          height: 0.1875rem;
          margin: 0 0.1875rem;
          animation-duration: calc(4 * ${theme.base.animation.speed});
        `}

      &:nth-child(2) {
          animation-delay: 0.1667s;
        }

        &:nth-child(3) {
          animation-delay: ${0.1667 * 2}s;
        }
      }
    `;
});
StyledProgressEllipsis.defaultProps = defaultThemeProp;
const Ellipsis = forwardRef(({ message, placement, ...restProps }, ref) => {
    return (_jsx(StyledProgressEllipsis, { ref: ref, role: 'progressbar', placement: placement, ...restProps, children: _jsxs("span", { children: [_jsx("span", {}), _jsx("span", {}), _jsx("span", {})] }) }));
});
export default Ellipsis;
//# sourceMappingURL=Ellipsis.js.map