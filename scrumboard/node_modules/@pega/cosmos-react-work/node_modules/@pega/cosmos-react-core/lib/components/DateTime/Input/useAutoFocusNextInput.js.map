{"version":3,"file":"useAutoFocusNextInput.js","sourceRoot":"","sources":["../../../../src/components/DateTime/Input/useAutoFocusNextInput.ts"],"names":[],"mappings":"AAAA,OAAO,EAAa,WAAW,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AAE1D;;;;GAIG;AACH,MAAM,qBAAqB,GAAG,CAAC,IAAmC,EAAE,EAAE;IACpE,MAAM,YAAY,GAAG,WAAW,CAAC,CAAC,WAAwC,EAAE,EAAE;QAC5E,OAAO,CAAC,EAAS,EAAE,EAAE;YACnB,MAAM,aAAa,GAAG,EAAE,CAAC,MAA0B,CAAC;YACpD,IACG,EAAiB,CAAC,SAAS,KAAK,YAAY;gBAC7C,aAAa,CAAC,KAAK,CAAC,MAAM,KAAK,aAAa,CAAC,SAAS,EACtD;gBACA,WAAW,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;gBAC9B,WAAW,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC;aAChC;QACH,CAAC,CAAC;IACJ,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,SAAS,CAAC,GAAG,EAAE;QACb,2EAA2E;QAC3E,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC;QACnD,MAAM,SAAS,GAA4B,EAAE,CAAC;QAE9C,GAAG,CAAC,OAAO,CAAC,CAAC,EAAoB,EAAE,KAAa,EAAE,EAAE;YAClD,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9C,EAAE,CAAC,gBAAgB,CAAC,OAAO,EAAE,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;QAEH,OAAO,GAAG,EAAE;YACV,GAAG,CAAC,OAAO,CAAC,CAAC,EAAoB,EAAE,KAAa,EAAE,EAAE;gBAClD,EAAE,CAAC,mBAAmB,CAAC,OAAO,EAAE,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;YACpD,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;IACJ,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;AACb,CAAC,CAAC;AAEF,eAAe,qBAAqB,CAAC","sourcesContent":["import { RefObject, useCallback, useEffect } from 'react';\n\n/**\n * Automatically moves focus to next referenced input when current one's number of chars is equal to max-length.\n * @example useAutoFocusNextInput([ref1, ref2, ref3]);\n * @param refs - array of references to relevant input elements\n */\nconst useAutoFocusNextInput = (refs: RefObject<HTMLInputElement>[]) => {\n  const wrapListener = useCallback((nextElement: RefObject<HTMLInputElement>) => {\n    return (ev: Event) => {\n      const targetElement = ev.target as HTMLInputElement;\n      if (\n        (ev as InputEvent).inputType === 'insertText' &&\n        targetElement.value.length === targetElement.maxLength\n      ) {\n        nextElement?.current?.focus();\n        nextElement?.current?.select();\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    // Save current state of ref array to ensure it is the same during cleanup.\n    const els = refs.flatMap(ref => ref.current ?? []);\n    const callbacks: ((ev: Event) => void)[] = [];\n\n    els.forEach((el: HTMLInputElement, index: number) => {\n      callbacks.push(wrapListener(refs[index + 1]));\n      el.addEventListener('input', callbacks[index]);\n    });\n\n    return () => {\n      els.forEach((el: HTMLInputElement, index: number) => {\n        el.removeEventListener('input', callbacks[index]);\n      });\n    };\n  }, [refs]);\n};\n\nexport default useAutoFocusNextInput;\n"]}