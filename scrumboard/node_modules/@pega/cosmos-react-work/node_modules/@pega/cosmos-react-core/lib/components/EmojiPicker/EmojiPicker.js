import { jsx as _jsx } from "react/jsx-runtime";
import { useState, useEffect, useContext, createContext, forwardRef } from 'react';
import { NimblePicker } from 'emoji-mart';
import { useTheme } from '../../hooks';
import StyledEmojiPicker from './EmojiPicker.styles';
const emojiDataCache = new Map();
export const EmojiContext = createContext({});
const EmojiPicker = forwardRef(({ emojiSize = 24, perLine = 9, showFooter = true, exclude, onSelect, ...restProps }, ref) => {
    const theme = useTheme();
    const { set, spriteSrcResolver, overrideData } = useContext(EmojiContext);
    const [data, setData] = useState(null);
    useEffect(() => {
        const dataSet = set ?? 'all';
        // Unmount NimblePicker for changes to take effect
        setData(null);
        if (overrideData) {
            setTimeout(() => {
                setData(overrideData);
            }, 0);
        }
        else if (emojiDataCache.has(dataSet)) {
            setTimeout(() => {
                setData(emojiDataCache.get(dataSet) ?? null);
            }, 0);
        }
        else {
            import(`emoji-mart/data/${dataSet}.json`)
                .then(({ default: json }) => {
                emojiDataCache.set(dataSet, json);
                setData(emojiDataCache.get(dataSet));
            })
                .catch(() => {
                setData(null);
            });
        }
    }, [set, overrideData]);
    return (data && (_jsx(StyledEmojiPicker, { ref: ref, showFooter: showFooter, style: { '--emoji-size': `${emojiSize}px` }, children: _jsx(NimblePicker, { ...restProps, set: set, native: !spriteSrcResolver, backgroundImageFn: spriteSrcResolver, data: data, emojiSize: emojiSize, perLine: perLine, exclude: exclude, onSelect: onSelect, color: theme.base.palette.interactive, emoji: '', title: '', emojiTooltip: true, showSkinTones: showFooter, showPreview: false }) })));
});
export default EmojiPicker;
//# sourceMappingURL=EmojiPicker.js.map