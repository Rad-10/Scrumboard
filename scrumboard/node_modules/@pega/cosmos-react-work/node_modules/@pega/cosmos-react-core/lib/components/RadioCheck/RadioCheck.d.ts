import { FC, Ref, MouseEventHandler, KeyboardEventHandler } from 'react';
import { FormControlProps } from '../FormControl';
import { BaseProps, ForwardProps, NoChildrenProp } from '../../types';
export interface RadioCheckProps extends BaseProps, NoChildrenProp {
    /**
     * Sets DOM id for the control and associates label element via 'for' attribute.
     * If an id is not pass, a random id will be generated for any render.
     */
    id?: FormControlProps['id'];
    /** Pass a string or a fragment with an Icon and string. */
    label?: FormControlProps['label'];
    /** Indicate if the field is required. The browser defaults to false. */
    required?: FormControlProps['required'];
    /** Disable the control. The browser defaults to false. */
    disabled?: FormControlProps['disabled'];
    /** Makes the input non editable and non clickable. The browser defaults to false. */
    readOnly?: FormControlProps['readOnly'];
    /** Set visual state based on a validation state. */
    status?: FormControlProps['status'];
    /** Sets html name attribute for the underlying control. Useful for mapping to a data field. */
    name?: FormControlProps['name'];
    /** Sets the type of input. */
    type: 'radio' | 'checkbox';
    /** Sets checked prop via onChange when using as controlled component. */
    checked?: boolean;
    /** Initialize checked prop when using as uncontrolled component. */
    defaultChecked?: boolean;
    /**
     * Sets control to an an indeterminate state.
     * @default false
     */
    indeterminate?: boolean;
    /**
     * Controls the styling of the RadioCheck.
     * @default 'simple'
     */
    variant?: 'simple' | 'card';
    /** Callback function for onClick events. */
    onClick?: MouseEventHandler<HTMLInputElement>;
    /** Callback function for onKeyDown events. */
    onKeyDown?: KeyboardEventHandler<HTMLInputElement>;
    /** Pass a heading and content to show additional information on the field. */
    additionalInfo?: FormControlProps['additionalInfo'];
    /** Ref forwarded to the underlying input. */
    ref?: Ref<HTMLInputElement>;
}
export declare const StyledPseudoRadioCheck: import("styled-components").StyledComponent<"div", import("styled-components").DefaultTheme, Pick<RadioCheckProps, "status" | "readOnly">, never>;
export declare const StyledRadioCheckInput: import("styled-components").StyledComponent<"input", import("styled-components").DefaultTheme, {}, never>;
export declare const StyledRadioCheck: import("styled-components").StyledComponent<"div", import("styled-components").DefaultTheme, Pick<RadioCheckProps, "disabled" | "readOnly">, never>;
export declare const StyledRadioCheckCard: import("styled-components").StyledComponent<"label", import("styled-components").DefaultTheme, Pick<RadioCheckProps, "disabled" | "status" | "readOnly">, never>;
declare const RadioCheck: FC<RadioCheckProps & ForwardProps>;
export default RadioCheck;
//# sourceMappingURL=RadioCheck.d.ts.map