import { ReactNode, FunctionComponent, Ref } from 'react';
import { ButtonProps } from '../Button';
import { BaseProps, ForwardProps } from '../../types';
export interface LinkProps extends BaseProps {
    /** Text or content for the Link. */
    children: ReactNode;
    /** URL or DOM id to navigate to. */
    href: string;
    /**
     * Controls the styling of the Link.
     * @default "link"
     */
    variant?: ButtonProps['variant'];
    /**
     * Set the Icon prop to `true` if you're using just an Icon in your Link. Make sure to pass an Icon as children if `true`.
     * @default false
     */
    icon?: ButtonProps['icon'];
    /** Determines if the Link should render a popover when focused or hovered over. */
    previewable?: boolean;
    /** Callback function that is run when the preview popover is interacted with. */
    onPreview?: (e: {
        href: string;
    }) => void;
    /** Specifies where to open the link href. */
    target?: string;
    /** Ref for the wrapping element. */
    ref?: Ref<HTMLAnchorElement>;
}
export declare const StyledLinkPopover: import("styled-components").StyledComponent<"div", import("styled-components").DefaultTheme, {
    preview: boolean;
}, never>;
export declare const StyledLinkPopoverBtn: import("styled-components").StyledComponent<FunctionComponent<import("../Button/BareButton").BareButtonProps & ForwardProps>, import("styled-components").DefaultTheme, {}, never>;
export declare const StyledLinkPreviewPopoverBtn: import("styled-components").StyledComponent<FunctionComponent<import("../Button/BareButton").BareButtonProps & ForwardProps>, import("styled-components").DefaultTheme, {}, never>;
export declare const StyledLink: import("styled-components").StyledComponent<FunctionComponent<ButtonProps & ForwardProps>, import("styled-components").DefaultTheme, {}, never>;
declare const Link: FunctionComponent<LinkProps & ForwardProps>;
export default Link;
//# sourceMappingURL=Link.d.ts.map