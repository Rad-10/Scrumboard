import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef, useState, useLayoutEffect, useMemo, useRef } from 'react';
import styled from 'styled-components';
import { useI18n } from '../../hooks';
import Button from '../Button';
import Text from '../Text';
import ExpandCollapse from '../ExpandCollapse';
import { windowIsAvailable } from '../../utils';
import Flex from '../Flex';
export const StyledCommaSeparatedList = styled.div ``;
export const StyledCommaSeparatedListItem = styled.li `
  display: inline;

  &:not(:last-child)::after {
    content: ', ';
  }
`;
const DynamicHeightValue = ({ children }) => {
    const [collapsed, setCollapsed] = useState(true);
    const [exceedsMaxHeight, setExceedsMaxHeight] = useState(false);
    const textRef = useRef(null);
    const t = useI18n();
    const maxTextHeight = useMemo(() => {
        if (!windowIsAvailable)
            return Infinity;
        const computedLineHeight = Number.parseInt(window.getComputedStyle(document.documentElement).getPropertyValue('font-size'), 10) * 1.25;
        return 3 * computedLineHeight;
    }, []);
    useLayoutEffect(() => {
        if (!textRef.current)
            return;
        const observer = new ResizeObserver(entries => {
            const exceedsHeight = entries.some(({ target, contentRect }) => {
                if (target !== textRef.current)
                    return;
                return contentRect.height > maxTextHeight;
            });
            setExceedsMaxHeight(exceedsHeight);
        });
        observer.observe(textRef.current);
        return () => {
            observer.disconnect();
        };
    }, [textRef.current, maxTextHeight]);
    return (_jsxs(Flex, { container: { direction: 'column', alignItems: 'start', gap: 0.25 }, children: [_jsx(ExpandCollapse, { collapsed: collapsed, min: exceedsMaxHeight ? `${maxTextHeight}px` : 'max-content', children: _jsx("div", { ref: textRef, children: children }) }), exceedsMaxHeight && (_jsx(Button, { variant: 'link', onClick: () => setCollapsed(current => !current), children: collapsed ? t('show_more') : t('show_less') }))] }));
};
const CommaSeparatedList = forwardRef(({ items, heading }, ref) => {
    return (_jsxs(Flex, { container: { direction: 'column', wrap: 'wrap', gap: 2 }, as: StyledCommaSeparatedList, ref: ref, children: [heading && _jsx(Text, { variant: 'h3', children: heading }), _jsx(DynamicHeightValue, { children: _jsx("ul", { children: items.map((value, i) => (
                    // eslint-disable-next-line react/no-array-index-key
                    _jsx(StyledCommaSeparatedListItem, { children: value }, i))) }) })] }));
});
export default CommaSeparatedList;
//# sourceMappingURL=CommaSeparatedList.js.map