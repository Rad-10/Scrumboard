import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef, useCallback, useMemo, useRef } from 'react';
import Button from '../Button';
import Icon, { registerIcon } from '../Icon';
import * as plusIcon from '../Icon/icons/plus.icon';
import * as minusIcon from '../Icon/icons/minus.icon';
import Flex from '../Flex';
import FormField from '../FormField';
import { useConfiguration, useConsolidatedRef, useI18n, useInputFormatter, useUID } from '../../hooks';
import StyledInput from '../Input/Input.styles';
import StyledNumberInput, { StyledStepperInput } from './NumberInput.styles';
import { NUMBER_MAX_DECIMAL_PLACES } from './NumberInput.types';
import { getCleanedValue, getDecimalSign, getDecrementedValue, getFormattedValue, getIncrementedValue } from './utils';
registerIcon(minusIcon, plusIcon);
const NumberInput = forwardRef((props, ref) => {
    const uid = useUID();
    const { id = uid, status, label, labelHidden, info, required, disabled, readOnly, additionalInfo, value = '', onChange, onFocus, onBlur, onResolveSuggestion, unit, showDecimal = true, numberOfDecimals: numberOfDecimalsProp = NUMBER_MAX_DECIMAL_PLACES, showGroupSeparators = true, min = Number.MIN_SAFE_INTEGER, max = Number.MAX_SAFE_INTEGER, step = 1, variant, 'aria-label': ariaLabel, autoFocus, ...restProps } = props;
    const { locale } = useConfiguration();
    const inputRef = useConsolidatedRef(ref);
    const containerRef = useRef(null);
    const maximumFractionDigits = showDecimal ? numberOfDecimalsProp : 0;
    const decimalSign = useMemo(() => getDecimalSign(locale), [locale]);
    const formatValue = useCallback(number => {
        return getFormattedValue(number, locale, unit, {
            useGrouping: showGroupSeparators,
            maximumFractionDigits
        });
    }, [locale, unit, showGroupSeparators, maximumFractionDigits]);
    const onInputChange = (e) => {
        const inputValue = e.target.value;
        const cleanedInputValue = getCleanedValue(inputValue, decimalSign, maximumFractionDigits);
        if (cleanedInputValue === value)
            return;
        onChange(cleanedInputValue);
    };
    const onKeyDown = (e) => {
        if (readOnly)
            return;
        const input = e.currentTarget;
        switch (e.key) {
            case 'ArrowUp':
                e.preventDefault();
                onChange(getIncrementedValue(value, min, max, step));
                break;
            case 'ArrowDown':
                e.preventDefault();
                onChange(getDecrementedValue(value, min, max, step));
                break;
            case decimalSign:
                if (input.value.includes(decimalSign)) {
                    if (input.selectionStart && input.value.charAt(input.selectionStart) === decimalSign) {
                        input.setSelectionRange(input.selectionStart + 1, input.selectionStart + 1);
                    }
                    e.preventDefault();
                }
                else if (input.selectionStart !== null &&
                    !input.value.charAt(input.selectionStart - 1).match(/\d/)) {
                    onChange(getCleanedValue(`${input.value}0${decimalSign}`, decimalSign, maximumFractionDigits));
                    e.preventDefault();
                }
                break;
            case '-':
                if (value.startsWith('-'))
                    e.preventDefault();
                break;
            default:
        }
    };
    const onInputFocusEvent = (e) => {
        let parsableValue = value;
        if (Number.isNaN(parseFloat(value))) {
            parsableValue = '';
        }
        else if (value?.endsWith('.')) {
            parsableValue = value.slice(0, -1);
        }
        if (e.type === 'focus')
            onFocus?.(parsableValue);
        else {
            if (parsableValue !== value) {
                onChange(parsableValue);
            }
            onBlur?.(parsableValue);
        }
    };
    const formattedValue = useInputFormatter(inputRef, value, formatValue, `\\p{N}${decimalSign}-`);
    const t = useI18n();
    const NumberInputComp = (_jsx(Flex, { as: StyledNumberInput, hasSuggestion: status === 'pending' && !!onResolveSuggestion, container: { alignItems: 'center', wrap: 'nowrap' }, status: status, readOnly: readOnly, disabled: disabled, children: _jsx(StyledInput, { ...{ onChange: onInputChange, id, readOnly, required, disabled, status, ...restProps }, inputMode: 'numeric', ref: inputRef, value: formattedValue, onKeyDown: onKeyDown, onFocus: onInputFocusEvent, onBlur: onInputFocusEvent, "aria-label": `${ariaLabel || label}. ${unit ? t('measured_in', [unit]) : ''}`, maxLength: 16, autoFocus: autoFocus, "aria-describedby": info ? `${id}-info` : undefined }) }));
    const onMinusClick = () => {
        onChange?.(getDecrementedValue(value, min, max, step));
    };
    const onPlusClick = () => {
        onChange?.(getIncrementedValue(value, min, max, step));
    };
    const StepperComp = (_jsxs(Flex, { as: StyledStepperInput, hasSuggestion: status === 'pending' && !!onResolveSuggestion, container: { alignItems: 'center', wrap: 'nowrap' }, status: status, readOnly: readOnly, disabled: disabled, size: formattedValue?.length, children: [_jsx(Button, { variant: 'simple', icon: true, onClick: onMinusClick, readOnly: readOnly, disabled: disabled, tabIndex: -1, "aria-hidden": 'true', children: _jsx(Icon, { name: 'minus' }) }), _jsx(Flex, { container: { alignItems: 'center', wrap: 'nowrap', justify: 'center' }, item: { grow: 1 }, ref: containerRef, onClick: (e) => {
                    if (e.target === containerRef.current)
                        inputRef?.current?.focus();
                }, children: _jsx(StyledInput, { ...{ onChange: onInputChange, id, readOnly, required, disabled, status, ...restProps }, inputMode: 'numeric', ref: inputRef, value: formattedValue, onKeyDown: onKeyDown, onFocus: onInputFocusEvent, onBlur: onInputFocusEvent, "aria-label": `${ariaLabel || label}. ${unit ? t('measured_in', [unit]) : ''}`, maxLength: 16, autoFocus: autoFocus, "aria-describedby": `${id}-info` }) }), _jsx(Button, { variant: 'simple', icon: true, onClick: onPlusClick, readOnly: readOnly, disabled: disabled, tabIndex: -1, "aria-hidden": 'true', children: _jsx(Icon, { name: 'plus' }) })] }));
    const Comp = variant === 'stepper' && !readOnly ? StepperComp : NumberInputComp;
    return label ? (_jsx(FormField, { ...{
            label,
            labelHidden,
            id,
            info,
            status,
            required,
            readOnly,
            disabled,
            additionalInfo,
            onResolveSuggestion
        }, children: Comp })) : (Comp);
});
export default NumberInput;
//# sourceMappingURL=NumberInput.js.map