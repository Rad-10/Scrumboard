import { jsx as _jsx } from "react/jsx-runtime";
import { useEffect, useCallback, forwardRef, useState } from 'react';
import styled, { css } from 'styled-components';
import { useOuterEvent, useConsolidatedRef, usePrevious } from '../../hooks';
import { reflow } from '../../utils';
import { defaultThemeProp } from '../../theme';
export const StyledDrawer = styled.div(props => {
    const { state, shadow, position, placement, transitionSpeed, size, theme } = props;
    let dimension = 'horizontal';
    let axis = 'X';
    let anchor = 'top';
    if (placement === 'top' || placement === 'bottom') {
        dimension = 'vertical';
        axis = 'Y';
        anchor = 'left';
    }
    const translate = state === 'open' || state === 'opening' ? 0 : '100%';
    const speed = transitionSpeed || theme.base.animation.speed;
    return css `
    z-index: ${theme.base['z-index'].drawer};
    position: ${position};
    ${placement}: 0;
    ${anchor}: 0;
    height: ${dimension === 'vertical' ? size : '100%'};
    width: ${dimension === 'horizontal' ? size : '100%'};
    transition-property: transform, box-shadow, opacity;
    transition-duration: max(${speed}, 0.0001s);
    transition-timing-function: ${theme.base.animation.timing.ease};
    transform: ${state === 'open'
        ? 'none'
        : `translate${axis}(${placement === 'top' || placement === 'left' ? '-' : ''}${translate})`};

    ${shadow &&
        css `
      box-shadow: ${theme.base.shadow.high};
    `}
  `;
});
StyledDrawer.defaultProps = defaultThemeProp;
const Drawer = forwardRef((props, ref) => {
    const { open = false, shadow = false, position = 'absolute', children, placement = 'right', transitionSpeed, size = '100%', onAfterOpen, onAfterClose, onBeforeOpen, onBeforeClose, onOuterClick, nullWhenClosed = false, ...restProps } = props;
    const drawerRef = useConsolidatedRef(ref);
    const [state, setState] = useState(open ? 'open' : 'closed');
    let prevState = usePrevious(state);
    if (!prevState)
        prevState = state;
    useOuterEvent('mousedown', [drawerRef.current], useCallback(() => {
        if (open)
            onOuterClick?.();
    }, [open, onOuterClick]));
    useEffect(() => {
        if (open && (state === 'closed' || state === 'closing')) {
            onBeforeOpen?.();
            reflow(drawerRef.current);
            setState('opening');
        }
        else if (!open && (state === 'open' || state === 'opening')) {
            onBeforeClose?.();
            setState('closing');
        }
        else if (open && state === 'open' && prevState !== 'open') {
            onAfterOpen?.();
        }
        else if (!open && state === 'closed' && prevState !== 'closed') {
            onAfterClose?.();
        }
    }, [open, state, prevState, onBeforeOpen, onBeforeClose, onAfterOpen, onAfterClose]);
    const onTransitionEnd = useCallback((e) => {
        if (e.target !== drawerRef.current || e.propertyName !== 'transform')
            return;
        setState(open ? 'open' : 'closed');
    }, [open]);
    return state === 'closed' && !open && nullWhenClosed ? null : (_jsx(StyledDrawer, { ref: drawerRef, position: position, shadow: shadow && open, transitionSpeed: transitionSpeed, placement: placement, size: size, open: open, state: state, onTransitionEnd: onTransitionEnd, ...restProps, children: children }));
});
export default Drawer;
//# sourceMappingURL=Drawer.js.map