import { createElement as _createElement } from "react";
import { Fragment as _Fragment, jsxs as _jsxs, jsx as _jsx } from "react/jsx-runtime";
import { forwardRef } from 'react';
import styled from 'styled-components';
export const StyledTreeListItem = styled.li ``;
export const StyledTreeList = styled.ul `
  &,
  & & {
    list-style: none;
    position: relative;
  }

  ${StyledTreeListItem} {
    position: relative;
  }
`;
const DefaultNodeRenderer = ({ data, subTree }) => {
    return (_jsxs(_Fragment, { children: [data, subTree] }));
};
let TreeList;
const TreeItem = ({ listItemProps, depth, nodes, nodeRenderer: NodeRenderer, ...restProps }) => {
    return (_jsx(StyledTreeListItem, { ...listItemProps, children: _jsx(NodeRenderer, { ...restProps, depth: depth, nodes: nodes, subTree: nodes && _jsx(TreeList, { depth: depth + 1, nodes: nodes, nodeRenderer: NodeRenderer }) }) }));
};
TreeList = forwardRef(({ nodes, depth, nodeRenderer, ...restProps }, ref) => {
    const hasParentSibling = nodes.some(node => !!node.nodes);
    return nodes.length > 0 ? (_jsx(StyledTreeList, { ...restProps, ref: ref, role: depth === 0 ? 'tree' : 'group', children: nodes.map(node => (_createElement(TreeItem, { ...node, key: node.id, depth: depth, nodeRenderer: nodeRenderer, hasParentSibling: hasParentSibling }))) })) : null;
});
const Tree = forwardRef(({ nodeRenderer = DefaultNodeRenderer, ...restProps }, ref) => {
    return _jsx(TreeList, { ...restProps, ref: ref, depth: 0, nodeRenderer: nodeRenderer });
});
export default Tree;
//# sourceMappingURL=Tree.js.map