import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useEffect, useRef, useState, forwardRef } from 'react';
import { cap } from '../../utils';
import Flex from '../Flex';
import MetaList from '../MetaList';
import Icon from '../Icon';
import Text from '../Text';
import { useConsolidatedRef, useDirection, useEvent, useFocusTrap, useI18n, useScrollToggle } from '../../hooks';
import ErrorState from '../ErrorState';
import { StyledHeader, StyledCountTracker, StyledInfo, StyledActionButton, StyledPreviewRegion, StyledNavButton, StyledImageContainer, StyledImage, StyledLiveRegion, StyledLightbox } from './Lightbox.styles';
const Lightbox = forwardRef(({ items, defaultIndex = 0, cycle, onItemLoad, onItemError, onNavigate, onItemDownload, onAfterClose, ...restProps }, refArg) => {
    const t = useI18n();
    const { start, end } = useDirection();
    const [currentIndex, setCurrentIndex] = useState(defaultIndex);
    const currentItem = items[currentIndex];
    const { disableScroll, enableScroll } = useScrollToggle();
    const lightboxRef = useConsolidatedRef(refArg);
    const headerRef = useRef(null);
    const closeButtonRef = useRef(null);
    const prevButtonRef = useRef(null);
    const nextButtonRef = useRef(null);
    const [open, setOpen] = useState(true);
    const imageRef = useConsolidatedRef(currentItem.ref);
    const [error, setError] = useState(false);
    const [liveText, setLiveText] = useState('');
    const countTrackerText = items.length > 1 ? t('x_of_y', [currentIndex + 1, items.length]) : '';
    const close = () => {
        setOpen(false);
    };
    const navigate = (direction) => {
        if (direction === 1) {
            if (currentIndex < items.length - 1) {
                setCurrentIndex(cur => cur + 1);
                setError(false);
            }
            else if (cycle) {
                setCurrentIndex(0);
                setError(false);
            }
        }
        else if (currentIndex > 0) {
            setCurrentIndex(cur => cur - 1);
            setError(false);
        }
        else if (cycle) {
            setCurrentIndex(items.length - 1);
            setError(false);
        }
    };
    const keyDownHandler = (e) => {
        if (e.repeat)
            return;
        if (e.key === 'Escape') {
            close();
        }
        else if (e.key === `Arrow${cap(end)}`) {
            navigate(1);
        }
        else if (e.key === `Arrow${cap(start)}`) {
            navigate(-1);
        }
    };
    useEvent('keydown', keyDownHandler);
    useFocusTrap(lightboxRef);
    useEffect(() => {
        setLiveText(`${currentItem.name}. ${countTrackerText ? `${countTrackerText}.` : ''} ${currentItem.description}.`);
    }, [currentItem.name, countTrackerText, currentItem.description]);
    useEffect(() => {
        lightboxRef.current?.focus();
    }, []);
    return (_jsxs(StyledLightbox, { ...restProps, tabIndex: -1, ref: lightboxRef, open: open, role: 'dialog', "aria-modal": 'true', container: { alignItems: 'start', justify: 'start', direction: 'column' }, alpha: 0.9, variant: 'dark', transitionSpeed: 'slow', onBeforeTransitionIn: disableScroll, onAfterTransitionOut: () => {
            enableScroll();
            onAfterClose?.();
        }, children: [_jsxs(Flex, { as: StyledHeader, ref: headerRef, container: {
                    justify: 'between',
                    alignItems: 'center',
                    gap: 2
                }, onMouseDown: (e) => {
                    if (e.button !== 0)
                        return;
                    if (e.target === e.currentTarget)
                        close();
                }, children: [_jsx(StyledCountTracker, { "aria-hidden": 'true', children: countTrackerText }), _jsxs(Flex, { as: StyledInfo, container: {
                            wrap: 'wrap',
                            alignItems: 'center',
                            justify: 'center',
                            colGap: 2,
                            rowGap: 0.5
                        }, children: [_jsx(Text, { variant: 'primary', as: 'h2', children: currentItem.name }), currentItem.metadata && _jsx(MetaList, { items: currentItem.metadata })] }), _jsxs(Flex, { container: true, children: [onItemDownload && (_jsx(StyledActionButton, { variant: 'simple', "aria-label": t('download'), icon: true, onClick: () => onItemDownload(currentItem.id), children: _jsx(Icon, { name: 'download' }) })), _jsx(StyledActionButton, { variant: 'simple', ref: closeButtonRef, "aria-label": t('close'), icon: true, onClick: close, children: _jsx(Icon, { name: 'times' }) })] })] }), _jsxs(Flex, { container: { justify: 'between' }, as: StyledPreviewRegion, item: { grow: 1, shrink: 0 }, children: [items.length > 1 && (_jsx(StyledNavButton, { ref: prevButtonRef, variant: 'simple', "aria-label": t('pagination_prev'), hidden: !cycle && currentIndex === 0, icon: true, onClick: () => {
                            navigate(-1);
                        }, children: _jsx("span", { children: _jsx(Icon, { name: 'caret-left' }) }) })), _jsx(Flex, { item: { grow: 1 }, as: StyledImageContainer, children: _jsx(Flex, { container: { alignItems: 'center' }, onMouseDown: (e) => {
                                if (e.button !== 0)
                                    return;
                                if (e.target === e.currentTarget)
                                    close();
                            }, children: error ? (_jsx(ErrorState, { message: t('image_load_error') })) : (_jsx(StyledImage, { ref: imageRef, src: currentItem.src, alt: currentItem.description, onLoad: (e) => {
                                    onItemLoad?.(currentItem.id, e);
                                }, onError: (e) => {
                                    onItemError?.(currentItem.id, e);
                                    setError(true);
                                } })) }) }), items.length > 1 && (_jsx(StyledNavButton, { ref: nextButtonRef, variant: 'simple', "aria-label": t('pagination_next'), hidden: !cycle && currentIndex === items.length - 1, icon: true, onClick: () => {
                            navigate(1);
                        }, children: _jsx("span", { children: _jsx(Icon, { name: 'caret-right' }) }) }))] }), _jsx(StyledLiveRegion, { "aria-live": 'polite', "aria-label": liveText })] }));
});
export default Lightbox;
//# sourceMappingURL=Lightbox.js.map