{"version":3,"file":"Icon.js","sourceRoot":"","sources":["../../../src/components/Icon/Icon.tsx"],"names":[],"mappings":";AAAA,OAAO,EACL,UAAU,EACV,QAAQ,EACR,SAAS,EAKV,MAAM,OAAO,CAAC;AACf,OAAO,MAAM,MAAM,mBAAmB,CAAC;AAoBvC,MAAM,YAAY,GAAG,IAAI,GAAG,EAA0B,CAAC;AAEvD,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,GAAG,KAAmB,EAAE,EAAE;IACrD,KAAK,CAAC,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE,EAAE,EAAE;QACrC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC;YAAE,YAAY,CAAC,GAAG,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAC/D,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,GAAG,KAAmB,EAAE,EAAE;IAC1D,KAAK,CAAC,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE,EAAE,EAAE;QACrC,YAAY,CAAC,GAAG,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,UAAU,GAAG,MAAM,CAAC,GAAG,CAAA;;;;;;CAMnC,CAAC;AAEF,MAAM,mBAAmB,GAA6B,MAAM,CAAC,MAAM,CAAC,EAAE,SAAS,EAAE,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC;AAE/F,MAAM,IAAI,GAAgD,UAAU,CAClE,CAAC,EAAE,IAAI,EAAE,GAAG,SAAS,EAA8B,EAAE,GAAqB,EAAE,EAAE;IAC5E,MAAM,CAAC,OAAO,EAAE,UAAU,CAAC,GAAG,QAAQ,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,mBAAmB,CAAC,CAAC;IAEtF,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YAC1B,UAAU,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,CAAE,CAAC,CAAC;YACpC,OAAO;SACR;QAED,MAAM,UAAU,GAAG,IAAI,eAAe,EAAE,CAAC;QAEzC,CAAC,KAAK,IAAI,EAAE;YACV,IAAI;gBACF,MAAM,MAAM,GAAe,MAAM,MAAM,CAAC,WAAW,kBAAkB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBACpF,IAAI,MAAM,CAAC,IAAI,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS;oBAC3C,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;gBAE/C,YAAY,CAAC,MAAM,CAAC,CAAC;aACtB;YAAC,MAAM;gBACN,YAAY,CAAC,EAAE,IAAI,EAAE,GAAG,mBAAmB,EAAE,CAAC,CAAC;aAChD;YAED,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,OAAO;gBAAE,UAAU,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,mBAAmB,CAAC,CAAC;QAC5F,CAAC,CAAC,EAAE,CAAC;QAEL,OAAO,GAAG,EAAE,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;IAClC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;IAEX,OAAO,CACL,KAAC,UAAU,IAAC,IAAI,EAAC,cAAc,KAAK,SAAS,EAAE,OAAO,EAAE,OAAO,CAAC,OAAO,EAAE,GAAG,EAAE,GAAG,YAC/E,KAAC,OAAO,CAAC,SAAS,KAAG,GACV,CACd,CAAC;AACJ,CAAC,CACF,CAAC;AAEF,eAAe,IAAI,CAAC","sourcesContent":["import {\n  forwardRef,\n  useState,\n  useEffect,\n  FunctionComponent,\n  Ref,\n  PropsWithoutRef,\n  ComponentType\n} from 'react';\nimport styled from 'styled-components';\n\nimport { BaseProps, ForwardProps, NoChildrenProp } from '../../types';\n\nexport interface IconProps extends BaseProps, NoChildrenProp {\n  /** The name indicating the Cosmos Icon. Reference the catalog above for the available names. */\n  name: string;\n  /** Ref for the wrapping element. */\n  ref?: Ref<SVGSVGElement>;\n}\n\nexport interface IconDefinition {\n  Component: ComponentType;\n  viewBox?: string;\n}\n\nexport interface IconModule extends IconDefinition {\n  name: IconProps['name'];\n}\n\nconst iconRegistry = new Map<string, IconDefinition>();\n\nexport const registerIcon = (...icons: IconModule[]) => {\n  icons.forEach(({ name, ...iconDef }) => {\n    if (!iconRegistry.has(name)) iconRegistry.set(name, iconDef);\n  });\n};\n\nexport const forceRegisterIcon = (...icons: IconModule[]) => {\n  icons.forEach(({ name, ...iconDef }) => {\n    iconRegistry.set(name, iconDef);\n  });\n};\n\nexport const StyledIcon = styled.svg`\n  display: inline-block;\n  fill: currentColor;\n  height: 1.125rem;\n  width: 1.125rem;\n  vertical-align: middle;\n`;\n\nconst emptyIconDefinition: Readonly<IconDefinition> = Object.freeze({ Component: () => null });\n\nconst Icon: FunctionComponent<IconProps & ForwardProps> = forwardRef(\n  ({ name, ...restProps }: PropsWithoutRef<IconProps>, ref: IconProps['ref']) => {\n    const [iconDef, setIconDef] = useState(iconRegistry.get(name) ?? emptyIconDefinition);\n\n    useEffect(() => {\n      if (iconRegistry.has(name)) {\n        setIconDef(iconRegistry.get(name)!);\n        return;\n      }\n\n      const controller = new AbortController();\n\n      (async () => {\n        try {\n          const module: IconModule = await import(`./icons/${encodeURIComponent(name)}.icon`);\n          if (module.name !== name || !module.Component)\n            throw new Error('Malformed icon definition');\n\n          registerIcon(module);\n        } catch {\n          registerIcon({ name, ...emptyIconDefinition });\n        }\n\n        if (!controller.signal.aborted) setIconDef(iconRegistry.get(name) ?? emptyIconDefinition);\n      })();\n\n      return () => controller.abort();\n    }, [name]);\n\n    return (\n      <StyledIcon role='presentation' {...restProps} viewBox={iconDef.viewBox} ref={ref}>\n        <iconDef.Component />\n      </StyledIcon>\n    );\n  }\n);\n\nexport default Icon;\n"]}