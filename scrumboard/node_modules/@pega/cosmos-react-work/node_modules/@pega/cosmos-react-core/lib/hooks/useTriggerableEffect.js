import { useState, useCallback, useEffect } from 'react';
/**
 * @example const triggerFunction = useTriggerableEffect(cb);
 * @param cb The callback function that will be invoked after re-render by the useEffect.
 * @returns triggerFunction:: The function that will trigger the useEffect.
 */
const useTriggerableEffect = (cb) => {
    const [state, setState] = useState({
        triggered: false,
        args: null
    });
    useEffect(() => {
        if (!state.triggered)
            return;
        setState({
            triggered: false,
            args: null
        });
        cb(...state.args);
    }, [cb, state]);
    return useCallback((...args) => {
        setState({ triggered: true, args });
    }, []);
};
export default useTriggerableEffect;
//# sourceMappingURL=useTriggerableEffect.js.map