import { jsx as _jsx } from "react/jsx-runtime";
import { forwardRef, useCallback, useEffect } from 'react';
import { useConsolidatedRef } from '../../../hooks';
import { BareInput } from './DateTime.styles';
const padNumberWithZeros = (maxLength, value = '') => {
    if (value === '')
        return '';
    return value.padStart(Number.isFinite(maxLength) ? maxLength : 0, '0');
};
const PartInput = forwardRef(({ value, onChange, readOnly, min = 0, max = Infinity, size = 2, maxLength = Infinity, padWithZeros = true, ...restProps }, ref) => {
    const onKeyDown = useCallback((ev) => {
        if (['+', '-', 'e', 'E', '.', ','].includes(ev.key))
            ev.preventDefault();
    }, []);
    const inputRef = useConsolidatedRef(ref);
    useEffect(() => {
        if (inputRef.current && !Number.isNaN(value)) {
            inputRef.current.value = padNumberWithZeros(maxLength, value?.toString());
        }
    }, [value, inputRef.current]);
    const onInputChange = useCallback((ev) => {
        const targetEl = ev.target;
        if (targetEl.value.length > maxLength)
            targetEl.value = targetEl.value.slice(0, maxLength);
        else if (size !== maxLength)
            targetEl.style.width = `${Math.max(targetEl.value.length, size)}ch`;
    }, [maxLength]);
    const onBlur = useCallback((ev) => {
        const targetElValue = ev.target.value;
        onChange?.(padWithZeros ? padNumberWithZeros(maxLength, targetElValue) : targetElValue);
    }, [onChange]);
    const defaultValue = padNumberWithZeros(maxLength, value?.toString());
    return (_jsx(BareInput, { type: 'number', defaultValue: defaultValue, onBlur: onBlur, onKeyDown: onKeyDown, onChange: onInputChange, step: 1, min: min, max: max, maxLength: maxLength, readOnly: readOnly, ref: inputRef, size: size, ...restProps }));
});
export default PartInput;
//# sourceMappingURL=PartInput.js.map