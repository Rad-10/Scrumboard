{"version":3,"file":"LocationInput.js","sourceRoot":"","sources":["../../../src/components/Location/LocationInput.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n  ChangeEvent,\n  FC,\n  forwardRef,\n  PropsWithoutRef,\n  Ref,\n  useCallback,\n  useContext,\n  useEffect,\n  useState\n} from 'react';\nimport styled from 'styled-components';\n\nimport ComboBox from '../ComboBox';\nimport { MenuProps } from '../Menu';\nimport { useI18n } from '../../hooks';\nimport { createUID } from '../../utils/utils';\nimport FormField from '../FormField';\nimport { FormControlProps } from '../FormControl';\nimport { BaseProps, ForwardProps } from '../../types';\nimport Flex from '../Flex';\n\nimport PoweredByGoogleImage from './PoweredByGoogleImage';\nimport CurrentLocationButton from './CurrentLocationButton';\nimport MapsContext from './MapsContext';\nimport { getPlaceById, getPlacePredictions, loadMapsAPI } from './utils';\nimport BaseLocationProps from './Location.types';\nimport { LatLng } from './types';\nimport LocationView, { LocationViewProps, StyledLocationView } from './LocationView';\n\nexport interface LocationInputProps\n  extends LocationViewProps,\n    BaseLocationProps,\n    BaseProps,\n    FormControlProps {\n  /** Button when clicked will show additional information for the location input */\n  additionalInfo?: FormControlProps['additionalInfo'];\n  /**\n   * Get user current location on component first render.\n   * @default false\n   */\n  defaultToCurrentLocation?: boolean;\n  /** The value of the location field. */\n  value?: string;\n  /**\n   * Callback fired on every change of the location input.\n   * The argument passed back is the component's value prop.\n   */\n  onChange?: (value: string) => void;\n  /**\n   * Callback fired when the control's input loses focus.\n   * The argument passed back is the component's value prop.\n   */\n  onBlur?: (value: string) => void;\n  /**\n   * Set to true renders the map view below input.\n   * @default false\n   */\n  showMap?: boolean;\n  /** Location coordinates used for the map view. */\n  location?: LatLng | string;\n  /** Callback fired when user chooses location from the dropdown of suggestions or submits input value. */\n  onSelect?: (value: {\n    name?: string;\n    address?: string;\n    latitude?: number;\n    longitude?: number;\n  }) => void;\n}\n\nconst StyledLocationMap = styled.div`\n  ${StyledLocationView} {\n    border-top-left-radius: 0;\n    border-top-right-radius: 0;\n  }\n`;\n\nconst LocationInput: FC<LocationInputProps & ForwardProps> = forwardRef(\n  (props: PropsWithoutRef<LocationInputProps>, ref: Ref<HTMLInputElement>) => {\n    const {\n      label,\n      labelHidden,\n      id = createUID(),\n      location = '',\n      value = '',\n      info,\n      status,\n      required,\n      readOnly,\n      disabled,\n      additionalInfo,\n      onSelect,\n      onError,\n      onChange,\n      bias,\n      showMap,\n      defaultToCurrentLocation,\n      centerMapOnChange,\n      height,\n      zoomLevel,\n      onClick,\n      onBlur,\n      ...restProps\n    } = props;\n    const { name, ...providerOpts } = useContext(MapsContext);\n    const t = useI18n();\n    const [placePredictionMenu, setPlacePredictionMenu] = useState<MenuProps>({ items: [] });\n    const [filterValue, setFilterValue] = useState('');\n\n    useEffect(() => {\n      const mapApiPromise = loadMapsAPI(name, providerOpts).catch(error => onError?.(error));\n\n      if (filterValue) {\n        mapApiPromise\n          .then(() => getPlacePredictions(filterValue, bias))\n          .then(({ placePredictions, token }) => {\n            setPlacePredictionMenu({\n              items: placePredictions.map(item => ({\n                id: item.place_id,\n                primary: item.structured_formatting.main_text,\n                secondary: [item.structured_formatting.secondary_text]\n              })),\n              emptyText: t('location_not_found_text'),\n              onItemClick: itemId =>\n                getPlaceById(itemId, token).then(arg => {\n                  setFilterValue('');\n                  onSelect?.(arg);\n                })\n            });\n          })\n          .catch(error => {\n            setPlacePredictionMenu({ items: [] });\n            onError?.(error);\n          });\n      } else {\n        setPlacePredictionMenu({ items: [] });\n      }\n    }, [filterValue, bias, onError, onSelect]);\n\n    const onInputChange = useCallback(\n      (e: ChangeEvent<HTMLInputElement>) => {\n        setFilterValue(e.target.value);\n        onChange?.(e.target.value);\n      },\n      [onChange]\n    );\n\n    const onMapClick = useCallback(\n      (placeInfo: { latitude: number; longitude: number; name?: string; address?: string }) => {\n        onSelect?.(placeInfo);\n        onClick?.(placeInfo);\n      },\n      [onSelect, onClick]\n    );\n\n    const Comp = (\n      <>\n        <ComboBox\n          placeholder={t('location_input_placeholder')}\n          menu={\n            filterValue\n              ? {\n                  ...placePredictionMenu,\n                  items: placePredictionMenu.items.concat({\n                    id: createUID(),\n                    primary: t('use_input_value', [filterValue])\n                  }),\n                  mode: 'action',\n                  emptyText: t('location_not_found_text'),\n                  footer: !showMap && (\n                    <Flex container={{ justify: 'end' }}>\n                      <PoweredByGoogleImage />\n                    </Flex>\n                  )\n                }\n              : undefined\n          }\n          actions={\n            !disabled &&\n            !readOnly && (\n              <CurrentLocationButton\n                {...{ defaultToCurrentLocation, onError, onChange: onSelect }}\n              />\n            )\n          }\n          onChange={onInputChange}\n          onBlur={() => {\n            setFilterValue('');\n            onBlur?.(value);\n          }}\n          value={value}\n          {...{\n            required,\n            disabled,\n            readOnly,\n            status,\n            ...restProps\n          }}\n        />\n        {showMap && (\n          <StyledLocationMap>\n            <LocationView\n              {...{\n                location,\n                onClick: onMapClick,\n                onError,\n                bias,\n                disabled,\n                readOnly,\n                centerMapOnChange,\n                height,\n                zoomLevel\n              }}\n            />\n          </StyledLocationMap>\n        )}\n      </>\n    );\n\n    return label ? (\n      <FormField\n        {...{ label, labelHidden, id, info, status, ref, required, disabled, additionalInfo }}\n      >\n        {Comp}\n      </FormField>\n    ) : (\n      Comp\n    );\n  }\n);\n\nexport default LocationInput;\n"]}