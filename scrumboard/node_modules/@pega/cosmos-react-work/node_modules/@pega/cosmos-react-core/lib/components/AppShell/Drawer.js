import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useContext, useRef } from 'react';
import { lighten } from 'polished';
import BareButton from '../Button/BareButton';
import Drawer from '../Drawer';
import Flex from '../Flex';
import Icon, { registerIcon } from '../Icon';
import * as arrowLeftIcon from '../Icon/icons/arrow-left.icon';
import Text from '../Text';
import { useDirection, useElement, useI18n, useOuterEvent, useTheme } from '../../hooks';
import Configuration from '../Configuration';
import { tryCatch } from '../../utils';
import AppShellContext from './AppShellContext';
import { StyledDrawerWrapper, StyledDrawerBackButton, StyledDrawerHeading, StyledDrawerListContainer } from './Drawer.styles';
registerIcon(arrowLeftIcon);
export default ({ content, header, onDrawerOpen, onDrawerClose, drawerOpen, setDrawerOpen }) => {
    const { focusedImperatively } = useContext(AppShellContext);
    const returnFocusRef = useRef();
    const [drawerEl, setDrawerEl] = useElement();
    const theme = useTheme();
    const backButtonRef = useRef(null);
    const appShellBg = tryCatch(() => lighten(0.1, theme.components['app-shell'].nav['background-color']));
    const appShellTheme = {
        base: {
            palette: {
                'primary-background': appShellBg,
                'foreground-color': 'rgba(255, 255, 255, 0.7)',
                interactive: theme.base.colors.blue.light
            },
            shadow: {
                focus: theme.base.shadow['focus-inverted']
            }
        }
    };
    const { ltr, rtl } = useDirection();
    const t = useI18n();
    useOuterEvent('click', [drawerEl], () => {
        setDrawerOpen(false);
    });
    return (_jsx(Configuration, { theme: appShellTheme, children: _jsxs(Drawer, { as: StyledDrawerWrapper, position: 'fixed', placement: 'left', open: drawerOpen, nullWhenClosed: true, onBeforeOpen: () => {
                returnFocusRef.current = document.activeElement ?? undefined;
            }, onAfterOpen: () => {
                if (backButtonRef.current && document.activeElement !== backButtonRef.current) {
                    focusedImperatively.current = true;
                    backButtonRef.current.focus();
                }
                onDrawerOpen?.();
            }, onAfterClose: () => {
                onDrawerClose?.();
                returnFocusRef.current?.focus();
            }, ref: setDrawerEl, children: [_jsxs(Flex, { as: StyledDrawerHeading, container: { alignItems: 'center' }, children: [rtl && _jsx(Text, { children: header }), _jsx(BareButton, { as: StyledDrawerBackButton, ref: backButtonRef, onClick: () => setDrawerOpen(false), "aria-label": t('close_noun', [header]), children: _jsx(Icon, { name: 'arrow-left' }) }), ltr && _jsx(Text, { children: header })] }), _jsx(Flex, { as: StyledDrawerListContainer, container: { direction: 'column' }, children: content })] }) }));
};
//# sourceMappingURL=Drawer.js.map