import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { forwardRef, useState, useCallback, useEffect, useMemo, useContext, useRef, isValidElement } from 'react';
import Flex from '../Flex';
import Link from '../Link';
import Count from '../Badges/Count';
import Icon, { registerIcon } from '../Icon';
import * as timesIcon from '../Icon/icons/times.icon';
import * as plusIcon from '../Icon/icons/plus.icon';
import * as caseSolidIcon from '../Icon/icons/case-solid.icon';
import * as barsIcon from '../Icon/icons/bars.icon';
import * as caretLeftIcon from '../Icon/icons/caret-left.icon';
import * as caretRightIcon from '../Icon/icons/caret-right.icon';
import Image from '../Image';
import { useI18n, useBreakpoint, useConsolidatedRef, useDirection, useTheme, useElement, useTransitionState } from '../../hooks';
import { openCloseStates } from '../../hooks/useTransitionState';
import Grid from '../Grid';
import Button from '../Button';
import Drawer from '../Drawer';
import Backdrop from '../Backdrop';
import Tooltip from '../Tooltip/Tooltip';
import SkipLinks from '../SkipLinks';
import VisuallyHiddenText from '../VisuallyHiddenText';
import AppShellContext, { AppShellDrawerContext } from './AppShellContext';
import AppShellDrawer from './Drawer';
import AppHeader from './AppHeader';
import { StyledAppNav, StyledAppInfo, StyledCaseTypes, StyledScrollWrap, StyledUtils, StyledAppMain, StyledAppShellNavIcon, StyledNavCasesList, StyledAppEnvironment, StyledBannerRegion, StyledCountIcon, StyledUtilIconCount, StyledMobileNav, StyledAppShellTooltip, StyledAppShellToggleButton } from './AppShell.styles';
import NavigationList from './NavigationList';
import { AppShellSearch } from './AppShellSearch';
registerIcon(timesIcon, plusIcon, caseSolidIcon, barsIcon, caretRightIcon, caretLeftIcon);
const CaseTypes = ({ caseTypes }) => {
    const t = useI18n();
    const transformedCaseTypes = caseTypes.map(caseType => {
        return {
            ...caseType,
            primary: caseType.name
        };
    });
    return useMemo(() => (_jsx(StyledCaseTypes, { children: _jsx(NavigationList, { items: [
                {
                    primary: t('app_shell_create'),
                    visual: _jsx(Icon, { name: 'plus', as: StyledAppShellNavIcon }),
                    items: transformedCaseTypes
                }
            ] }) })), [caseTypes]);
};
const Links = (props) => {
    const { links } = props;
    const [transformedLinks, setTransformedLinks] = useState([]);
    // TODO: Can this be a memo instead of a state and an effect?
    const mergedNavLinks = (items) => {
        return items.map((link) => {
            return {
                ...link,
                primary: link.name,
                'aria-current': link.active ? 'page' : null,
                visual: link.icon ? _jsx(Icon, { name: link.icon, as: StyledAppShellNavIcon }) : null,
                onClick: link.links ? undefined : link.onClick,
                items: link.links ? mergedNavLinks(link.links) : undefined
            };
        });
    };
    useEffect(() => {
        setTransformedLinks(mergedNavLinks(links));
    }, [links]);
    return (_jsx("div", { children: _jsx(NavigationList, { items: transformedLinks }) }));
};
const Cases = (props) => {
    const { cases } = props;
    const setupCases = (items) => {
        return items.map((item) => {
            const { id, primary, secondary, visual = _jsx(Icon, { name: 'case-solid', as: StyledAppShellNavIcon }), active, onClick, onDismiss } = item;
            return {
                id,
                'aria-current': active ? 'page' : undefined,
                primary,
                secondary,
                active: !!active,
                dismissible: true,
                onClick,
                onDismiss,
                visual
            };
        });
    };
    return (_jsx(StyledNavCasesList, { children: _jsx(NavigationList, { items: setupCases(cases) }) }));
};
export const Utils = ({ operator, items, appHeader }) => {
    const { navOpen, navState } = useContext(AppShellContext);
    const [item, setItem] = useState();
    const [drawerOpen, setDrawerOpen] = useState(false);
    useEffect(() => {
        if (drawerOpen && item) {
            setItem(items?.find((utilItem) => !isValidElement(utilItem) && utilItem.name === item.name));
        }
    }, [items]);
    const operatorInfo = useMemo(() => appHeader
        ? []
        : [
            {
                primary: operator.name,
                visual: operator.avatar,
                items: operator.actions
            }
        ], [appHeader, operator.name, operator.avatar, operator.actions]);
    const transform = useCallback((utilItem) => {
        const uItem = { ...utilItem };
        delete uItem.onDrawerClose;
        delete uItem.onDrawerOpen;
        return {
            onClick: () => {
                if (utilItem.drawerView) {
                    setItem(utilItem);
                }
            },
            ...uItem,
            primary: utilItem.name,
            visual: utilItem.count ? (_jsxs(StyledUtilIconCount, { children: [utilItem.visual, _jsx(Count, { as: StyledCountIcon, variant: 'urgent', children: utilItem.count })] })) : (utilItem.visual),
            collapseItems: !navOpen
        };
    }, [navOpen]);
    const utilItems = useMemo(() => {
        return [
            ...(items ?? []).map(uItem => {
                return isValidElement(uItem) ? uItem : transform(uItem);
            }),
            ...operatorInfo
        ];
    }, [items, operatorInfo, transform]);
    useEffect(() => {
        if (item)
            setDrawerOpen(true);
    }, [item]);
    useEffect(() => {
        if (navState === 'closed' || navState === 'closing')
            setDrawerOpen(false);
    }, [navState]);
    return (_jsxs(AppShellDrawerContext.Provider, { value: useMemo(() => ({
            drawerOpen,
            closeDrawer: () => {
                setDrawerOpen(false);
            },
            openDrawer: setItem
        }), [drawerOpen]), children: [_jsx(StyledUtils, { children: _jsx(NavigationList, { items: utilItems, collapsed: true }) }), item && (_jsx(AppShellDrawer, { drawerOpen: drawerOpen, setDrawerOpen: setDrawerOpen, content: item.drawerView, header: item.drawerHeader || item.name, onDrawerClose: () => {
                    setItem(undefined);
                    item.onDrawerClose?.();
                }, onDrawerOpen: item.onDrawerOpen }))] }));
};
const AppShell = forwardRef((props, ref) => {
    const { appInfo, searchInput, appHeader, searchPage, searchLabel = 'Sitewide', // FIXME: TR
    caseTypes, links, banners, environment: { name: envName, color: envColor } = {}, main, operator, utils, cases, defaultExpanded = false, collapsedHoverMenus = false, ...restProps } = props;
    const { appName, portalName, href: appInfoHref, onClick: appInfoOnClick, imageSrc: logoSrc, appNameHidden, ...appInfoRestProps } = appInfo;
    let appInfoAs = 'div';
    if (appInfoHref)
        appInfoAs = Link;
    else if (appInfoOnClick)
        appInfoAs = Button;
    const t = useI18n();
    const { start, end } = useDirection();
    const theme = useTheme();
    const navRef = useConsolidatedRef(ref);
    const [mobileNavOpen, setMobileNavOpen] = useState(false);
    const [mobileNavBackdrop, setMobileNavBackdrop] = useState(false);
    const focusedImperatively = useRef(false);
    const [headerEl, setHeaderEl] = useElement();
    const [mobileHeaderEl, setMobileHeaderEl] = useElement();
    const [appInfoEl, setAppInfoEl] = useElement();
    const [expandCollapseEl, setExpandCollapseEl] = useElement();
    const isSmallOrAbove = useBreakpoint('sm');
    const showAppHeader = !!appHeader && isSmallOrAbove;
    const showMainContent = showAppHeader ? !!(headerEl || mobileHeaderEl) : true;
    const openNavTimeoutId = useRef();
    const closeNavTimeoutId = useRef();
    const previewTriggerRef = useRef(null);
    const [searchContainerEl, setSearchContainerEl] = useState(null);
    const { state: navState, set: setNavState } = useTransitionState({
        ref: navRef,
        property: 'width',
        states: openCloseStates,
        defaultState: defaultExpanded ? 'open' : 'closed'
    });
    const skipLinks = useMemo(() => [
        {
            label: t('go_to_main_content'),
            target: { ariaLabel: t('main_content'), selector: 'main' }
        }
    ], [t]);
    const openNav = useCallback((delay = 0) => {
        if (closeNavTimeoutId.current)
            clearTimeout(closeNavTimeoutId.current);
        openNavTimeoutId.current = setTimeout(() => {
            setNavState('open');
        }, delay);
    }, []);
    const closeNav = useCallback((delay = 0) => {
        if (openNavTimeoutId.current)
            clearTimeout(openNavTimeoutId.current);
        closeNavTimeoutId.current = setTimeout(() => {
            setNavState('closed');
        }, delay);
    }, []);
    const onFocus = useCallback(() => {
        focusedImperatively.current = false;
    }, [openNav, isSmallOrAbove]);
    const onKeydown = useCallback(({ key }) => {
        if (key === 'Escape')
            setMobileNavOpen(false);
    }, []);
    useEffect(() => {
        if (mobileNavOpen) {
            document.addEventListener('keydown', onKeydown);
            return () => {
                document.removeEventListener('keydown', onKeydown);
            };
        }
    }, [mobileNavOpen]);
    useEffect(() => {
        if (isSmallOrAbove && mobileNavOpen) {
            setMobileNavBackdrop(false);
            setMobileNavOpen(false);
        }
    }, [isSmallOrAbove, mobileNavOpen]);
    const appShellJSX = (_jsxs(Flex, { ...restProps, container: {
            direction: 'column',
            justify: 'between'
        }, ref: isSmallOrAbove ? navRef : undefined, as: StyledAppNav, appHeader: showAppHeader, navOpen: mobileNavOpen, showEnv: !!envName, onFocus: onFocus, children: [envName && (_jsx(StyledAppEnvironment, { item: { shrink: 0 }, color: envColor ?? theme.base.colors.red['extra-light'], children: envName })), !showAppHeader && (_jsxs(_Fragment, { children: [_jsxs(StyledAppInfo, { as: Grid, forwardedAs: appInfoAs, variant: 'link', href: appInfoHref, onClick: appInfoOnClick, "aria-label": `${appName}${portalName ? ` - ${portalName}` : ''}`, ...appInfoRestProps, container: {
                            alignItems: 'center',
                            areas: portalName ? '"logo app" "logo portal"' : '"logo app"'
                        }, ref: setAppInfoEl, children: [_jsx(Grid, { item: { area: 'logo' }, as: Image, src: logoSrc, alt: appName }), _jsx(Grid, { item: { area: 'app' }, as: appNameHidden ? VisuallyHiddenText : 'span', children: appName }), portalName && (_jsx(Grid, { item: { area: 'portal' }, as: appNameHidden ? VisuallyHiddenText : 'span', children: portalName }))] }), navState === 'closed' && !appNameHidden && (_jsx(Tooltip, { target: appInfoEl, placement: 'right', as: StyledAppShellTooltip, showDelay: 'none', hideDelay: 'none', children: appName }))] })), searchInput && !showAppHeader && (_jsx(AppShellSearch, { searchLabel: searchLabel, collapsed: !mobileNavOpen && ['closed', 'closing'].includes(navState), searchInput: searchInput })), _jsxs(StyledScrollWrap, { onClick: isSmallOrAbove
                    ? () => {
                        if (['closing', 'closed'].includes(navState)) {
                            openNav(0);
                        }
                        else {
                            closeNav(0);
                        }
                    }
                    : undefined, children: [caseTypes && caseTypes.length > 0 && _jsx(CaseTypes, { caseTypes: caseTypes }), links && _jsx(Links, { links: links }), cases && _jsx(Cases, { cases: cases })] }), _jsx(Utils, { appHeader: showAppHeader, operator: operator, items: utils }), !mobileNavOpen && (_jsxs(Flex, { container: { justify: 'center' }, children: [_jsx(StyledAppShellToggleButton, { icon: true, ref: setExpandCollapseEl, compact: true, variant: 'simple', onClick: () => {
                            setNavState(navState === 'closed' ? 'open' : 'closed');
                        }, open: ['open', 'opening'].includes(navState), "aria-label": navState === 'closed' ? t('expand') : t('collapse'), children: ['closed', 'closing'].includes(navState) ? (_jsx(Icon, { name: `arrow-micro-${end}` })) : (_jsx(Icon, { name: `arrow-micro-${start}` })) }), ['open', 'closed'].includes(navState) && (_jsx(Tooltip, { target: expandCollapseEl, placement: 'right', as: StyledAppShellTooltip, showDelay: 'none', hideDelay: 'none', children: navState === 'closed' ? t('expand') : t('collapse') }))] }))] }));
    return (_jsxs(AppShellContext.Provider, { value: useMemo(() => ({
            navOpen: mobileNavOpen || navState === 'open' || navState === 'opening',
            collapsedHoverMenus,
            navState,
            focusedImperatively,
            headerEl: headerEl || mobileHeaderEl,
            previewTriggerRef,
            searchContainerEl,
            setSearchContainerEl,
            mobileNavOpen
        }), [navState, mobileNavOpen, headerEl, mobileHeaderEl, searchContainerEl]), children: [_jsx(SkipLinks, { items: skipLinks }), showAppHeader && (_jsx(AppHeader, { ...appInfo, searchInput: searchInput, searchLabel: searchLabel, operator: operator, searchPage: searchPage, ref: setHeaderEl })), isSmallOrAbove ? (appShellJSX) : (_jsxs(_Fragment, { children: [_jsx(Flex, { as: StyledMobileNav, container: { alignItems: 'center' }, ref: setMobileHeaderEl, children: _jsx(Button, { variant: 'simple', onClick: () => setMobileNavBackdrop(true), "aria-label": t('app_shell_open_nav'), icon: true, children: _jsx(Icon, { name: 'bars' }) }) }), _jsx(Backdrop, { open: mobileNavBackdrop, transitionSpeed: 'none', onAfterTransitionIn: () => setMobileNavOpen(true), onBeforeTransitionOut: () => setMobileNavOpen(false), onClick: e => {
                            if (e.currentTarget === e.target)
                                setMobileNavOpen(false);
                        }, children: _jsx(Drawer, { open: mobileNavOpen, onAfterClose: () => {
                                setMobileNavBackdrop(false);
                            }, position: 'fixed', placement: start, size: 'min(18.75rem, calc(100vw - 3.5rem))', nullWhenClosed: true, children: appShellJSX }) })] })), showMainContent && (_jsxs(StyledAppMain, { appHeader: showAppHeader, mobileNav: !isSmallOrAbove, headerOffset: isSmallOrAbove ? headerEl?.offsetHeight : mobileHeaderEl?.offsetHeight, navOpen: ['open', 'opening'].includes(navState), children: [banners && _jsx(StyledBannerRegion, { children: banners }), main] }))] }));
});
export default AppShell;
//# sourceMappingURL=AppShell.js.map