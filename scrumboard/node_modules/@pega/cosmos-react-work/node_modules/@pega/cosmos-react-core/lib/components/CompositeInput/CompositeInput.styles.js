import styled, { css } from 'styled-components';
import { StyledButton } from '../Button';
import { defaultThemeProp } from '../../theme';
import StyledInput from '../Input/Input.styles';
import { StyledIcon } from '../Icon';
export const StyledInputButton = styled(StyledInput) `
  padding-inline-end: 2rem;
  background-color: inherit;
  color: currentColor;
  outline: none;
  border: 0;
  caret-color: transparent;
  cursor: pointer;
  width: 100%;

  & + div {
    position: absolute;
    inset-block: 0.0625rem;
    inset-inline: calc(100% - 2rem) 0;
    ${StyledButton} ${StyledIcon} {
      width: 1rem;
      height: 1rem;
    }
  }
`;
export const StyledInputContainer = styled.div `
  position: relative;
`;
export const StyledCompositeInput = styled.div(({ theme: { base: { 'border-radius': borderRadius, 'hit-area': hitArea }, components: { 'form-control': formControl, input } } }) => {
    return css `
      height: ${input.height};
      min-height: ${hitArea['mouse-min']};

      @media (pointer: coarse) {
        min-height: ${hitArea['finger-min']};
      }

      &:focus-within {
        border-color: ${formControl[':focus']['border-color']};
        box-shadow: ${formControl[':focus']['box-shadow']};
      }

      &:hover:not([readonly]):not([disabled]):focus-within {
        border-color: transparent;
      }

      & > ${StyledButton} {
        border-start-start-radius: 0;
        border-start-end-radius: calc(${borderRadius} * ${formControl['border-radius']});
        border-end-start-radius: 0;
        border-end-end-radius: calc(${borderRadius} * ${formControl['border-radius']});
      }
    `;
});
StyledCompositeInput.defaultProps = defaultThemeProp;
export default StyledCompositeInput;
//# sourceMappingURL=CompositeInput.styles.js.map