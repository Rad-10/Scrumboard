{"version":3,"file":"ThemeMachine.js","sourceRoot":"","sources":["../../src/theme/ThemeMachine.ts"],"names":[],"mappings":"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","sourcesContent":["import { deepGet, defineSmartGetter } from '../utils';\nimport { DeepPartial } from '../types';\n\nexport interface ThemeLeaf<Value> {\n  $type: string;\n  $value: Value;\n  $constant?: boolean;\n  $comment?: string;\n}\n\nexport type ThemeDefinition = {\n  [key: string]: ThemeLeaf<unknown> | ThemeDefinition;\n};\n\nexport type ToThemeIFace<Node, Extension = never> = Node extends ThemeLeaf<infer LeafVal>\n  ? (LeafVal extends null ? LeafVal | string : LeafVal) | Extension\n  : Node extends object\n  ? {\n      readonly [Key in Exclude<keyof Node, '$comment'>]: ToThemeIFace<Node[Key], Extension>;\n    }\n  : Node | Extension;\n\nexport type SettableTheme<Def extends ThemeDefinition> = DeepPartial<ToThemeIFace<Def, symbol>>;\n\nexport const resetToInitial = Symbol.for('@pega/cosmos-react-core.theme.resetToInitial');\n\nexport interface ThemeMachineLike<Definition extends ThemeDefinition> {\n  parent: ThemeMachineLike<Definition> | null;\n\n  definition: Definition;\n\n  overrides: Map<string, boolean>;\n\n  readonly theme: ToThemeIFace<Definition>;\n}\n\nclass ThemeMachine<Definition extends ThemeDefinition> implements ThemeMachineLike<Definition> {\n  parent: ThemeMachineLike<Definition> | null;\n\n  definition: Definition;\n\n  overrides: Map<string, boolean>;\n\n  readonly theme: ToThemeIFace<Definition>;\n\n  overrideInTree(keys: string[]): boolean {\n    let ancestor: ThemeMachineLike<Definition> | null = this;\n    const fullProp = keys.join('.');\n\n    while (ancestor) {\n      // Trigger getters in the ancestor themes.\n      deepGet(ancestor.theme, keys);\n\n      if (ancestor.overrides.has(fullProp)) return !!ancestor.overrides.get(fullProp);\n      ancestor = ancestor.parent;\n    }\n\n    return false;\n  }\n\n  constructTheme(theme: SettableTheme<Definition>): ToThemeIFace<Definition> {\n    const constructForNode = (keys: string[] = []) => {\n      const themeNode: Record<string, any> = {};\n\n      Object.keys(deepGet(this.definition, keys)).forEach(key => {\n        // Ignore comment nodes.\n        if (key === '$comment') return;\n\n        const propKeys = [...keys, key];\n        const defNode: Record<string, any> = deepGet(this.definition, propKeys);\n\n        // If it is not a leaf node of the theme definition...\n        if (defNode.$type === undefined) {\n          // recursively run for child nodes.\n          defineSmartGetter(themeNode, key, () => constructForNode(propKeys));\n          return;\n        }\n\n        const themeValue = deepGet(theme, propKeys);\n\n        // If a theme value was set for this ThemeMachine...\n        if (themeValue !== undefined) {\n          // set overrides to true, unless it is being reset.\n          this.overrides.set(propKeys.join('.'), themeValue !== resetToInitial);\n        }\n\n        // If a theme value was set for this ThemeMachine, is not being reset, and is for a non-constant property...\n        if (themeValue !== undefined && themeValue !== resetToInitial && !defNode.$constant) {\n          // set to the provided value.\n          themeNode[key] = themeValue;\n        }\n\n        // If the property has been overridden in the tree (and not reset)...\n        else if (this.overrideInTree(propKeys)) {\n          // set to the value in the parent theme.\n          defineSmartGetter(themeNode, key, () => deepGet(this.parent!.theme, propKeys));\n        }\n\n        // If the property type is inherited...\n        else if (defNode.$type === 'inherited') {\n          // set to the value of the inherited property in this theme.\n          defineSmartGetter(themeNode, key, () => deepGet(this.theme, defNode.$value.split('.')));\n        }\n\n        // If the property type is literal...\n        else if (defNode.$type === 'literal') {\n          // set to the value listed in the definition.\n          themeNode[key] = defNode.$value;\n        }\n      });\n\n      return themeNode;\n    };\n\n    return constructForNode() as ToThemeIFace<Definition>;\n  }\n\n  constructor({\n    theme = {} as SettableTheme<Definition>,\n    parent,\n    definition\n  }:\n    | {\n        theme?: SettableTheme<Definition>;\n        parent: ThemeMachineLike<Definition>;\n        definition?: never;\n      }\n    | { theme?: SettableTheme<Definition>; parent?: never; definition: Definition }) {\n    this.parent = parent ?? null;\n    this.definition = parent ? parent.definition : definition;\n    this.overrides = new Map();\n    this.theme = this.constructTheme(theme);\n  }\n}\n\nexport default ThemeMachine;\n"]}