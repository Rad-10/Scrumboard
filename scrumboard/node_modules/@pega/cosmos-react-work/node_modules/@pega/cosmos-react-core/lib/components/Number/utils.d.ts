export declare function getDecimalSign(locale: string, options?: Intl.NumberFormatOptions): string;
export declare function getFraction(value: string): string;
export declare function getCleanedValue(value: string, decimalSign: string, maximumFractionDigits: number): string;
export declare const getFormattedValue: (value: string, locale: string, unit?: string, { notation, useGrouping, maximumFractionDigits, minimumFractionDigits }?: Pick<Intl.NumberFormatOptions, 'notation' | 'useGrouping' | 'maximumFractionDigits' | 'minimumFractionDigits'>) => string;
export declare function isValueInRange(value: number, min?: number, max?: number): boolean;
export declare function getIncrementedValue(value: string, min: number, max: number, step: number): string;
export declare function getDecrementedValue(value: string, min: number, max: number, step: number): string;
interface NumberFormatOptions {
    locale: string;
    options?: Intl.NumberFormatOptions;
}
export declare function formatNumber(value: number | bigint, { locale, options }: NumberFormatOptions): string;
export {};
//# sourceMappingURL=utils.d.ts.map