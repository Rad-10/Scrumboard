import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { forwardRef, useState, useCallback, useEffect, useRef } from 'react';
import Icon, { registerIcon } from '../Icon';
import * as searchIcon from '../Icon/icons/search.icon';
import { useConsolidatedRef, useEscape, useI18n, useOuterEvent } from '../../hooks';
import Flex from '../Flex';
import Popover from '../Popover';
import { sameWidth } from '../Popover/modifiers';
import Menu from '../Menu';
import Link from '../Link';
import Text from '../Text';
import { createStringMatcher } from '../../utils';
import { StyledCancelButton, StyledFiltersPopover, StyledResultsPopover, StyledSearchButton, StyledSearchFilterText, StyledSearchInput, StyledSearchMenu, StyledSearchResultsContainer, StyledSearchTextInput } from './SearchInput.styles';
registerIcon(searchIcon);
const SearchInput = forwardRef((props, ref) => {
    const t = useI18n();
    const { value = '', defaultFilter, filters, onFilterChange, searchResults, recentSearches, loading, advancedSearchLink, placeholder = t('search_placeholder_default'), onSearchChange, onSearchSubmit, searchInputAriaLabel, resultsPopover = true, ...restProps } = props;
    const inputRef = useConsolidatedRef(ref);
    const filterButtonRef = useRef(null);
    const filtersRef = useRef(null);
    const searchResultsRef = useRef(null);
    const [searchMenuOpen, setSearchMenuOpen] = useState(false);
    const [filterMenuOpen, setFilterMenuOpen] = useState(false);
    const [selectedFilter, setSelectedFilter] = useState(defaultFilter ?? '');
    const completeFilters = [t('all'), ...(filters ?? [])];
    const hasFilters = completeFilters.length > 1;
    const [downPressed, setDownPressed] = useState(false);
    const hasSearchResults = !!(searchResults && searchResults.length);
    const hasRecentSearches = !!(recentSearches && recentSearches.length);
    const [searchResultItems, setSearchResultItems] = useState(undefined);
    useEscape(e => {
        e.preventDefault();
        if (searchMenuOpen) {
            setSearchMenuOpen(false);
        }
        if (filterMenuOpen) {
            setFilterMenuOpen(false);
        }
    });
    const onKeyDown = useCallback((e) => {
        if (e.key === 'Enter') {
            onSearchSubmit?.(value);
        }
        if (e.key === 'ArrowDown') {
            setDownPressed(true);
        }
    }, [onSearchSubmit, value]);
    useOuterEvent('click', [filterButtonRef], () => {
        setFilterMenuOpen(false);
    });
    useOuterEvent('click', [searchResultsRef, inputRef, filtersRef], () => {
        setSearchMenuOpen(false);
    });
    useEffect(() => {
        setDownPressed(false);
    }, [value]);
    useEffect(() => {
        let items = [];
        if (hasSearchResults && value) {
            items = searchResults;
        }
        else if (hasRecentSearches && !value) {
            items = recentSearches;
        }
        else if (!searchResults && (!recentSearches || recentSearches.length === 0)) {
            items = undefined;
        }
        setSearchResultItems(items);
    }, [searchResults, recentSearches, searchMenuOpen, hasSearchResults, hasRecentSearches, value]);
    const searchMenu = (_jsx(Menu, { as: StyledSearchMenu, header: recentSearches && !value ? (_jsx(Text, { variant: 'secondary', children: t('recent_searches') })) : undefined, mode: 'action', items: searchResultItems ?? [], loading: hasRecentSearches && !value ? false : loading, footer: advancedSearchLink ? (_jsx(Link, { ...advancedSearchLink, children: t('advanced_search') })) : undefined, accent: hasSearchResults ? createStringMatcher(value, undefined, 'gi') : undefined, focusControlEl: (downPressed && inputRef.current) || undefined, focusElOnClose: true }));
    const showSearchMenu = (value || recentSearches?.length) && (searchResultItems || loading);
    return (_jsxs(_Fragment, { children: [_jsxs(Flex, { container: true, as: StyledSearchInput, hasFilters: hasFilters, children: [_jsxs(Flex, { as: StyledSearchButton, ref: filterButtonRef, forwardedAs: hasFilters ? undefined : 'div', container: {
                            justify: 'center',
                            alignItems: 'center',
                            gap: selectedFilter ? 0.5 : undefined
                        }, onClick: (e) => {
                            e.preventDefault();
                            if (hasFilters) {
                                setFilterMenuOpen(true);
                            }
                            else {
                                inputRef.current?.focus();
                            }
                        }, onBlur: () => {
                            setFilterMenuOpen(false);
                            setSearchMenuOpen(false);
                        }, onKeyDown: (e) => {
                            if (e.key === 'ArrowDown') {
                                setFilterMenuOpen(true);
                            }
                        }, decoupled: hasFilters, "aria-label": hasFilters ? t('select_search_filter') : undefined, children: [_jsx(Icon, { name: 'search' }), selectedFilter && _jsx(StyledSearchFilterText, { children: selectedFilter }), hasFilters && _jsx(Icon, { name: 'arrow-micro-down' })] }), _jsx(StyledSearchTextInput, { ref: inputRef, type: 'search', "aria-label": searchInputAriaLabel, placeholder: placeholder, ...restProps, value: value, onChange: (e) => {
                            onSearchChange?.(e.target.value);
                            if (e.target.value)
                                setSearchMenuOpen(true);
                        }, onKeyDown: onKeyDown, onFocus: () => {
                            setSearchMenuOpen(true);
                        }, decoupled: hasFilters, onBlur: () => {
                            setDownPressed(false);
                            if (!advancedSearchLink) {
                                setSearchMenuOpen(false);
                            }
                        }, autoComplete: 'off' }), value && (_jsx(StyledCancelButton, { icon: true, onClick: () => {
                            onSearchChange?.('');
                            inputRef.current?.focus();
                        }, variant: 'simple', compact: true, label: t('clear'), children: _jsx(Icon, { name: 'times' }) }))] }), resultsPopover && showSearchMenu && (_jsx(Popover, { as: StyledResultsPopover, target: inputRef.current, show: searchMenuOpen, placement: 'bottom-start', modifiers: [
                    {
                        name: 'flip',
                        options: {
                            fallbackPlacements: ['top-start']
                        }
                    },
                    sameWidth
                ], onBlur: () => {
                    setSearchMenuOpen(false);
                }, ref: searchResultsRef, children: searchMenu })), !resultsPopover && showSearchMenu && (_jsx(StyledSearchResultsContainer, { children: searchMenu })), hasFilters ? (_jsx(Popover, { ref: filtersRef, as: StyledFiltersPopover, target: filterButtonRef.current, show: filterMenuOpen, placement: 'bottom-start', modifiers: [
                    {
                        name: 'flip',
                        options: {
                            fallbackPlacements: ['top-start']
                        }
                    },
                    {
                        name: 'preventOverflow',
                        options: {
                            mainAxis: false,
                            altAxis: true
                        }
                    }
                ], children: _jsx(Menu, { mode: 'single-select', items: completeFilters.map(filter => ({
                        primary: filter,
                        id: filter,
                        selected: filter === t('all') ? selectedFilter === '' : selectedFilter === filter
                    })), onItemClick: filter => {
                        setSelectedFilter(filter === t('all') ? '' : filter);
                        onFilterChange?.(filter);
                        inputRef.current?.focus();
                    }, focusControlEl: filterButtonRef.current ?? undefined, focusElOnClose: false }) })) : undefined] }));
});
export default SearchInput;
//# sourceMappingURL=SearchInput.js.map