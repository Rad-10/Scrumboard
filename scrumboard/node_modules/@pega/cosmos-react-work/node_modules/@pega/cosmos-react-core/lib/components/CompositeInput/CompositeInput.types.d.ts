import { ComponentType, Ref } from 'react';
import { BaseProps, DeferInfer, NoChildrenProp } from '../../types';
import { FormControlProps } from '../FormControl';
export interface CompositeInputProps<P extends object = object> extends BaseProps, NoChildrenProp {
    /**
     * Sets DOM id for the control and associates label element via 'for' attribute.
     * If an id is not pass, a random id will be generated for any render.
     */
    id?: FormControlProps['id'];
    /** Set visual state based on a validation state. */
    status?: FormControlProps['status'];
    /** Pass a string or a fragment with an Icon and string. */
    label?: FormControlProps['label'];
    /** Visually hides the label region. */
    labelHidden?: FormControlProps['labelHidden'];
    /** It is recommended to pass a simple string to offer guidance. Text will be styled based on status prop. */
    info?: FormControlProps['info'];
    /** Indicate if the field is required. The browser defaults to false. */
    required?: FormControlProps['required'];
    /** Disable the control. The browser defaults to false. */
    disabled?: FormControlProps['disabled'];
    /** Callback when clear button is clicked. */
    onClear: () => void;
    /** String representation of the complex value. */
    value?: string;
    /** Text visible when on value has been set. */
    placeholder?: FormControlProps['placeholder'];
    /** Button when clicked will show additional information for the composite input */
    additionalInfo?: FormControlProps['additionalInfo'];
    /** Value form options. */
    dialog: {
        /**
         * A component to render the main portion of the form.
         */
        renderer: ComponentType<P>;
        /**
         * A props object that will be passed to the form renderer.
         */
        rendererProps?: DeferInfer<P>;
        /** Callback when cancel button is clicked. */
        onCancel: ({ close }: {
            close: () => void;
        }) => void;
        /** Callback when apply button is clicked. */
        onApply: ({ close }: {
            close: () => void;
        }) => void;
    };
    /** Ref forwarded to the wrapping element. */
    ref?: Ref<HTMLDivElement>;
}
//# sourceMappingURL=CompositeInput.types.d.ts.map