import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef, useEffect, useRef, useState } from 'react';
import Icon, { registerIcon } from '../Icon';
import * as caretDownIcon from '../Icon/icons/caret-down.icon';
import * as timesIcon from '../Icon/icons/times.icon';
import { useConsolidatedRef, useElement, useEscape, useI18n, useOuterEvent, useUID } from '../../hooks';
import { StyledFormControl } from '../FormControl';
import { getFocusables } from '../../utils';
import Flex from '../Flex';
import Button from '../Button';
import Popover from '../Popover';
import FormField from '../FormField';
import { StyledCompositeInput, StyledInputButton, StyledInputContainer } from './CompositeInput.styles';
registerIcon(caretDownIcon, timesIcon);
const CompositeInput = forwardRef((props, ref) => {
    const uid = useUID();
    const { id = uid, disabled, value, onClear, required, status, info, label, labelHidden, additionalInfo, dialog: { renderer: Renderer, rendererProps, onApply, onCancel }, ...restProps } = props;
    const t = useI18n();
    const [open, setOpen] = useState(false);
    const [popoverEl, setPopoverEl] = useElement(null);
    const containerRef = useConsolidatedRef(ref);
    const buttonRef = useRef(null);
    const formContentRef = useRef(null);
    const closePopover = () => {
        setOpen(false);
        buttonRef.current?.focus();
    };
    useOuterEvent('mousedown', [popoverEl, buttonRef], () => {
        if (open)
            onCancel({ close: closePopover });
    });
    useEffect(() => {
        if (open) {
            getFocusables(formContentRef)[0]?.focus();
        }
    }, [open, formContentRef.current]);
    useEscape(e => {
        e.preventDefault();
        closePopover();
    }, document, [closePopover]);
    const labelId = `${id}-label`;
    const Comp = (_jsxs(Flex, { as: StyledCompositeInput, forwardedAs: StyledFormControl, container: { alignItems: 'center' }, status: status, disabled: disabled, ref: containerRef, children: [_jsxs(Flex, { container: { alignItems: 'center' }, item: { grow: 1 }, as: StyledInputContainer, children: [_jsx(StyledInputButton, { ...restProps, id: id, disabled: disabled, "aria-haspopup": 'dialog', "aria-expanded": !disabled && open, "aria-describedby": info ? `${id}-info` : undefined, readOnly: true, required: required, onClick: () => {
                            if (!disabled) {
                                setOpen(true);
                            }
                        }, onKeyDown: e => {
                            if (e.key === 'Enter') {
                                e.preventDefault();
                                setOpen(true);
                            }
                        }, value: value ?? '', ref: buttonRef }), _jsx(Flex, { container: { justify: 'center', alignItems: 'center' }, style: { pointerEvents: value ? '' : 'none' }, children: value && !open ? (_jsx(Button, { icon: true, compact: true, variant: 'simple', label: t('clear'), onClick: onClear, children: _jsx(Icon, { name: 'times' }) })) : (_jsx(Icon, { name: 'caret-down' })) })] }), open && (_jsx(Popover, { ref: setPopoverEl, role: 'dialog', target: containerRef.current, placement: 'bottom-start', strategy: 'fixed', modifiers: [
                    {
                        name: 'flip',
                        options: {
                            fallbackPlacements: ['top-start']
                        }
                    }
                ], children: _jsxs(Flex, { container: { direction: 'column', gap: 1.5, pad: 2 }, ref: formContentRef, children: [_jsx(Renderer, { ...rendererProps }), _jsxs(Flex, { container: { justify: 'between' }, children: [_jsx(Button, { variant: 'secondary', onClick: () => onCancel({ close: closePopover }), children: t('cancel') }), _jsx(Button, { variant: 'primary', onClick: () => onApply({ close: closePopover }), children: t('apply') })] })] }) }))] }));
    return label ? (_jsx(FormField, { ...{ label, labelHidden, id, info, status, required, disabled, labelId, additionalInfo }, children: Comp })) : (Comp);
});
export default CompositeInput;
//# sourceMappingURL=CompositeInput.js.map