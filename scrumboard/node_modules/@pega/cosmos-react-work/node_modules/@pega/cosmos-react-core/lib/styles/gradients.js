// cspell:words deutan
import { mix } from 'polished';
export const gradientMap = {
    grayscale: [
        { color: 'hsl(0, 100%, 100%)', position: 0 },
        { color: 'hsl(0, 100%, 0%)', position: 1 }
    ],
    'persian-blue': [
        { color: 'hsl(210, 50%, 94%)', position: 0 },
        { color: 'hsl(210, 46%, 63%)', position: 1 / 3 },
        { color: 'hsl(206, 100%, 33%)', position: 2 / 3 },
        { color: 'hsl(210, 100%, 27%)', position: 1 }
    ],
    'persian-green': [
        { color: 'hsl(175, 35%, 94%)', position: 0 },
        { color: 'hsl(175, 42%, 65%)', position: 1 / 3 },
        { color: 'hsl(175, 100%, 33%)', position: 2 / 3 },
        { color: 'hsl(175, 100%, 27%)', position: 1 }
    ],
    'pastel-orange': [
        { color: 'hsl(36, 100%, 97%)', position: 0 },
        { color: 'hsl(36, 100%, 79%)', position: 1 / 3 },
        { color: 'hsl(36, 100%, 64%)', position: 2 / 3 },
        { color: 'hsl(36, 99%, 61%)', position: 1 }
    ],
    'japanese-laurel': [
        { color: 'hsl(135, 21%, 94%)', position: 0 },
        { color: 'hsl(135, 24%, 61%)', position: 1 / 3 },
        { color: 'hsl(135, 54%, 33%)', position: 2 / 3 },
        { color: 'hsl(135, 60%, 26%)', position: 1 }
    ],
    'mango-tango': [
        { color: 'hsl(23, 100%, 96%)', position: 0 },
        { color: 'hsl(23, 100%, 78%)', position: 1 / 3 },
        { color: 'hsl(23, 100%, 62%)', position: 2 / 3 },
        { color: 'hsl(23, 100%, 53%)', position: 1 }
    ],
    valencia: [
        { color: 'hsl(1, 87%, 96%)', position: 0 },
        { color: 'hsl(1, 72%, 75%)', position: 1 / 3 },
        { color: 'hsl(1, 67%, 56%)', position: 2 / 3 },
        { color: 'hsl(1, 82%, 41%)', position: 1 }
    ],
    'fuchsia-blue': [
        { color: 'hsl(259, 45%, 96%)', position: 0 },
        { color: 'hsl(259, 45%, 78%)', position: 1 / 3 },
        { color: 'hsl(259, 43%, 56%)', position: 2 / 3 },
        { color: 'hsl(259, 40%, 49%)', position: 1 }
    ],
    'faded-red': [
        { color: 'hsl(360, 100%, 95%)', position: 0 },
        { color: 'hsl(360, 100%, 85%)', position: 1 / 3 },
        { color: 'hsl(360, 100%, 75%)', position: 2 / 3 },
        { color: 'hsl(360, 100%, 70%)', position: 1 }
    ],
    rope: [
        { color: 'hsl(25, 31%, 93%)', position: 0 },
        { color: 'hsl(25, 32%, 62%)', position: 1 / 3 },
        { color: 'hsl(25, 59%, 35%)', position: 2 / 3 },
        { color: 'hsl(25, 64%, 30%)', position: 1 }
    ],
    silver: [
        { color: 'hsl(15, 18%, 97%)', position: 0 },
        { color: 'hsl(15, 9%, 79%)', position: 1 / 3 },
        { color: 'hsl(15, 11%, 65%)', position: 2 / 3 },
        { color: 'hsl(15, 9%, 58%)', position: 1 }
    ],
    'blue-yellow': [
        { color: 'hsl(56, 100%, 93%)', position: 0 },
        { color: 'hsl(144, 46%, 79%)', position: 2 / 10 },
        { color: 'hsl(185, 53%, 58%)', position: 4 / 10 },
        { color: 'hsl(191, 56%, 52%)', position: 5 / 10 },
        { color: 'hsl(195, 62%, 48%)', position: 6 / 10 },
        { color: 'hsl(206, 67%, 37%)', position: 8 / 10 },
        { color: 'hsl(215, 62%, 30%)', position: 1 }
    ],
    'green-yellow': [
        { color: 'hsl(56, 100%, 93%)', position: 0 },
        { color: 'hsl(88, 61%, 85%)', position: 2 / 10 },
        { color: 'hsl(125, 47%, 78%)', position: 4 / 10 },
        { color: 'hsl(148, 45%, 65%)', position: 5 / 10 },
        { color: 'hsl(159, 47%, 50%)', position: 6 / 10 },
        { color: 'hsl(173, 80%, 30%)', position: 8 / 10 },
        { color: 'hsl(178, 73%, 22%)', position: 1 }
    ],
    'ruby-yellow': [
        { color: 'hsl(56, 100%, 93%)', position: 0 },
        { color: 'hsl(40, 100%, 83%)', position: 2 / 10 },
        { color: 'hsl(19, 100%, 75%)', position: 4 / 10 },
        { color: 'hsl(3, 100%, 73%)', position: 5 / 10 },
        { color: 'hsl(350, 81%, 62%)', position: 6 / 10 },
        { color: 'hsl(343, 54%, 55%)', position: 8 / 10 },
        { color: 'hsl(330, 40%, 36%)', position: 1 }
    ],
    'purple-blue': [
        { color: 'hsl(190, 42%, 97%)', position: 0 },
        { color: 'hsl(205, 51%, 84%)', position: 2 / 10 },
        { color: 'hsl(212, 47%, 73%)', position: 4 / 10 },
        { color: 'hsl(219, 41%, 70%)', position: 5 / 10 },
        { color: 'hsl(253, 32%, 66%)', position: 6 / 10 },
        { color: 'hsl(272, 27%, 49%)', position: 8 / 10 },
        { color: 'hsl(272, 37%, 32%)', position: 1 }
    ],
    'violet-rose': [
        { color: 'hsl(18, 100%, 98%)', position: 0 },
        { color: 'hsl(359, 100%, 91%)', position: 2 / 10 },
        { color: 'hsl(336, 96%, 77%)', position: 4 / 10 },
        { color: 'hsl(325, 73%, 65%)', position: 5 / 10 },
        { color: 'hsl(319, 58%, 58%)', position: 6 / 10 },
        { color: 'hsl(287, 38%, 45%)', position: 8 / 10 },
        { color: 'hsl(259, 43%, 35%)', position: 1 }
    ],
    'negative-attention-positive': [
        { color: 'hsl(2, 67%, 56%)', position: 0 },
        { color: 'hsl(21, 87%, 60%)', position: 2 / 10 },
        { color: 'hsl(36, 100%, 64%)', position: 4 / 10 },
        { color: 'hsl(50, 95%, 75%)', position: 5 / 10 },
        { color: 'hsl(85, 72%, 67%)', position: 6 / 10 },
        { color: 'hsl(120, 49%, 60%)', position: 8 / 10 },
        { color: 'hsl(135, 53%, 33%)', position: 1 }
    ],
    'negative-attention-positive-protan': [
        { color: 'hsl(344, 67%, 44%)', position: 0 },
        { color: 'hsl(351, 66%, 59%)', position: 2 / 10 },
        { color: 'hsl(360, 100%, 84%)', position: 4 / 10 },
        { color: 'hsl(0, 0%, 89%)', position: 5 / 10 },
        { color: 'hsl(110, 46%, 80%)', position: 6 / 10 },
        { color: 'hsl(120, 49%, 60%)', position: 8 / 10 },
        { color: 'hsl(135, 53%, 33%)', position: 1 }
    ],
    'negative-attention-positive-deutan': [
        { color: 'hsl(315, 64%, 45%)', position: 0 },
        { color: 'hsl(313, 83%, 62%)', position: 2 / 10 },
        { color: 'hsl(313, 100%, 80%)', position: 4 / 10 },
        { color: 'hsl(0, 0%, 89%)', position: 5 / 10 },
        { color: 'hsl(110, 46%, 80%)', position: 6 / 10 },
        { color: 'hsl(120, 49%, 60%)', position: 8 / 10 },
        { color: 'hsl(135, 53%, 33%)', position: 1 }
    ],
    'hot-cold': [
        { color: 'hsl(212, 100%, 27%)', position: 0 },
        { color: 'hsl(213, 40%, 49%)', position: 2 / 10 },
        { color: 'hsl(210, 45%, 69%)', position: 4 / 10 },
        { color: 'hsl(0, 0%, 89%)', position: 5 / 10 },
        { color: 'hsl(360, 100%, 84%)', position: 6 / 10 },
        { color: 'hsl(351, 66%, 59%)', position: 8 / 10 },
        { color: 'hsl(344, 67%, 44%)', position: 1 }
    ],
    'two-extremes': [
        { color: 'hsl(240, 30%, 39%)', position: 0 },
        { color: 'hsl(271, 27%, 63%)', position: 2 / 10 },
        { color: 'hsl(293, 25%, 87%)', position: 4 / 10 },
        { color: 'hsl(0, 0%, 89%)', position: 5 / 10 },
        { color: 'hsl(171, 37%, 86%)', position: 6 / 10 },
        { color: 'hsl(167, 41%, 51%)', position: 8 / 10 },
        { color: 'hsl(163, 44%, 16%)', position: 1 }
    ]
};
export const colorInGradient = ([...gradient], targetPosition) => {
    // Return transparent for an empty gradient.
    if (gradient.length === 0)
        return 'transparent';
    // Return the color for single element gradient.
    if (gradient.length === 1)
        return gradient[0].color;
    // Clamp position to interval from 0 to 1.
    targetPosition = Math.min(Math.max(targetPosition, 0), 1);
    // Extend the the start of the gradient to 0 if necessary.
    if (gradient[0].position !== 0)
        gradient.unshift({ color: gradient[0].color, position: 0 });
    // Extend the the end of the gradient to 1 if necessary.
    if (gradient[gradient.length - 1].position !== 1)
        gradient.push({ color: gradient[gradient.length - 1].color, position: 1 });
    for (let i = 0; i < gradient.length; i += 1) {
        const current = gradient[i];
        // If target position is the same as the current position, return the color at the current position.
        if (targetPosition === current.position)
            return current.color;
        // If target position is less than the current position, it must be between the previous position and current position.
        if (targetPosition < current.position) {
            const previous = gradient[i - 1];
            // Calculate how far the targetPosition is between the previousPosition and the currentPosition.
            const percentage = (targetPosition - previous.position) / (current.position - previous.position);
            try {
                return mix(percentage, current.color, previous.color);
            }
            catch {
                // Polished mix throws on invalid color.
                return 'transparent';
            }
        }
    }
    // Failsafe return.
    return 'transparent';
};
export const colorInGradientByName = (name, targetPosition) => {
    return colorInGradient(gradientMap[name] ?? [], targetPosition);
};
export const colorsForCategories = (count, { gradients = [
    'persian-blue',
    'persian-green',
    'pastel-orange',
    'japanese-laurel',
    'mango-tango',
    'valencia',
    'fuchsia-blue',
    'faded-red',
    'rope',
    'silver'
].map(name => gradientMap[name]), steps = [2 / 3, 1 / 3, 1, 0, 1 / 2] } = {}) => {
    // Colors per gradient
    const perGradient = Math.floor(count / gradients.length);
    // Number of gradients with 1 extra color
    const extra = count % gradients.length;
    const colors = [];
    for (let i = 0; i < gradients.length; i += 1) {
        for (let j = 0; j < (i < extra ? perGradient + 1 : perGradient); j += 1) {
            colors.push(colorInGradient(gradients[i], steps[j % steps.length]));
        }
    }
    return colors;
};
export const nlpColors = [
    ['persian-blue', 1],
    ['persian-green', 1],
    ['pastel-orange', 1],
    ['japanese-laurel', 1],
    ['mango-tango', 1],
    ['valencia', 1],
    ['fuchsia-blue', 1],
    ['faded-red', 1],
    ['rope', 1],
    ['silver', 1],
    ['blue-yellow', 1],
    ['blue-yellow', 5 / 10],
    ['green-yellow', 1],
    ['blue-yellow', 3 / 10],
    ['green-yellow', 7 / 10],
    ['ruby-yellow', 1],
    ['ruby-yellow', 6 / 10],
    ['purple-blue', 1],
    ['two-extremes', 9 / 10],
    ['persian-blue', 1 / 2],
    ['hot-cold', 1],
    ['persian-green', 1 / 2],
    ['pastel-orange', 1 / 2],
    ['japanese-laurel', 1 / 2],
    ['mango-tango', 1 / 2],
    ['valencia', 1 / 2],
    ['fuchsia-blue', 1 / 2],
    ['faded-red', 1 / 2],
    ['rope', 1 / 2],
    ['silver', 1 / 2],
    ['blue-yellow', 7 / 10],
    ['blue-yellow', 4 / 10],
    ['green-yellow', 5 / 10],
    ['ruby-yellow', 5 / 10],
    ['purple-blue', 7 / 10],
    ['purple-blue', 5 / 10],
    ['violet-rose', 5 / 10],
    ['two-extremes', 8 / 10],
    ['ruby-yellow', 4 / 10],
    ['violet-rose', 7 / 10],
    ['negative-attention-positive-deutan', 8 / 10]
].map(([gradient, position]) => colorInGradient(gradientMap[gradient], position));
export const toLinearGradient = (gradient, { direction = '180deg' } = {}) => {
    if (gradient.length === 0)
        return 'transparent';
    if (gradient.length === 1)
        return gradient[0].color;
    return `linear-gradient(${direction}, ${gradient
        .map(({ color, position }) => `${color} ${position * 100}%`)
        .join(', ')})`;
};
//# sourceMappingURL=gradients.js.map