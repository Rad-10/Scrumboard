import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { createElement as _createElement } from "react";
import { forwardRef, useContext, useEffect, useRef, useState, useMemo, useCallback, useLayoutEffect } from 'react';
import { useAfterInitialEffect, useConsolidatedRef, useItemIntersection } from '../../hooks';
import Progress from '../Progress';
import EmptyState from '../EmptyState';
import Popover from '../Popover';
import MenuContext from './Menu.context';
import MenuItem from './MenuItem';
import { StyledLoadingItem, StyledMenuList, StyledFlyoutMenuListContainer } from './Menu.styles';
import { resizeRootEl } from './NavItemsList';
import helpers from './helpers';
import MenuGroup from './MenuGroup';
const FlyoutMenuList = forwardRef(({ items, parent, menuRole }, ref) => {
    const selfRef = useConsolidatedRef(ref);
    const ulRef = useRef(null);
    const menuListWrapperRef = useRef(null);
    const returnFocusRef = useRef(null);
    const [expandedItem, setExpandedItem] = useState();
    const { componentId, loadMore, loading, scrollAt, emptyText, onItemExpand, pushFlyoutId, flyOutActiveIdStack, updateActiveDescendants, updateParentDescendantStack } = useContext(MenuContext);
    useItemIntersection(ulRef, items.length - 1, () => {
        loadMore?.(parent?.item?.id);
    }, ':scope > li');
    useAfterInitialEffect(() => {
        if (expandedItem) {
            setExpandedItem(items.find(item => item.id === expandedItem.id)); // FIXME
        }
    }, [expandedItem, items]);
    useEffect(() => {
        const hasExpanded = items.some(item => {
            return flyOutActiveIdStack.includes(item.id);
        });
        if (!hasExpanded) {
            returnFocusRef.current = null;
            setExpandedItem(undefined);
        }
    }, [flyOutActiveIdStack]);
    const listContent = useMemo(() => {
        if (items.length) {
            return items.map(item => {
                return helpers.isItem(item) ? (_createElement(MenuItem, { ...item, key: item.id, "aria-haspopup": !!item.items, "aria-expanded": item.id === expandedItem?.id, role: menuRole === 'listbox' ? 'option' : 'menuitem', onExpand: (id, e) => {
                        if (item.items) {
                            returnFocusRef.current = e.currentTarget;
                            setExpandedItem(item); // FIXME
                            item?.onExpand?.(id, e);
                            onItemExpand?.(id, e);
                            pushFlyoutId(item.id || componentId);
                            updateActiveDescendants();
                            if (updateParentDescendantStack) {
                                updateParentDescendantStack(returnFocusRef.current.closest('li'));
                            }
                        }
                        else {
                            returnFocusRef.current = null;
                            setExpandedItem(undefined);
                        }
                    } })) : (_createElement(MenuGroup, { ...item, key: item.id, itemRole: menuRole === 'listbox' ? 'option' : 'menuitem' }));
            });
        }
        if (!loading) {
            return _jsx(EmptyState, { message: emptyText, forwardedAs: 'li' });
        }
        return null;
    }, [items, loading, emptyText, expandedItem, flyOutActiveIdStack]);
    const list = (_jsxs(StyledMenuList, { ref: ulRef, role: menuRole, children: [listContent, loading && !expandedItem && (_jsx(StyledLoadingItem, { children: _jsx(Progress, { placement: 'local' }) }))] }));
    useLayoutEffect(() => {
        setExpandedItem(undefined);
        if (selfRef.current) {
            menuListWrapperRef.current = selfRef.current.parentElement;
            resizeRootEl(selfRef.current, selfRef.current, items.length, scrollAt);
        }
    }, [items]);
    const handleMenuListScroll = useCallback(() => {
        if (expandedItem) {
            setExpandedItem(undefined);
        }
    }, [expandedItem]);
    return (_jsxs(_Fragment, { children: [_jsx(StyledFlyoutMenuListContainer, { ref: selfRef, onScroll: handleMenuListScroll, "data-flyout-menu-parent-id": componentId, "data-flyout-menu-id": parent?.item.id || componentId, children: list }), expandedItem && selfRef.current && (_jsx(Popover, { target: returnFocusRef.current, show: true, strategy: 'fixed', placement: 'right-start', children: _jsx(FlyoutMenuList, { items: expandedItem.items, parent: {
                        el: selfRef.current,
                        item: expandedItem,
                        siblingItems: items,
                        setExpandedItem,
                        returnFocusRef
                    }, menuRole: menuRole }) }))] }));
});
export default FlyoutMenuList;
//# sourceMappingURL=FlyoutMenuList.js.map