{"version":3,"file":"Slider.types.js","sourceRoot":"","sources":["../../../src/components/Slider/Slider.types.ts"],"names":[],"mappings":"","sourcesContent":["import { BaseProps, NoChildrenProp } from '../../types';\nimport { FormControlProps } from '../FormControl';\n\nexport default interface SliderProps extends BaseProps, NoChildrenProp {\n  /**\n   * Sets DOM id for the control and associates label element via 'for' attribute.\n   * If an id is not pass, a random id will be generated for any render.\n   */\n  id?: FormControlProps['id'];\n  /** Set visual state based on a validation state. */\n  status?: FormControlProps['status'];\n  /** Pass a string or a fragment with an Icon and string. */\n  label?: FormControlProps['label'];\n  /** Visually hides the label region. */\n  labelHidden?: FormControlProps['labelHidden'];\n  /** It is recommended to pass a simple string to offer guidance. Text will be styled based on status prop. */\n  info?: FormControlProps['info'];\n  /** Indicate if the field is required. The browser defaults to false. */\n  required?: FormControlProps['required'];\n  /**\n   * Creates a controlled input and sets the value. Requires an onChange handler to update value.\n   * value + onChange is the recommended method per React team.\n   */\n  value: number;\n  /** Disable the control. The browser defaults to false. */\n  disabled?: FormControlProps['disabled'];\n  /** Makes the input non editable and non clickable. The browser defaults to false. */\n  readOnly?: FormControlProps['readOnly'];\n  /** Sets html name attribute for the underlying control. Useful for mapping to a data field. */\n  name?: FormControlProps['name'];\n  /** Will automatically focus the thumb on render if true */\n  autoFocus?: boolean;\n  /**\n   * Minimum value.\n   * @default 0\n   */\n  min?: number;\n  /**\n   * Maximum value.\n   * @default 100\n   */\n  max?: number;\n  /**\n   * Step value.\n   * @default 1\n   */\n  step?: number;\n  /**\n   * Slider orientation.\n   * @default 'horizontal'\n   */\n  orientation?: 'vertical' | 'horizontal';\n  /**\n   * Show slider color progress bar.\n   * @default false\n   */\n  showProgress?: boolean;\n  /**\n   * Show current value.\n   * @default false\n   */\n  preview?: boolean;\n  /**\n   * Display input to provide value.\n   * @default true\n   */\n  showInput?: boolean;\n  /**\n   * Display defined ticks.\n   */\n  ticks?: { [key: number]: string };\n  /**\n   * On change callback.\n   * @param value new input value\n   */\n  onChange: (value: number) => void;\n  /**\n   * Called when the user starts dragging the slider thumb.\n   */\n  onDragStart?: () => void;\n  /**\n   * Called when the user stops dragging the slider thumb.\n   */\n  onDragEnd?: () => void;\n}\n\nexport interface TickDefinition {\n  start: number;\n  end: number;\n  value: number;\n  label: string;\n}\n"]}