import { useEffect, useCallback } from 'react';
import { documentIsAvailable } from '../utils';
const focusable = `
  a[href],
  button:enabled,
  input[type='checkbox']:enabled,
  input[type='radio']:enabled
`;
/**
 * @example useArrows(ref, { cycle, selector });
 * @param ref - A reference to the element that will be navigated through. [React RefObject](https://reactjs.org/docs/refs-and-the-dom.html)
 */
const useArrows = (ref, { 
/** If true, the down or up arrow key will navigate to the first or last element if the element currently focused is the last or first index of the selected elements. */
cycle = true, 
/** A query selector that will determine which elements to cycle through with the arrow keys. The selector will be used in conjunction with [querySelectorAll](https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll#selectors). */
selector = focusable, 
/** Which keys are used to navigate through the list */
dir = 'up-down', allowTabFocus = true } = {}, 
/**  Pass this prop in the internal dependencies when list is dynamic */
dependencies = []) => {
    const [NextKey, PrevKey] = dir === 'up-down' ? ['ArrowDown', 'ArrowUp'] : ['ArrowRight', 'ArrowLeft'];
    const setTabIndexes = useCallback((el) => {
        // don't set tabindex -1 for first element, or an element with a checked input inside of it to be able to focus it
        // 0 second timeout added because DOM needs to be up to date after list is updated before running query
        setTimeout(() => {
            const focusableElements = Array.from(el.querySelectorAll(selector));
            if (focusableElements.length > 0) {
                if (allowTabFocus)
                    focusableElements[0].tabIndex = 0;
                focusableElements.slice(1).forEach(item => {
                    if (item instanceof HTMLElement) {
                        const checked = item.checked;
                        if (!checked)
                            item.tabIndex = -1;
                    }
                });
            }
        }, 0);
    }, [selector, ...dependencies]);
    const listener = useCallback((e) => {
        if (['Home', 'End', NextKey, PrevKey].includes(e.key))
            e.preventDefault();
        if (!documentIsAvailable)
            return;
        const el = ref.current;
        if (!el)
            return;
        const items = Array.from(el.querySelectorAll(selector)).filter((item) => item instanceof HTMLElement);
        if (!items.length)
            return;
        const rootNode = el.getRootNode();
        if (!(rootNode instanceof Document) && !(rootNode instanceof ShadowRoot))
            return;
        const focusIdx = items.indexOf(rootNode.activeElement);
        const lastIdx = items.length - 1;
        let newFocusIdx;
        if (e.key === 'Home' || (e.key === NextKey && focusIdx === -1)) {
            newFocusIdx = 0;
        }
        else if (e.key === 'End' || (e.key === PrevKey && focusIdx === -1)) {
            newFocusIdx = lastIdx;
        }
        else if (e.key === 'Enter') {
            setTabIndexes(el);
            return;
        }
        else if (e.key === NextKey) {
            if (focusIdx === lastIdx) {
                if (!cycle)
                    return;
                newFocusIdx = 0;
            }
            else {
                newFocusIdx = focusIdx + 1;
            }
        }
        else if (e.key === PrevKey) {
            if (focusIdx === 0) {
                if (!cycle)
                    return;
                newFocusIdx = lastIdx;
            }
            else {
                newFocusIdx = focusIdx - 1;
            }
        }
        else {
            return;
        }
        items[newFocusIdx].focus();
    }, [ref.current, cycle, selector, ...dependencies]);
    useEffect(() => {
        const el = ref.current;
        if (!el)
            return;
        setTabIndexes(el);
        el.addEventListener('keydown', listener);
        return () => {
            el.removeEventListener('keydown', listener);
        };
    }, [ref.current, selector, listener, ...dependencies]);
};
export default useArrows;
//# sourceMappingURL=useArrows.js.map