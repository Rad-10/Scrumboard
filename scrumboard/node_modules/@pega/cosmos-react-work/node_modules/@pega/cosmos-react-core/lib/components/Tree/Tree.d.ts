import { Ref, ComponentType, ReactNode } from 'react';
import { BaseProps, NoChildrenProp, ForwardProps } from '../../types';
export declare type OldTreeNode<T extends object = Record<string, unknown>> = {
    /** The id of the Node. Used as the key for the li element wrapping the Node. */
    id: string;
    /** Child nodes. */
    nodes?: OldTreeNode<T>[];
    /** Props to apply to the li. */
    listItemProps?: ForwardProps;
    [key: string]: unknown;
} & T;
export declare type TreeNode = {
    /** The id of the Node. Used as the key for the li element wrapping the Node. */
    id: string;
    /** Child nodes. */
    nodes?: TreeNode[];
    /** Props to apply to the li. */
    listItemProps?: ForwardProps;
    [key: string]: unknown;
};
export interface TreeProps<T extends TreeNode = TreeNode> extends BaseProps, NoChildrenProp {
    /** An array of ParentNodes and Nodes that compose the layout of the Tree. */
    nodes: T[];
    /** A function that allows custom styling and behavior for all Nodes. */
    nodeRenderer?: ComponentType<{
        depth: number;
        subTree?: ReactNode;
        hasParentSibling: TreeItemProps['hasParentSibling'];
    } & Exclude<T, 'listItemProps'>>;
    /** Ref for the wrapping element. */
    ref?: Ref<HTMLUListElement>;
}
export declare const StyledTreeListItem: import("styled-components").StyledComponent<"li", import("styled-components").DefaultTheme, {}, never>;
export declare const StyledTreeList: import("styled-components").StyledComponent<"ul", import("styled-components").DefaultTheme, {}, never>;
interface TreeItemProps extends TreeNode {
    nodeRenderer: NonNullable<TreeProps['nodeRenderer']>;
    depth: number;
    hasParentSibling: boolean;
}
declare const Tree: <T extends TreeNode = TreeNode>(props: TreeProps<T> & ForwardProps) => JSX.Element | null;
export default Tree;
//# sourceMappingURL=Tree.d.ts.map