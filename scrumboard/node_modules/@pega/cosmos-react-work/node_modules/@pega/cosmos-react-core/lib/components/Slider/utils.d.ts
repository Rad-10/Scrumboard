import SliderProps, { TickDefinition } from './Slider.types';
/**
 * The function accepts ticks map and produces an array of tick definitions. The definition
 * consist of tick value, its label and starting and ending index.
 * Function can stretch the ticks regions to allow more text to fit in the cell.
 * To calculate the stretched regions: {min} and {max} values produce the line which is then
 * divided to equal segments. These segments have indices that correspond to CSS grid cells.
 * Then the indices are optimized in the way that every segment is stretched by the half of length
 * between current tick's index and previous tick's index or next tick's index whichever is smaller.
 * |______________|__________|________________________|
 * 1------^  ^----2----^^----3----^      ^------------4
 * @param ticksMap ticks configuration to calculate ticks definition from
 * @param min minimum allowed value in the range
 * @param max maximum allowed value in the range
 * @param step step in the range
 * @param stretch flag indicating the regions should be stretched
 * @returns ticks definitions array
 */
export declare const calculateTicksRegions: (ticksMap: NonNullable<SliderProps['ticks']>, min: number, max: number, step: number, stretch: boolean) => TickDefinition[];
/**
 * Function for given input returns nearest discrete value from a series {min, max}
 * @param input the value to look for nearest value
 * @param step step value determining discrete series
 * @param min minimal value in the series
 * @param max maximum value in the series
 * @returns nearest value as a number
 */
export declare const getNearestValue: (input: number, min: number, max: number, step: number) => number;
/**
 * Function calculates minimum length of the field where any value from the set of possible values will fit in.
 * @param min minimum value
 * @param max maximum value
 * @param step step in range
 * @returns minimum number of characters the field needs
 */
export declare const calculateValueLength: (min: number, max: number, step: number) => number;
//# sourceMappingURL=utils.d.ts.map