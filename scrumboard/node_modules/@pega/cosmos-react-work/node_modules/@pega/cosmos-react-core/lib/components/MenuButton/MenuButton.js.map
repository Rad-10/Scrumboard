{"version":3,"file":"MenuButton.js","sourceRoot":"","sources":["../../../src/components/MenuButton/MenuButton.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n  forwardRef,\n  useState,\n  FunctionComponent,\n  KeyboardEvent,\n  MouseEventHandler,\n  MouseEvent,\n  UIEvent,\n  PropsWithoutRef,\n  useCallback,\n  KeyboardEventHandler\n} from 'react';\nimport styled, { css } from 'styled-components';\n\nimport { BaseProps, ForwardProps, NoChildrenProp, OmitStrict } from '../../types';\nimport { defaultThemeProp } from '../../theme';\nimport { useConsolidatedRef, useUID, useFocusWithin, useDirection } from '../../hooks';\nimport Button, { ButtonProps, StyledButton } from '../Button';\nimport Popover, { PopoverProps, StyledPopover } from '../Popover';\nimport Menu from '../Menu';\nimport { AcceptedMouseEventElement } from '../Menu/Menu.types';\nimport Icon, { registerIcon } from '../Icon';\nimport * as arrowMicroDownIcon from '../Icon/icons/arrow-micro-down.icon';\nimport Text from '../Text';\nimport { Count } from '../Badges';\nimport type { MenuProps } from '../Menu/Menu.types';\nimport type { CountProps } from '../Badges/Count';\n\nregisterIcon(arrowMicroDownIcon);\n\nexport interface MenuButtonProps extends BaseProps, NoChildrenProp {\n  /** The text for the MenuButton also used to set the aria-label. */\n  text: string;\n  /**\n   * Determines the Button variant for the MenuButton.\n   * @default \"secondary\"\n   */\n  variant?: ButtonProps['variant'];\n  /** The name of the icon for the MenuButton. */\n  icon?: string;\n  /** Only display the icon. The text prop will be forwarded to a tooltip. */\n  iconOnly?: ButtonProps['icon'];\n  /** The total count representing the list data which was selected. */\n  count?: CountProps['children'];\n  /** The click handler for the MenuButton. */\n  onClick?: MouseEventHandler;\n  /** Menu related props. */\n  menu?: MenuProps;\n  /** Popover related props. */\n  popover?: OmitStrict<PopoverProps, 'show' | 'target' | 'children'>;\n  /** DOM id for the button element. */\n  id?: string;\n  /** Ref for the button element. */\n  ref?: ButtonProps['ref'];\n  /** The keydown handler for the MenuButton. */\n  onKeyDown?: KeyboardEventHandler;\n}\n\nconst StyledMenuButton = styled.button(\n  ({\n    theme: {\n      base: { spacing }\n    }\n  }) => {\n    return css`\n      gap: ${spacing};\n      flex-shrink: 0;\n      white-space: nowrap;\n\n      & + ${StyledPopover} + ${StyledButton} {\n        margin-inline-start: ${spacing};\n      }\n    `;\n  }\n);\n\nStyledMenuButton.defaultProps = defaultThemeProp;\n\nconst StyledMenuButtonPopover = styled(Popover)`\n  min-width: 20ch;\n`;\n\nconst MenuButton: FunctionComponent<ForwardProps & MenuButtonProps> = forwardRef(\n  (props: PropsWithoutRef<MenuButtonProps>, ref: MenuButtonProps['ref']) => {\n    const uid = useUID();\n    const {\n      id = uid,\n      text,\n      menu,\n      popover,\n      onClick,\n      onKeyDown,\n      icon,\n      count,\n      iconOnly = false,\n      ...restProps\n    } = props;\n\n    const [isOpen, setIsOpen] = useState(false);\n\n    const buttonRef = useConsolidatedRef(ref);\n    const popoverRef = useConsolidatedRef<HTMLDivElement>(popover?.ref);\n    const menuRef = useConsolidatedRef<HTMLDivElement>(menu?.ref);\n\n    // FIXME: Type assertion required for issue in useFocusWithin generic\n    useFocusWithin<HTMLElement>(\n      [popoverRef, buttonRef],\n      useCallback(isFocused => {\n        if (!isFocused) setIsOpen(false);\n      }, [])\n    );\n\n    const { rtl } = useDirection();\n\n    return (\n      <>\n        <Button\n          as={StyledMenuButton}\n          {...restProps}\n          id={id}\n          ref={buttonRef}\n          aria-expanded={isOpen}\n          aria-haspopup='menu'\n          aria-controls={`${id}-popover`}\n          aria-label={text}\n          label={iconOnly && !isOpen ? text : undefined}\n          onClick={(e: MouseEvent<HTMLButtonElement> & UIEvent<HTMLButtonElement>) => {\n            // clickCount is 0 when triggered by keyboard.\n            const clickCount = e.detail;\n\n            // Close the menu if it is open and either:\n            //   It is a *mouse* click on the button.\n            //   Or, the menu mode is not multiselect.\n            if (isOpen && (clickCount > 0 || menu?.mode !== 'multi-select')) {\n              setIsOpen(false);\n            } else {\n              setIsOpen(true);\n            }\n\n            onClick?.(e);\n          }}\n          onKeyDown={(e: KeyboardEvent) => {\n            if (e.key === 'Escape') setIsOpen(false);\n            onKeyDown?.(e);\n          }}\n          icon={iconOnly}\n        >\n          {icon && <Icon name={icon} />}\n          {!iconOnly && (\n            <Text>\n              {text} {count !== undefined && <Count>{count}</Count>}\n              {text && <Icon name='arrow-micro-down' />}\n            </Text>\n          )}\n        </Button>\n        <StyledMenuButtonPopover\n          placement={rtl ? 'bottom-end' : 'bottom-start'}\n          id={`${id}-popover`}\n          {...popover}\n          hideOnTargetHidden\n          show={!!menu && isOpen}\n          target={buttonRef.current}\n          ref={popoverRef}\n        >\n          {menu && (\n            <Menu\n              {...menu}\n              ref={menuRef}\n              items={menu.items}\n              onItemClick={(itemId, e) => {\n                if (\n                  menu.mode !== 'multi-select' &&\n                  (e as MouseEvent<AcceptedMouseEventElement> & UIEvent<AcceptedMouseEventElement>)\n                    .detail > 0\n                ) {\n                  setIsOpen(false);\n                }\n                menu.onItemClick?.(itemId, e);\n              }}\n              focusControlEl={buttonRef.current || undefined}\n            />\n          )}\n        </StyledMenuButtonPopover>\n      </>\n    );\n  }\n);\n\nexport default MenuButton;\n"]}