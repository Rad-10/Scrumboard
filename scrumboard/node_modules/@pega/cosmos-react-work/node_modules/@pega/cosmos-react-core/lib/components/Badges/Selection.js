import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef } from 'react';
import styled, { css } from 'styled-components';
import { mix, transparentize } from 'polished';
import { tryCatch } from '../../utils/utils';
import BareButton, { StyledBareButton } from '../Button/BareButton';
import Icon, { registerIcon, StyledIcon } from '../Icon';
import * as timesIcon from '../Icon/icons/times.icon';
import { useConsolidatedRef, useI18n } from '../../hooks';
import { defaultThemeProp } from '../../theme';
registerIcon(timesIcon);
export const StyledSelectable = styled.button(({ theme: { base: { spacing, palette, 'border-radius': borderRadius }, components: { badges: { selectable } } } }) => {
    const { foreground, background } = selectable.base;
    const { dark, 'primary-background': primaryBackground, interactive } = palette;
    const displayBackground = tryCatch(() => mix(0.15, background, primaryBackground));
    const hoverBorder = tryCatch(() => mix(0.3, background, primaryBackground));
    const boxShadowColor = tryCatch(() => transparentize(0.45, dark));
    const height = 1.125;
    return css `
      background: ${displayBackground};
      border: 0 solid transparent;
      border-radius: calc(${height} * ${borderRadius});
      color: ${foreground};
      cursor: default;
      display: inline-flex;
      align-items: center;
      font-size: 0.75rem;
      height: ${height}rem;
      padding: 0 ${spacing};
      min-width: max-content;
      line-height: 1;

      &:hover {
        color: ${interactive};
        box-shadow: inset 0 0 0 0.0625rem ${hoverBorder};

        ${StyledBareButton} {
          color: ${interactive};
        }
      }

      &:active {
        box-shadow: inset 0 0 0 0.0625rem ${background};
      }

      &:focus {
        color: ${interactive};
        box-shadow: 0 0 0.5rem -0.125rem ${boxShadowColor}, inset 0 0 0 0.125rem ${background};
        outline: none;

        ${StyledBareButton} {
          color: ${interactive};
        }
      }

      ${StyledIcon} {
        margin-inline-start: ${spacing};
        height: 1em;
        width: 1em;
      }
    `;
});
StyledSelectable.defaultProps = defaultThemeProp;
const Selectable = forwardRef(({ id, children, onSelect, onRemove, onClick, onKeyUp, ...restProps }, ref) => {
    const consolidatedRef = useConsolidatedRef(ref);
    const t = useI18n();
    const handleClick = (e) => {
        onClick?.(e);
        onSelect?.(id);
    };
    const handleCloseClick = (e) => {
        e.preventDefault();
        e.stopPropagation();
        onRemove?.(id);
    };
    const handleKeyUp = (e) => {
        onKeyUp?.(e);
        if (e.key === 'Enter') {
            onSelect?.(id);
        }
        if (e.key === 'Backspace' || e.key === 'Delete') {
            onRemove?.(id);
        }
    };
    return (_jsxs(StyledSelectable, { ref: consolidatedRef, onClick: handleClick, onKeyUp: handleKeyUp, ...restProps, children: [children, onRemove && (_jsx(BareButton, { tabIndex: '-1', onClick: handleCloseClick, "aria-label": `${t('remove')}`, children: _jsx(Icon, { name: 'times' }) }))] }));
});
export default Selectable;
//# sourceMappingURL=Selection.js.map