import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState, useEffect, useRef } from 'react';
import Flex from '../../Flex';
import MonthInput from '../Input/MonthInput';
import Button from '../../Button';
import Icon, { registerIcon } from '../../Icon';
import * as caretLeftIcon from '../../Icon/icons/caret-left.icon';
import * as caretRightIcon from '../../Icon/icons/caret-right.icon';
import { useConfiguration, useDirection, useI18n } from '../../../hooks';
import { getCalendarTypeFromLocale, toUTCDateString } from '../Input/utils';
import { CALENDAR_TYPES } from '../Input/local';
import Calendar from './Calendar';
import { ScreenReaderOnly } from './Calendar.styles';
import { isValidDate } from './utils';
import { StyledDatePicker, StyledMonthPicker } from './DatePicker.styles';
registerIcon(caretLeftIcon, caretRightIcon);
function toDateString(date) {
    return date ? toUTCDateString(date) : undefined;
}
const DatePicker = ({ selected: initial, onChange, min, max, mode = 'date', showWeekNumber, ...restProps }) => {
    const { locale } = useConfiguration();
    const t = useI18n();
    const [selected, setSelected] = useState(initial);
    const [current, setCurrent] = useState(selected && isValidDate(selected) ? selected : new Date());
    useEffect(() => {
        if (toDateString(initial) !== toDateString(selected)) {
            setSelected(initial);
            setCurrent(initial || new Date());
        }
    }, [toDateString(initial)]);
    const calendarRef = useRef(null);
    useEffect(() => {
        // need to postpone focusing to make sure onFocusWithin has been attached
        setTimeout(() => {
            calendarRef.current?.querySelector('button[tabindex="0"]:enabled')?.focus();
        });
    }, []);
    const calendarType = getCalendarTypeFromLocale(locale);
    const { start, end } = useDirection();
    return (_jsxs(StyledDatePicker, { "aria-label": t('calendar'), role: 'region', ...restProps, children: [_jsxs(Flex, { as: StyledMonthPicker, container: { justify: 'between', alignItems: 'center' }, children: [_jsx(Button, { variant: 'simple', icon: true, onClick: () => {
                            const newCurrent = new Date(current);
                            newCurrent.setUTCMonth(newCurrent.getUTCMonth() - 1);
                            setCurrent(newCurrent);
                        }, "aria-label": t('picker_prev_month'), children: _jsx(Icon, { name: `caret-${start}` }) }), _jsx(MonthInput, { value: current, required: true, role: 'group', "aria-label": t('picker_jump_to_month_and_year'), onChange: ({ valueAsTimestamp }) => {
                            const newCurrent = new Date(valueAsTimestamp);
                            newCurrent.setUTCDate(current.getUTCDate());
                            setCurrent(newCurrent);
                        }, min: min, max: max }), _jsx(ScreenReaderOnly, { "aria-live": 'polite', role: 'alert', children: current.toLocaleString(locale, { month: 'long', year: 'numeric', timeZone: 'UTC' }) }), _jsx(Button, { variant: 'simple', icon: true, onClick: () => {
                            const newCurrent = new Date(current);
                            newCurrent.setUTCMonth(newCurrent.getUTCMonth() + 1);
                            setCurrent(newCurrent);
                        }, "aria-label": t('picker_next_month'), children: _jsx(Icon, { name: `caret-${end}` }) })] }), _jsx(Flex, { container: { wrap: 'nowrap' }, dir: 'ltr', children: _jsx(Calendar, { ref: calendarRef, selected: selected && isValidDate(selected) ? selected : undefined, current: current, calendarType: mode === 'date' ? calendarType : CALENDAR_TYPES.ISO_8601, showWeekNumber: showWeekNumber, mode: mode, onFocus: date => {
                        setCurrent(date);
                    }, onSelect: date => {
                        setCurrent(date);
                        setSelected(date);
                        onChange?.(date);
                    }, min: min, max: max }) })] }));
};
export default DatePicker;
//# sourceMappingURL=DatePicker.js.map