import { ReactNode, FunctionComponent } from 'react';
import { BaseProps, ForwardProps, NoChildrenProp } from '../../types';
export declare type FieldValueVariant = 'inline' | 'stacked';
export interface FieldValueListItemProps {
    id?: string;
    name: string;
    value?: ReactNode;
    variant?: FieldValueVariant;
}
export interface FieldValueListProps extends BaseProps, NoChildrenProp {
    /** The set of field values to render in the list. */
    fields: FieldValueListItemProps[];
    /**
     * Determines if the field and values should be displayed on the same line, or stacked with the field above the value.
     * @default "inline"
     */
    variant?: FieldValueVariant | 'value-comparison';
}
export declare const StyledFieldName: import("styled-components").StyledComponent<"dt", import("styled-components").DefaultTheme, {}, never>;
export declare const StyledFieldValue: import("styled-components").StyledComponent<"dd", import("styled-components").DefaultTheme, {}, never>;
export declare type StyledFieldValueListProps = Pick<FieldValueListProps, 'variant'>;
export declare const StyledFieldValueList: import("styled-components").StyledComponent<"dl", import("styled-components").DefaultTheme, StyledFieldValueListProps, never>;
export declare const StyledStackedFieldValue: import("styled-components").StyledComponent<"div", import("styled-components").DefaultTheme, {}, never>;
export declare const FieldValueItem: ({ name, value, variant }: FieldValueListItemProps) => JSX.Element;
declare const FieldValueList: FunctionComponent<FieldValueListProps & ForwardProps>;
export default FieldValueList;
//# sourceMappingURL=FieldValueList.d.ts.map