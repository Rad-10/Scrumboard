import styled, { css } from 'styled-components';
import { size } from 'polished';
import Flex from '../Flex';
import { defaultThemeProp } from '../../theme';
import BareButton from '../Button/BareButton';
import Popover from '../Popover';
import { StyledText } from '../Text';
import { calculateFontSize } from '../../styles';
import { useDirection } from '../../hooks';
export const CurrentStepPopover = styled(Popover) `
  max-width: 100%;
  background-color: transparent;
  z-index: 0;
  box-shadow: none;

  & > ${StyledText} {
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
  }
`;
export const StyledBar = styled.div(({ theme }) => {
    const { base: { palette: { 'border-line': borderColor } } } = theme;
    return css `
    position: absolute;
    width: 100%;
    height: 0.0625rem;
    background: ${borderColor};
  `;
});
StyledBar.defaultProps = defaultThemeProp;
export const StyledFill = styled.div(({ theme }) => {
    const { base: { animation: { speed: animationSpeed, timing: { ease: animationTiming } }, palette: { interactive } } } = theme;
    const { ltr } = useDirection();
    return css `
    position: absolute;
    width: 100%;
    height: 100%;
    background: ${interactive};
    transition: all calc(2 * ${animationSpeed}) ${animationTiming};
    transform: scaleX(var(--fillScale));
    transform-origin: ${ltr ? 0 : '100%'} 0;
  `;
});
StyledFill.defaultProps = defaultThemeProp;
export const StyledFormProgress = styled(Flex)(({ theme }) => {
    const { base: { spacing, 'font-size': fontSize, 'font-scale': fontScale }, components: { text: { h4: { 'font-size': h4fontSize } } } } = theme;
    const fontSizes = calculateFontSize(fontSize, fontScale);
    return css `
    position: relative;
    padding-block-start: calc(${spacing} + ${fontSizes[h4fontSize]} * 1.35);
  `;
});
StyledFormProgress.defaultProps = defaultThemeProp;
export const StepMarker = styled(BareButton)(({ current, depth, prior, theme }) => {
    const { base: { 'font-size': fontSize, 'font-scale': fontScale, animation: { speed: animationSpeed, timing: { ease: animationTiming } }, palette: { interactive, 'primary-background': primaryBackground }, shadow: { focus: focusShadow }, 'hit-area': { 'mouse-min': buttonSize, 'finger-min': touchButtonSize } }, components: { 'form-control': { 'border-color': borderColor } } } = theme;
    const { m: stepMarkerSize } = calculateFontSize(fontSize, fontScale);
    const smallStepMarkerSize = `calc(${stepMarkerSize} / 1.5)`;
    return css `
    display: block;
    position: relative;
    z-index: 1;
    ${size(depth === 1 ? smallStepMarkerSize : stepMarkerSize)}
    border-radius: 100%;
    background: ${primaryBackground};
    border: 0.0625rem solid ${borderColor};
    transition: all calc(2 * ${animationSpeed}) ${animationTiming};

    ${current &&
        css `
      background: ${interactive};
      border-color: ${interactive};
    `}

    ${prior &&
        css `
      border-color: ${interactive};
    `}

    ::after {
      content: '';
      position: absolute;
      top: ${depth === 1
        ? `calc((${buttonSize} - ${smallStepMarkerSize}) / -2) `
        : `calc((${buttonSize} - ${stepMarkerSize}) / -2) `};
      left: ${depth === 1
        ? `calc((${buttonSize} - ${smallStepMarkerSize}) / -2) `
        : `calc((${buttonSize} - ${stepMarkerSize}) / -2) `};
      ${size(buttonSize)}

      @media (pointer: coarse) {
        top: ${depth === 1
        ? `calc((${touchButtonSize} - ${smallStepMarkerSize}) / -2) `
        : `calc((${touchButtonSize} - ${stepMarkerSize}) / -2) `};
        left: ${depth === 1
        ? `calc((${touchButtonSize} - ${smallStepMarkerSize}) / -2) `
        : `calc((${touchButtonSize} - ${stepMarkerSize}) / -2) `};
        ${size(touchButtonSize)}
      }
    }

    &:first-child::after {
      left: 0;
    }

    &:last-child::after {
      left: unset;
      right: 0;
    }

    :focus {
      box-shadow: ${focusShadow};
    }
  `;
});
StepMarker.defaultProps = defaultThemeProp;
//# sourceMappingURL=FormProgress.styles.js.map