import { jsx as _jsx } from "react/jsx-runtime";
import { forwardRef } from 'react';
import FormField from '../FormField';
import { StyledFormControl } from '../FormControl';
import { hasProp } from '../../utils';
import { useUID } from '../../hooks';
import StyledInput from './Input.styles';
const Input = forwardRef((props, ref) => {
    const uid = useUID();
    const { id = uid, value, defaultValue, required = false, disabled = false, readOnly = false, label, additionalInfo, labelHidden, info, status, actions, onResolveSuggestion, ...restProps } = props;
    const controlProp = {};
    // Conditionally render component as controlled/uncontrolled
    if (hasProp(props, 'value')) {
        controlProp.value = value ?? '';
    }
    else if (hasProp(props, 'defaultValue')) {
        controlProp.defaultValue = defaultValue ?? '';
    }
    const Comp = (_jsx(StyledFormControl, { ...{
            ref,
            id,
            required,
            disabled,
            readOnly,
            status,
            hasSuggestion: !!onResolveSuggestion && status === 'pending',
            ...controlProp,
            ...restProps,
            as: StyledInput
        } }));
    return label ? (_jsx(FormField, { ...{
            additionalInfo,
            label,
            labelHidden,
            id,
            info,
            readOnly,
            status,
            required,
            disabled,
            actions,
            onResolveSuggestion
        }, children: Comp })) : (Comp);
});
export default Input;
//# sourceMappingURL=Input.js.map