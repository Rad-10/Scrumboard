import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef, useCallback, useRef } from 'react';
import styled, { css } from 'styled-components';
import { useConsolidatedRef, useFocusWithin, useI18n, useInputFormatter } from '../../hooks';
import { defaultThemeProp } from '../../theme';
import FormField from '../FormField';
import { StyledFormControl } from '../FormControl';
import StyledInput from '../Input/Input.styles';
import Select, { Option } from '../Select';
import Input from '../Input';
import { StyledSelect } from '../Select/Select';
import Flex from '../Flex';
import callingCodes from './callingCodes';
import { convertToCallbackParameter, formatPhoneNumber, getPhoneNumberParts } from './utils';
const StyledPhoneInput = styled.div(() => {
    return css `
    border: 0;
    > ${StyledSelect} {
      max-width: max-content;
      border-inline-end: none;
      border-start-end-radius: 0;
      border-end-end-radius: 0;
    }

    > ${StyledSelect} + ${StyledInput} {
      border-start-start-radius: 0;
      border-end-start-radius: 0;
    }
  `;
});
StyledPhoneInput.defaultProps = defaultThemeProp;
const PhoneInput = forwardRef((props, ref) => {
    const { value, id, label, labelHidden, info, status, required, readOnly, disabled, showCountryCode = false, callingCodesList = callingCodes, onChange, onBlur, onFocus, onResolveSuggestion, additionalInfo, ...restProps } = props;
    const t = useI18n();
    const [countryCode = callingCodesList[0], subscriberNumber = ''] = value
        ? getPhoneNumberParts(value, callingCodesList)
        : [];
    const onFocusChange = (focused) => {
        const callbackParam = convertToCallbackParameter(countryCode, subscriberNumber);
        if (focused)
            onFocus?.(callbackParam);
        else
            onBlur?.(callbackParam);
    };
    const onInputChange = (e) => {
        onChange?.(convertToCallbackParameter(countryCode, e.target.value));
    };
    const onSelectChange = (e) => {
        onChange?.(convertToCallbackParameter(e.target.value, subscriberNumber));
    };
    const inputRef = useConsolidatedRef(ref);
    const containerRef = useRef(null);
    useFocusWithin([containerRef], onFocusChange);
    const formatter = useCallback(number => {
        return formatPhoneNumber(number.replace(/\D+/g, ''), countryCode);
    }, [countryCode]);
    const formatted = useInputFormatter(inputRef, subscriberNumber, formatter);
    const codesOptions = (_jsx(_Fragment, { children: callingCodesList.map(code => (_jsx(Option, { value: code, children: code }, code))) }));
    const Comp = (_jsxs(StyledPhoneInput, { as: StyledFormControl, forwardedAs: Flex, container: { alignItems: 'center', wrap: 'nowrap' }, ref: containerRef, status: status, readOnly: readOnly, disabled: disabled, children: [showCountryCode && (_jsx(Select, { value: countryCode, "aria-label": t('select_country_code'), onChange: onSelectChange, required: required, status: status, readOnly: readOnly, disabled: disabled, autoComplete: 'tel-country-code', hasSuggestion: status === 'pending' && !!onResolveSuggestion, children: codesOptions })), _jsx(Input, { ...restProps, inputMode: 'tel', ref: inputRef, value: formatted, "aria-label": t('enter_a_number'), onChange: onInputChange, required: required, status: status, readOnly: readOnly, disabled: disabled, autoComplete: 'tel-national', hasSuggestion: status === 'pending' && !!onResolveSuggestion })] }));
    return label ? (_jsx(FormField, { as: 'fieldset', labelAs: 'legend', ...{
            additionalInfo,
            label,
            labelHidden,
            id,
            info,
            status,
            required,
            disabled,
            onResolveSuggestion
        }, children: Comp })) : (Comp);
});
export default PhoneInput;
//# sourceMappingURL=PhoneInput.js.map