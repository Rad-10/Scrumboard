import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import styled, { css } from 'styled-components';
import { defaultThemeProp } from '../../theme';
import Icon, { registerIcon } from '../Icon';
import * as starIcon from '../Icon/icons/star.icon';
import * as starSolidIcon from '../Icon/icons/star-solid.icon';
registerIcon(starIcon, starSolidIcon);
const DEFAULT_MAX_RATING = 5;
const defaultProps = {
    readOnly: false,
    maxRating: DEFAULT_MAX_RATING,
    tabIndex: 0
};
const StyledRating = styled.div `
  display: inline-block;
  vertical-align: middle;
`;
const StyledRatingItemsContainer = styled.div(props => {
    const { theme } = props;
    return css `
    color: ${theme.components.rating.color};
    line-height: 1;
    vertical-align: middle;
    display: inline-block;
  `;
});
StyledRatingItemsContainer.defaultProps = defaultThemeProp;
const StyledPartialRatingContainer = styled.div `
  position: relative;
  display: inline-block;
`;
export const StyledPartialRating = styled.div(props => {
    const { ratingPercentage } = props;
    return css `
    display: inline-block;
    position: absolute;
    inset-inline-start: 0;
    width: ${ratingPercentage}%;
    overflow: hidden;
    white-space: nowrap;
  `;
});
const StyledRatingMetaInfo = styled.span(props => {
    const { theme } = props;
    return css `
    margin-inline-start: ${theme.base.spacing};
  `;
});
StyledRatingMetaInfo.defaultProps = defaultThemeProp;
const RatingItem = (props) => {
    const { fill, ...restProps } = props;
    const fillPercentage = Math.round((100 / 1) * fill);
    return (_jsxs(_Fragment, { children: [fillPercentage === 0 && _jsx(Icon, { ...restProps, name: 'star' }), fillPercentage === 100 && _jsx(Icon, { ...restProps, name: 'star-solid' }), fillPercentage > 0 && fillPercentage < 100 && (_jsxs(StyledPartialRatingContainer, { children: [_jsx(Icon, { ...restProps, name: 'star' }), _jsx(StyledPartialRating, { ratingPercentage: fillPercentage, children: _jsx(Icon, { ...restProps, name: 'star-solid' }) })] }))] }));
};
const Rating = (props) => {
    const starsOutline = [];
    const { 'aria-label': ariaLabel, metaInfo, tabIndex, readOnly, ...restProps } = props;
    let { maxRating, value } = props;
    maxRating = typeof maxRating !== 'number' ? DEFAULT_MAX_RATING : maxRating;
    maxRating = Math.max(1, maxRating);
    value = Math.min(maxRating, value);
    const isDecimalValue = Math.round(value) !== value;
    for (let i = 1; i <= maxRating; i += 1) {
        let fillValue = i <= value ? 1 : 0;
        if (isDecimalValue && Math.ceil(value) === i) {
            fillValue = value - Math.floor(value);
        }
        starsOutline.push(_jsx(RatingItem, { fill: fillValue }, `star-${i}`));
    }
    return (_jsxs(StyledRating, { "aria-label": ariaLabel, tabIndex: tabIndex, ...restProps, children: [_jsx(StyledRatingItemsContainer, { children: starsOutline }), metaInfo && _jsxs(StyledRatingMetaInfo, { children: ["(", metaInfo, ")"] }), ' '] }));
};
Rating.defaultProps = defaultProps;
export default Rating;
//# sourceMappingURL=Rating.js.map