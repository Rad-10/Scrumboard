import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef } from 'react';
import styled, { css } from 'styled-components';
import { getContrast, readableColor } from 'polished';
import { defaultThemeProp } from '../../theme';
import Icon, { registerIcon } from '../Icon';
import * as timesIcon from '../Icon/icons/times.icon';
import * as checkIcon from '../Icon/icons/check.icon';
import * as bulbSolidIcon from '../Icon/icons/bulb-solid.icon';
import * as warnSolidIcon from '../Icon/icons/warn-solid.icon';
import * as flagWaveSolidIcon from '../Icon/icons/flag-wave-solid.icon';
import Button from '../Button';
import { tryCatch } from '../../utils';
import { useI18n } from '../../hooks';
import Flex from '../Flex';
import Text from '../Text';
registerIcon(timesIcon, checkIcon, bulbSolidIcon, warnSolidIcon, flagWaveSolidIcon);
export const StyledBannerMessages = styled.ul(({ theme, inline }) => {
    return css `
    list-style-position: inside;
    ${inline &&
        css `
      display: inline-block;
      margin-inline-end: ${theme.base.spacing};
    `}
  `;
});
StyledBannerMessages.defaultProps = defaultThemeProp;
export const StyledBannerContent = styled.div(({ theme, hasDismiss }) => {
    return css `
    position: relative;
    padding: calc(1.5 * ${theme.base.spacing});
    border: 0.0625rem solid ${theme.base.palette['border-line']};
    border-inline-start: none;
    border-start-end-radius: ${theme.components.card['border-radius']};
    border-end-end-radius: ${theme.components.card['border-radius']};

    ${hasDismiss &&
        css `
      border-inline-end: none;
      padding-inline-end: calc(0.75 * ${theme.base.spacing});
      border-radius: 0;
    `}
  `;
});
StyledBannerContent.defaultProps = defaultThemeProp;
export const StyledBannerMessage = styled.li(({ inline, theme }) => {
    return css `
    color: ${theme.base.palette['foreground-color']};
    word-break: break-word;

    ${inline &&
        css `
      display: inline-block;
      margin-inline-end: ${theme.base.spacing};
    `}
  `;
});
StyledBannerMessage.defaultProps = defaultThemeProp;
export const StyledBannerDismissColumn = styled.div(({ theme }) => {
    return css `
    border-start-end-radius: ${theme.components.card['border-radius']};
    border-end-end-radius: ${theme.components.card['border-radius']};
    border: 0.0625rem solid ${theme.base.palette['border-line']};
    border-inline-start: none;
  `;
});
StyledBannerDismissColumn.defaultProps = defaultThemeProp;
export const StyledBannerDismissButton = styled(Button) ``;
export const StyledBannerStatus = styled.div(({ variant, theme }) => {
    const { background: bg } = theme.components.banner[variant];
    const color = tryCatch(() => getContrast(bg, theme.base.palette['primary-background']) >= 3
        ? theme.base.palette['primary-background']
        : readableColor(bg));
    return css `
    background-color: ${bg};
    width: 3.125rem;
    color: ${color};
    border-start-start-radius: ${theme.components.card['border-radius']};
    border-end-start-radius: ${theme.components.card['border-radius']};
    font-size: 1.25rem;
  `;
});
StyledBannerStatus.defaultProps = defaultThemeProp;
export const StyledBanner = styled.div(({ theme }) => {
    return css `
    background: ${theme.components.card.background};
    border-radius: ${theme.components.card['border-radius']};
  `;
});
StyledBanner.defaultProps = defaultThemeProp;
const Banner = forwardRef(({ variant, heading, headingTag = 'h2', messages, onDismiss, action, id, ...restProps }, ref) => {
    const inline = messages.length === 1;
    const singleLine = inline && !heading;
    const hasDismiss = !!onDismiss;
    let bannerIcon = 'warn-solid';
    let role = 'alert';
    let ariaLive = 'assertive';
    if (variant === 'info') {
        bannerIcon = 'bulb-solid';
        ariaLive = 'polite';
        role = undefined;
    }
    else if (variant === 'success') {
        bannerIcon = 'check';
        ariaLive = 'polite';
        role = undefined;
    }
    else if (variant === 'warning') {
        bannerIcon = 'flag-wave-solid';
    }
    const t = useI18n();
    return (_jsxs(Flex, { ...restProps, container: true, as: StyledBanner, role: role, "aria-live": ariaLive, id: id, ref: ref, children: [_jsx(Flex, { container: { justify: 'center', alignItems: 'center' }, item: { shrink: 0 }, as: StyledBannerStatus, variant: variant, children: _jsx(Icon, { name: bannerIcon }) }), _jsxs(Flex, { container: singleLine ? { alignItems: 'center' } : { direction: 'column', gap: 1 }, item: { grow: 1 }, as: StyledBannerContent, hasDismiss: hasDismiss, children: [heading && (_jsx(Text, { variant: 'h4', as: headingTag, children: heading })), _jsx(StyledBannerMessages, { inline: inline, children: messages.map((msg, index) => (
                        // eslint-disable-next-line react/no-array-index-key
                        _jsx(StyledBannerMessage, { inline: inline, children: msg }, `${msg}+${index}`))) }), action] }), onDismiss && (_jsx(Flex, { container: {
                    direction: 'column',
                    justify: singleLine ? 'center' : undefined,
                    pad: [singleLine ? 0.5 : 1, 0.5, 0.5, 0]
                }, as: StyledBannerDismissColumn, children: _jsx(StyledBannerDismissButton, { variant: 'simple', icon: true, onClick: () => onDismiss(id), "aria-label": t('banner_dismiss_button_label_a11y'), children: _jsx(Icon, { name: 'times' }) }) }))] }));
});
export default Banner;
//# sourceMappingURL=Banner.js.map