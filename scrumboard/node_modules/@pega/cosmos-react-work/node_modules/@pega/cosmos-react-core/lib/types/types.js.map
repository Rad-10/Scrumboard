{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/types/types.ts"],"names":[],"mappings":"","sourcesContent":["import { ElementType, MouseEvent } from 'react';\n\nexport interface BaseProps {\n  /** Additional CSS classes. */\n  className?: string;\n}\n\nexport interface ForwardProps {\n  [prop: string]: unknown;\n}\n\nexport interface NoChildrenProp {\n  children?: never;\n}\n\nexport type HTMLTag = keyof JSX.IntrinsicElements;\nexport interface AsProp {\n  /** HTML tag or React Component to render the component as. */\n  as?: ElementType;\n  /** HTML tag or React Component to finally render the component as. */\n  forwardedAs?: ElementType;\n}\n\nexport interface Action extends ForwardProps {\n  /** A string to uniquely identify this Action within the onClick handler. */\n  id: string;\n  /** The text content of the Action. */\n  text: string;\n  /** The name of the Cosmos Icon to render, if any. */\n  icon?: string;\n  /** A location to navigate to. Passing an href will render a Link styled as a Button. */\n  href?: string;\n  /** Called when the Action is clicked. */\n  onClick?: (\n    id: string,\n    e: MouseEvent<HTMLButtonElement | HTMLAnchorElement | HTMLInputElement>\n  ) => void;\n  /** Determines if the Action will be disabled. */\n  disabled?: boolean;\n}\n\n// https://github.com/microsoft/TypeScript/issues/30825\nexport type OmitStrict<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\nexport type PartialByKey<T extends object, K extends keyof T> = OmitStrict<T, K> &\n  Partial<Pick<T, K>>;\nexport type RequiredByKey<T extends object, K extends keyof T> = OmitStrict<T, K> &\n  Required<Pick<T, K>>;\n\nexport type DeepPartial<T> = T extends (infer U)[]\n  ? DeepPartial<U>[]\n  : T extends object\n  ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : T;\n\nexport type DeepRequired<T> = T extends (infer U)[]\n  ? DeepRequired<U>[]\n  : T extends Function\n  ? T\n  : T extends object\n  ? { [K in keyof T]-?: DeepRequired<T[K]> }\n  : T;\n\n// https://stackoverflow.com/a/49725198\nexport type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<T, Exclude<keyof T, Keys>> &\n  {\n    [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>;\n  }[Keys];\n\n// Lowers type inference precedence without changing the type.\n// https://github.com/Microsoft/TypeScript/issues/14829#issue-216577598\nexport type DeferInfer<T> = T & { [K in keyof T]: T[K] };\n\n/* eslint-disable @typescript-eslint/ban-types */\nexport type PropsWithDefaults<\n  Props extends object = {},\n  Defaults extends keyof Props = never\n> = OmitStrict<Props, Defaults> & Required<Pick<Props, Defaults>>;\n/* eslint-enable @typescript-eslint/ban-types */\n\nexport type PrettyPrint<T> = T extends object\n  ? {\n      [K in keyof T]: T[K];\n    }\n  : T;\n"]}