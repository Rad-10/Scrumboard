import styled, { css } from 'styled-components';
import { lighten, readableColor, rgba } from 'polished';
import { useContext } from 'react';
import { StyledAvatar } from '../Avatar';
import { StyledIcon } from '../Icon';
import { StyledImage } from '../Image/Image';
import { defaultThemeProp } from '../../theme';
import { tryCatch } from '../../utils/utils';
import Flex from '../Flex';
import { readableHue, calculateFontSize } from '../../styles';
import { StyledMenuItem } from '../Menu/Menu.styles';
import { useDirection } from '../../hooks';
import { StyledBareButton } from '../Button/BareButton';
import Button from '../Button';
import { StyledTooltip } from '../Tooltip';
import AppShellContext from './AppShellContext';
export const navWidth = '4rem';
export const navOpenWidth = '18.75rem';
export const headerHeight = '3rem';
/* AppShell styles */
export const StyledAppEnvironment = styled(Flex)(({ color, theme: { base: { spacing, 'font-weight': { bold } }, components: { 'app-shell': { nav: { 'background-color': navColor } } } } }) => {
    const foreground = tryCatch(() => readableHue(color, color), () => readableHue(navColor, navColor));
    const shadow = tryCatch(() => rgba(foreground, 0.1));
    return css `
      background-color: ${color};
      color: ${foreground};
      box-shadow: inset 0 0 0 0.0625rem ${shadow};
      height: calc(${spacing} * 2.5);
      padding: 0 ${spacing};
      text-align: center;
      text-transform: uppercase;
      font-weight: ${bold};
      overflow: hidden;
      text-overflow: ellipsis;
    `;
});
StyledAppEnvironment.defaultProps = defaultThemeProp;
export const StyledAppInfo = styled.a(({ theme }) => {
    const fontSize = calculateFontSize(theme.base['font-size'], theme.base['font-scale']);
    const hoverColor = tryCatch(() => lighten(0.05, theme.components['app-shell'].nav['background-color']));
    return css `
    padding: ${theme.base.spacing} calc(${navWidth} / 4);
    grid-template-columns: calc(${navWidth} / 2) auto;
    column-gap: calc(${navWidth} / 4);

    a&:hover,
    button&:hover {
      background-color: ${hoverColor};
      text-decoration: none;
    }

    &:focus:not([disabled]) {
      outline: none;
      box-shadow: inset ${theme.base.shadow['focus-inverted']};
    }

    ${StyledImage} {
      display: inline-block;
      width: calc(${navWidth} / 2);
    }

    span {
      overflow: hidden;
      text-overflow: ellipsis;
    }

    span:last-of-type {
      font-size: ${fontSize.xs};
      color: rgba(255, 255, 255, 0.7);
    }

    span:first-of-type {
      font-size: ${fontSize.s};
      color: ${theme.base.colors.white};
    }
  `;
});
StyledAppInfo.defaultProps = defaultThemeProp;
export const StyledScrollWrap = styled.div(() => {
    return css `
    flex-grow: 1;
    overflow-x: hidden;
    overflow-y: auto;
  `;
});
StyledScrollWrap.defaultProps = defaultThemeProp;
export const StyledCountIcon = styled.span(({ theme: { base: { spacing } } }) => {
    return css `
      position: absolute;
      inset-inline-start: calc(4 * ${spacing});
      top: calc(0.5 * ${spacing});
      padding: 0 calc(0.5 * ${spacing});
    `;
});
StyledCountIcon.defaultProps = defaultThemeProp;
export const StyledAppShellNavIcon = styled.svg ``;
export const StyledUtilIconCount = styled.span `
  flex-shrink: 0;
`;
export const StyledAppNav = styled.nav(({ appHeader, showEnv, theme }) => {
    const { navOpen } = useContext(AppShellContext);
    return css `
      position: fixed;
      z-index: calc(${theme.base['z-index'].backdrop} - 1);
      background: ${theme.components['app-shell'].nav['background-color']};
      max-width: calc(100vw - ${theme.base['hit-area']['mouse-min']});
      width: ${navOpen ? navOpenWidth : navWidth};
      height: calc(100vh - ${appHeader ? headerHeight : '0rem'});
      overflow: hidden;
      white-space: nowrap;
      transition: width ${`${theme.base.animation.speed} ${theme.base.animation.timing.ease}`};
      padding-block-end: ${theme.base.spacing};

      ${!showEnv &&
        css `
        padding-block-start: ${theme.base.spacing};
      `}

      @media (pointer: coarse) {
        max-width: calc(100vw - ${theme.base['hit-area']['finger-min']});
      }

      ${theme.base['custom-scrollbar'] &&
        css `
        * {
          scrollbar-color: rgba(255, 255, 255, 0.6) rgba(0, 0, 0, 0.2);
          scrollbar-width: thin;
        }

        @supports not ((scrollbar-width: thin) or (scrollbar-color: black white)) {
          /* stylelint-disable unit-allowed-list */

          *::-webkit-scrollbar {
            width: 12px;
            height: 12px;
          }

          *::-webkit-scrollbar-track {
            background-color: rgba(0, 0, 0, 0.2);
          }

          *::-webkit-scrollbar-corner {
            background-color: rgba(0, 0, 0, 0.2);
            border-bottom-right-radius: inherit;
          }

          *::-webkit-scrollbar-thumb {
            background-color: transparent;
            border: 3px solid transparent;
            border-radius: calc(1.125 * ${theme.base['border-radius']});
            box-shadow: inset 0 0 2px 4px rgba(255, 255, 255, 0.6);
          }

          *::-webkit-scrollbar-thumb:hover {
            box-shadow: inset 0 0 2px 4px rgba(255, 255, 255, 0.7);
          }

          *::-webkit-scrollbar-track:horizontal {
            border-bottom-left-radius: inherit;
          }

          *::-webkit-scrollbar-track:vertical {
            border-top-right-radius: inherit;
          }

          /* stylelint-disable-next-line selector-pseudo-class-no-unknown */
          *::-webkit-scrollbar-track:not(:corner-present) {
            border-bottom-right-radius: inherit;
          }

          /* stylelint-enable unit-allowed-list */
        }
      `}
    `;
});
StyledAppNav.defaultProps = defaultThemeProp;
export const StyledCaseClose = styled.button ``;
export const StyledNavListItem = styled.li(({ theme, nestedListCollapsed }) => {
    const { navOpen } = useContext(AppShellContext);
    const activeBackground = tryCatch(() => rgba('#000000', theme.base.transparency['transparent-4']));
    const { rtl } = useDirection();
    return css `
    display: block;
    position: relative;
    ${StyledIcon} {
      font-size: 1.25rem;
    }

    ${StyledCaseClose} {
      display: flex;
      position: absolute;
      left: ${navOpen ? 'auto' : '100%'};
      opacity: 0;
      &:hover,
      &:focus {
        ${navOpen &&
        css `
          opacity: 1;
        `}
      }
      ${navOpen &&
        css `
        inset-inline-end: 1rem;
      `}
      top: 50%;
      bottom: 50%;
      margin: auto 0;
      color: rgba(255, 255, 255, 0.7);
      transition-property: transform, opacity;
      transition-duration: ${theme.base.animation.speed};
      transition-timing-function: ${theme.base.animation.timing.ease};
    }

    > :first-child {
      position: relative;
      display: flex;
      align-items: center;
      width: 100%;
      padding: calc(1.25 * ${theme.base.spacing}) 0;
      white-space: nowrap;
      color: rgba(255, 255, 255, 0.7);
      cursor: pointer;
      font-weight: ${theme.base['font-weight']['semi-bold']};
      text-decoration: none;

      span:not(${StyledCountIcon}) {
        overflow: hidden;
        text-overflow: ellipsis;
        color: inherit;
        white-space: nowrap;
      }

      &:hover,
      &:focus {
        color: #ffffff;
        background: rgba(255, 255, 255, 0.05);
      }

      &:hover + ${StyledCaseClose}, &:focus + ${StyledCaseClose} {
        ${navOpen &&
        css `
          opacity: 1;
        `}
      }

      &:focus {
        outline: none;
        box-shadow: inset ${theme.base.shadow['focus-inverted']};
      }

      ${StyledAppShellNavIcon}:last-child {
        position: absolute;
        left: ${navOpen ? 'auto' : '100%'};
        ${navOpen &&
        css `
          inset-inline-end: 1rem;
        `}
        margin: 0;
        opacity: ${navOpen ? '1' : '0'};
        transition-property: transform, opacity;
        transition-duration: ${theme.base.animation.speed};
        transition-timing-function: ${theme.base.animation.timing.ease};

        ${!nestedListCollapsed &&
        css `
          transform: rotateZ(${rtl ? '-90deg' : '90deg'});
        `}
      }

      ${StyledAppShellNavIcon}:first-child {
        flex-shrink: 0;
        margin: 0 calc((${navWidth} - 1.125rem) / 2);
      }
    }

    &[aria-current='page'] > :first-child {
      color: ${theme.base.colors.blue.light};
      background-color: ${activeBackground};
    }
  `;
});
StyledNavListItem.defaultProps = defaultThemeProp;
export const StyledNavList = styled.ul ``;
export const StyledNavCasesList = styled.div(({ theme }) => {
    return css `
    ${StyledNavListItem} {
      > :first-child {
        padding: ${theme.base.spacing} 0;
      }
    }
  `;
});
StyledNavCasesList.defaultProps = defaultThemeProp;
export const StyledNestedNavList = styled(StyledNavList)(({ theme }) => {
    const background = tryCatch(() => rgba('#000000', theme.base.transparency['transparent-4']));
    return css `
    background: ${background};

    ${StyledNavListItem} {
      > :first-child {
        padding-inline-start: ${navWidth};
        font-weight: ${theme.base['font-weight'].normal};
      }
    }
  `;
});
StyledNestedNavList.defaultProps = defaultThemeProp;
export const StyledCaseTypes = styled.div(props => {
    const { theme: { base: { animation: { speed, timing: { ease: acceleration } } } } } = props;
    return css `
    button {
      ${StyledIcon}:first-of-type {
        transition: transform ${speed} ${acceleration};
      }

      &[aria-expanded='false'] ${StyledIcon}:first-of-type {
        transform: none;
      }

      &[aria-expanded='true'] ${StyledIcon}:first-of-type {
        transform: rotateZ(45deg);
      }
    }
  `;
});
StyledCaseTypes.defaultProps = defaultThemeProp;
export const StyledUtils = styled.div(({ theme }) => {
    const borderColor = tryCatch(() => lighten(0.1, theme.components['app-shell'].nav['background-color']));
    return css `
    border-top: 0.0625rem solid ${borderColor};
    li ${StyledAvatar} {
      flex-shrink: 0;
      margin: 0 calc((${navWidth} - ${theme.base['hit-area']['mouse-min']}) / 2);
      font-weight: ${theme.base['font-weight'].normal};
    }

    ${StyledBareButton} > ${StyledIcon}:first-child, ${StyledBareButton} > ${StyledUtilIconCount} {
      flex-shrink: 0;
      margin: 0 calc((${navWidth} - 1.125rem) / 2);
    }
  `;
});
StyledUtils.defaultProps = defaultThemeProp;
/* Mobile AppShell styles */
export const StyledMobileNav = styled.header(({ theme }) => {
    const mobileNavColor = theme.base.palette['brand-primary'];
    const contrastColor = tryCatch(() => readableColor(mobileNavColor));
    return css `
    min-width: 100%;
    min-height: ${headerHeight};
    z-index: ${theme.base['z-index'].drawer};
    background-color: ${mobileNavColor};
    color: ${contrastColor};
    position: sticky;
    top: 0;
    padding-inline-start: ${theme.base.spacing};

    @media (pointer: coarse) {
      padding-inline-start: 0;
    }
  `;
});
StyledMobileNav.defaultProps = defaultThemeProp;
export const StyledLoading = styled.div `
  font-size: 2rem;
`;
/* Main content region styles */
export const StyledAppMain = styled.main(({ appHeader, mobileNav, navOpen, headerOffset = 0, theme }) => {
    const heightOffset = appHeader || mobileNav ? headerHeight : '0rem';
    return css `
    --appshell-offset: ${headerOffset}px;

    /* stylelint-disable-next-line length-zero-no-unit */
    --appshell-horizontal-offset: 0rem;

    @media (min-width: ${theme.base.breakpoints.sm}) {
      --appshell-horizontal-offset: ${navOpen ? navOpenWidth : navWidth};
    }
    position: relative;
    margin-inline-start: ${mobileNav ? 0 : navWidth};
    min-height: calc(100vh - ${heightOffset});
    background-color: ${theme.base.palette['app-background']};

    :focus {
      outline: none;
    }

    ${navOpen &&
        !mobileNav &&
        css `
      margin-inline-start: ${navOpenWidth};
    `}

    ${!mobileNav &&
        css `
      transition: margin-inline-start
        ${`${theme.base.animation.speed} ${theme.base.animation.timing.ease}`};
    `}
  `;
});
StyledAppMain.defaultProps = defaultThemeProp;
export const StyledBannerRegion = styled.div(({ theme }) => {
    return css `
    padding: calc(2 * ${theme.base.spacing});
  `;
});
StyledBannerRegion.defaultProps = defaultThemeProp;
export const StyledAppShellTooltip = styled(StyledTooltip)(({ theme }) => {
    return css `
    background-color: ${theme.components.tooltip['background-color']};
    padding: 0;
    header {
      border-bottom: none;
    }
    ${StyledMenuItem} {
      background-color: ${theme.components.tooltip['background-color']};
      color: ${theme.base.palette.light};

      &:hover,
      &:focus {
        background-color: ${theme.components.tooltip['background-color']};
        box-shadow: ${theme.base.shadow['focus-inverted']};
      }
    }
  `;
});
StyledAppShellTooltip.defaultProps = defaultThemeProp;
export const StyledAppShellToggleButton = styled(Button)(({ theme, open }) => {
    return css `
    background-color: ${theme.base.palette.dark};
    color: ${theme.base.palette.light};
    border: none;
    margin-top: calc(1 * ${theme.base.spacing});
    ${open &&
        css `
      padding-inline: 1rem;
    `}

    ${StyledIcon} {
      width: 1.25rem;
      height: 1.25rem;
      font-weight: bold;
    }

    &:enabled:focus,
    :not([disabled]):focus {
      box-shadow: ${theme.base.shadow['focus-inverted']};
    }
  `;
});
StyledAppShellToggleButton.defaultProps = defaultThemeProp;
//# sourceMappingURL=AppShell.styles.js.map