import { Ref } from 'react';
import { BaseProps, NoChildrenProp } from '../../types';
import { FormControlProps } from '../FormControl';
export declare type ObfuscationMode = 'none' | 'partial' | 'full';
export interface FormattingOptions {
    obfuscation?: ObfuscationMode;
}
export interface CreditCardDisplayProps extends BaseProps, NoChildrenProp {
    /** Number value. */
    value?: string;
    /** Options to define formatting. */
    formattingOptions?: {
        /**
         * Defines if the obfuscation (replacing digits with bullets) should be applied.
         * This is only visual obfuscation, the real one should be applied on the server side.
         * Characters that are going to be obfuscated may be random characters or even missing.
         * @default 'none'
         */
        obfuscation?: ObfuscationMode;
    };
    /** Ref for the wrapping element. */
    ref?: Ref<HTMLSpanElement>;
}
export interface CreditCardInputProps extends BaseProps, NoChildrenProp {
    /**
     * Sets DOM id for the control and associates label element via 'for' attribute.
     * If an id is not pass, a random id will be generated for any render.
     */
    id?: FormControlProps['id'];
    /** Set visual state based on a validation state. */
    status?: FormControlProps['status'];
    /** Pass a string or a fragment with an Icon and string. */
    label?: FormControlProps['label'];
    /**
     * Visually hides the label region.
     * @default false
     */
    labelHidden?: FormControlProps['labelHidden'];
    /** It is recommended to pass a simple string to offer guidance. Text will be styled based on status prop. */
    info?: FormControlProps['info'];
    /** Indicate if the field is required. The browser defaults to false. */
    required?: FormControlProps['required'];
    /** Placeholder text. The browser defaults to an empty string. */
    placeholder?: string;
    /** Disable the control. The browser defaults to false. */
    disabled?: FormControlProps['disabled'];
    /** Makes the component non editable and non clickable. The browser defaults to false. */
    readOnly?: FormControlProps['readOnly'];
    /** Sets html name attribute for the underlying control. Useful for mapping to a data field. */
    name?: FormControlProps['name'];
    /**
     * CurrencyInput input value.
     * Requires an onChange handler to update value.
     * @default ''
     */
    value?: string;
    /** Callback fired when input value changes. */
    onChange: (value?: string) => void;
    /** Callback fired when the component loses focus. */
    onFocus?: (value?: string) => void;
    /** Callback fired when the component loses focus. */
    onBlur?: (value?: string) => void;
    /** Pass a heading and content to show additional information on the field. */
    additionalInfo?: FormControlProps['additionalInfo'];
    /** Ref for the wrapping element. */
    ref?: Ref<HTMLInputElement>;
}
//# sourceMappingURL=CreditCard.types.d.ts.map