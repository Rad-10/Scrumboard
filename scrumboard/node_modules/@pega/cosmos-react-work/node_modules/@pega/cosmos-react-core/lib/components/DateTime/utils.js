import { cap } from '../../utils';
import { getEndOfWeek, getQuarter, getStartOfWeek, getWeek, getWeekYear } from './Input/utils';
const unitsInMs = {
    year: 24 * 60 * 60 * 1000 * 365,
    month: (24 * 60 * 60 * 1000 * 365) / 12,
    day: 24 * 60 * 60 * 1000,
    hour: 60 * 60 * 1000,
    minute: 60 * 1000,
    second: 1000
};
export function formatDateTime(value, { t, locale, format, variant, clockFormat, timeZone }) {
    const timeShort = {
        hour: 'numeric',
        minute: 'numeric',
        hour12: clockFormat ? clockFormat === 12 : undefined
    };
    const timeLong = {
        ...timeShort,
        second: 'numeric'
    };
    const formatMapping = {
        date: {
            short: { year: 'numeric', month: 'short', day: 'numeric' },
            long: { year: 'numeric', month: 'long', day: 'numeric' },
            numeric: { year: 'numeric', month: 'numeric', day: 'numeric' }
        },
        datetime: {
            short: { year: 'numeric', month: 'short', day: 'numeric', ...timeShort },
            long: { year: 'numeric', month: 'long', day: 'numeric', ...timeLong },
            numeric: { year: 'numeric', month: 'numeric', day: 'numeric', ...timeShort }
        },
        time: {
            short: timeShort,
            long: timeLong,
            numeric: timeShort
        },
        month: {
            short: { month: 'short' },
            long: { month: 'long' },
            numeric: { month: 'numeric' }
        },
        year: {
            short: { year: 'numeric' },
            long: { year: 'numeric' },
            numeric: { year: '2-digit' }
        },
        monthyear: {
            short: { year: 'numeric', month: 'short' },
            long: { year: 'numeric', month: 'long' },
            numeric: { year: 'numeric', month: 'numeric' }
        },
        week: {
            short: { month: 'short', day: 'numeric' },
            long: { month: 'long', day: 'numeric' },
            numeric: { month: 'numeric', day: 'numeric' }
        },
        relative: {
            short: { style: 'long', numeric: 'auto' },
            long: { style: 'long', numeric: 'auto' },
            numeric: { style: 'short', numeric: 'auto' }
        }
    };
    const getFormattedDate = (date, dateVariant) => {
        return new Intl.DateTimeFormat(locale, {
            ...formatMapping[dateVariant][format],
            timeZone
        }).format(date);
    };
    const relativeTimeFormatter = (relativeValue, unit) => {
        return new Intl.RelativeTimeFormat(locale, formatMapping.relative[format]).format(relativeValue, unit);
    };
    const getRelativeTime = (date) => {
        let elapsed = date.getTime() - Date.now();
        // Deliberately reduce precision to 1 minute
        if (Math.abs(elapsed) < 60000)
            elapsed = 0;
        const unit = (Object.keys(unitsInMs).find(u => Math.abs(elapsed) >= unitsInMs[u]) ||
            'second');
        return relativeTimeFormatter(Math.round(elapsed / unitsInMs[unit]), unit);
    };
    const getFormattedWeek = (date) => {
        const displayNames = new Intl.DisplayNames(locale, {
            style: 'long',
            type: 'dateTimeField'
        });
        const startDate = getFormattedDate(getStartOfWeek(date), 'week');
        const endDate = getFormattedDate(getEndOfWeek(date), 'week');
        return `${cap(displayNames.of('weekOfYear'))} ${getWeek(date)}, ${getWeekYear(date)} (${startDate} - ${endDate})`;
    };
    const getFormattedQuarterYear = (date) => {
        const formattedYear = getFormattedDate(date, 'year');
        const quarterNumber = getQuarter(date);
        return `${t(`date_quarter_q${quarterNumber}`, [formattedYear])}`;
    };
    switch (variant) {
        case 'relative':
            return getRelativeTime(value);
        case 'week':
            return getFormattedWeek(value);
        case 'quarteryear':
            return getFormattedQuarterYear(value);
        default:
            return getFormattedDate(value, variant);
    }
}
const dayInMs = 24 * 60 * 60 * 1000;
const hourInMs = 60 * 60 * 1000;
const minuteInMs = 60 * 1000;
const secondInMs = 1000;
export function formatDuration(valueInMs, { locale, significantUnits }) {
    const numberFormatterSeconds = new Intl.NumberFormat(locale, {
        style: 'unit',
        unit: 'second',
        unitDisplay: 'narrow'
    });
    const sign = valueInMs < 0 ? '-' : '';
    const absMs = Math.abs(valueInMs);
    if (absMs < secondInMs) {
        return numberFormatterSeconds.format(0);
    }
    const durationParts = [
        { unit: 'day', value: Math.floor(absMs / dayInMs) },
        { unit: 'hour', value: Math.floor((absMs % dayInMs) / hourInMs) },
        { unit: 'minute', value: Math.floor((absMs % hourInMs) / minuteInMs) },
        { unit: 'second', value: Math.floor((absMs % minuteInMs) / secondInMs) }
    ];
    const result = [];
    for (let i = 0; result.length < significantUnits && i < durationParts.length; i += 1) {
        if (durationParts[i].value > 0) {
            result.push(new Intl.NumberFormat(locale, {
                style: 'unit',
                unit: durationParts[i].unit,
                unitDisplay: 'narrow'
            }).format(durationParts[i].value));
        }
    }
    return `${sign}${result.join(' ')}`;
}
//# sourceMappingURL=utils.js.map