/// <reference types="google.maps" />
import { Bias, LatLng, ProviderOpts } from './types';
export declare function loadMapsAPI(name?: string, opts?: ProviderOpts): Promise<void>;
export declare function getNavigatorPosition(): Promise<LatLng>;
export declare function toGoogleLatLng(coords: LatLng): google.maps.LatLng;
/** Returns an array of place prediction objects ('place' can be an establishment, geographic location, or prominent point of interest)
 * and  session token (valid for multiple queries, followed by one place selection).
 */
export declare function getPlacePredictions(location: string, bias?: Bias): Promise<{
    placePredictions: google.maps.places.AutocompletePrediction[];
    token: google.maps.places.AutocompleteSessionToken;
}>;
export declare function getPlace(location: string, mapElement?: HTMLDivElement): Promise<LatLng>;
export declare function getPlaceById(placeId: string, sessionToken?: google.maps.places.AutocompleteSessionToken, mapElement?: HTMLDivElement): Promise<{
    name?: string;
    address?: string;
    latitude?: number;
    longitude?: number;
}>;
/** Returns coordinations for given input: either coords, address or current position.  */
export declare function getCoords(coords: string | LatLng, mapElement?: HTMLDivElement): Promise<LatLng>;
export declare function getAddress(coords: LatLng): Promise<{
    name: string;
    address?: string;
    latitude?: number;
    longitude?: number;
}>;
export declare const isLatLngObject: (obj: unknown) => obj is google.maps.LatLng;
//# sourceMappingURL=utils.d.ts.map