import { useCallback, useEffect, useState } from 'react';
export const expandCollapseStates = Object.freeze({
    low: 'collapsed',
    rising: 'expanding',
    high: 'expanded',
    falling: 'collapsing'
});
export const openCloseStates = Object.freeze({
    low: 'closed',
    rising: 'opening',
    high: 'open',
    falling: 'closing'
});
const useTransitionState = ({ ref, property, states = {
    low: 'low',
    rising: 'rising',
    high: 'high',
    falling: 'falling'
}, defaultState = states.low }) => {
    const [state, setState] = useState(() => defaultState === states.high ? 'high' : 'low');
    const onTransitionEnd = useCallback((e) => {
        if (e.propertyName !== property || e.target !== e.currentTarget)
            return;
        setState(cur => (cur === 'falling' ? 'low' : 'high'));
    }, [property]);
    useEffect(() => {
        const el = ref.current;
        if (!el)
            return;
        el.addEventListener('transitionend', onTransitionEnd);
        return () => {
            el.removeEventListener('transitionend', onTransitionEnd);
        };
    }, [onTransitionEnd, ref.current]);
    const set = useCallback((wantsToGo) => {
        setState(cur => {
            if (wantsToGo === states.high && cur !== 'high')
                return 'rising';
            if (wantsToGo === states.low && cur !== 'low')
                return 'falling';
            return cur;
        });
    }, []);
    const toggle = useCallback(() => {
        setState(cur => {
            if (cur === 'low' || cur === 'falling')
                return 'rising';
            if (cur === 'high' || cur === 'rising')
                return 'falling';
            return cur;
        });
    }, []);
    return { state: states[state], set, toggle };
};
export default useTransitionState;
//# sourceMappingURL=useTransitionState.js.map