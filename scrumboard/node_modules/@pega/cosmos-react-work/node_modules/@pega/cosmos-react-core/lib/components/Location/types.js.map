{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../src/components/Location/types.ts"],"names":[],"mappings":"AAgCA,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,MAAM,EAAE,mBAAmB,EAAE,mBAAmB,EAAE,UAAU,CAAC,CAAC;AAC3F,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,eAAe,EAAE,SAAS,CAAC,CAAC;AAExD,MAAM,CAAC,MAAM,qBAAqB,GAAG,oBAAoB,CAAC;AAC1D,MAAM,CAAC,MAAM,2BAA2B,GAAG,yBAAyB,CAAC;AACrE,MAAM,CAAC,MAAM,0BAA0B,GAAG,6BAA6B,CAAC;AACxE,MAAM,CAAC,MAAM,kBAAkB,GAAG,sCAAsC,CAAC;AACzE,MAAM,CAAC,MAAM,yBAAyB,GAAG,mCAAmC,CAAC;AAC7E,MAAM,CAAC,MAAM,yBAAyB,GAAG,0BAA0B,CAAC;AACpE,MAAM,CAAC,MAAM,mBAAmB,GAAG,wBAAwB,CAAC","sourcesContent":["export declare type LatLng = {\n  /** The latitude representation. */\n  latitude: number;\n  /** The longitude representation. */\n  longitude: number;\n};\n\nexport declare type Bias = {\n  /** Predictions will be biased towards, but not restricted to, the given bounds. Both location and radius will be ignored if bounds is set.\n   * Array stores south-west coordinate of bounding box and north-east coordinate of bounding box. */\n  bounds?: [LatLng, LatLng];\n  /** Predictions will be biased towards the given location and radius. */\n  location?: {\n    /** Must to provide both center and radius. */\n    /** Location coordinate or current (means user current location). */\n    center: LatLng | 'current';\n    /** The radius is specified in meters. */\n    radius: number;\n  };\n};\n\nexport declare type ProviderOpts = {\n  [key: string]: any;\n};\n\nexport interface MapsProvider {\n  name: string;\n  loadAPI: (options: ProviderOpts) => Promise<void>;\n  loadedPromise: Promise<void> | null;\n  loadedApiKey: string;\n}\n\nexport const QUERY_FIELDS = ['name', 'formatted_address', 'geometry.location', 'place_id'];\nexport const QUERY_TYPES = ['establishment', 'geocode'];\n\nexport const LocationNotFoundError = 'Location not found';\nexport const GeolocationUnsupportedError = 'Geolocation unsupported';\nexport const GoogleMapsAPINotFoundError = 'Cannot load Google Maps API';\nexport const IsNotAnObjectError = 'Provider data given is not an object';\nexport const ProviderNotSupportedError = 'Not supported maps provider given';\nexport const CoordsCannotBeParsedError = 'Coords cannot be parsed!';\nexport const GeocoderFailedError = 'Geocoder failed due to';\n"]}