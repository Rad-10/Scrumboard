import { ChangeEvent, ReactNode, Ref, KeyboardEvent as ReactKeyboardEvent } from 'react';
import type { NoChildrenProp } from '../../types';
import { FormControlProps } from '../FormControl';
import { MenuItemProps, MenuProps } from '../Menu/Menu.types';
export interface Selected {
    id: string;
    text: string;
}
export default interface ComboBoxProps extends NoChildrenProp {
    /**
     * Sets DOM id for the control and associates label element via 'for' attribute.
     * If an id is not pass, a random id will be generated for any render.
     */
    id?: FormControlProps['id'];
    /** Pass a string or a fragment with an Icon and string. */
    label?: FormControlProps['label'];
    /** Visually hides the label region. */
    labelHidden?: FormControlProps['labelHidden'];
    /** Indicate if the field is required. The browser defaults to false. */
    required?: FormControlProps['required'];
    /** Disable the control. The browser defaults to false. */
    disabled?: FormControlProps['disabled'];
    /** Makes the component non editable and non clickable. The browser defaults to false. */
    readOnly?: FormControlProps['readOnly'];
    /** Sets html name attribute for the underlying control. Useful for mapping to a data field. */
    name?: FormControlProps['name'];
    /** Set visual state based on a validation state. */
    status?: FormControlProps['status'];
    /** It is recommended to pass a simple string to offer guidance. Text will be styled based on status prop. */
    info?: FormControlProps['info'];
    /** Placeholder text */
    placeholder?: FormControlProps['placeholder'];
    /**
     * Whether it is single selection or multi selection combobox.
     * @default 'single-select'
     */
    mode?: 'single-select' | 'multi-select';
    /** Currently selected option, single for single-select, an array for multi-select. */
    selected?: {
        items?: Selected | Selected[];
        onRemove?: (id: MenuItemProps['id'], index: number) => void;
        onNew?: (text: string) => void;
    };
    /** Value of the combobox filtering input. */
    value?: FormControlProps['value'];
    /** Callback fired when the filtering input value changes. */
    onChange?: (e: ChangeEvent<HTMLInputElement>) => void;
    /** Callback fired when the ComboBox input gains focus. */
    onFocus?: (selected?: Selected | Selected[]) => void;
    /**
     * Callback fired when the ComboBox looses focus within its containing element.
     * This is not specific to the input element.
     * Note, behavior will be enhanced in an upcoming release and the input will be the only focusable element.
     */
    onBlur?: (selected?: Selected | Selected[]) => void;
    /** Callback fired when AI suggestion is accepted/rejected */
    onResolveSuggestion?: FormControlProps['onResolveSuggestion'];
    /** Automatically focuses the input on render. */
    autoFocus?: boolean;
    /**
     * Fired when the user clicks on the dropdown icon to initiate opening the menu.
     * If you want to offer default menu items without an input value, pass this function.
     * This function can be an appropriate time to fetch menu item data.
     * Remember to set the loading prop to true when when fetching data for an empty list.
     *
     * @param open value defining whether the click opens or closes the menu
     */
    onDropdownButtonClick?: (open: boolean) => void;
    /** Fired when user clicks on the Combobox input. */
    onClick?: (e: MouseEvent) => void;
    /** Fired before running default component onKeyDown handler.
     * Returning `false` from this function prevents default onKeyDown handling.
     */
    onKeyDown?: (e: ReactKeyboardEvent) => boolean | void;
    /** Action Buttons that will render within the input. */
    actions?: ReactNode;
    /** Menu related props. @see MenuProps */
    menu?: MenuProps;
    /** A visual which represents the selected item. */
    visual?: ReactNode;
    /** Pass a heading and content to show additional information on the field. */
    additionalInfo?: FormControlProps['additionalInfo'];
    /** Reference to the element. */
    ref?: Ref<HTMLDivElement>;
}
//# sourceMappingURL=ComboBox.types.d.ts.map