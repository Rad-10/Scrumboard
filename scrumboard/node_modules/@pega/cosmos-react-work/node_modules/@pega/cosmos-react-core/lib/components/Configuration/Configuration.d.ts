import { FunctionComponent, ComponentType, ReactNode, Context } from 'react';
import { ThemeMachineLike, DefaultSettableTheme, DefaultThemeDefinition } from '../../theme';
import { Translation, TranslationPack } from '../../i18n';
import { FileInputProps } from '../File';
import '../../init';
export interface ConfigurationProps {
    /**
     * Any components or nodes that should be impacted by the settings applied by this Configuration component.
     */
    children: ReactNode;
    /**
     * User locale as defined in [BCP-47](https://www.techonthenet.com/js/language_tags.php).
     */
    locale?: string;
    /**
     * Override rendering direction of the document. Direction will be based on the locale if now provided.
     */
    direction?: 'ltr' | 'rtl';
    /**
     * Object with (partial) translations.
     */
    translations?: Translation;
    /**
     * Theme object used to override any or all Cosmos theme properties.
     */
    theme?: DefaultSettableTheme;
    /**
     * Disables loading Open Sans from Google Fonts. Only takes effect on the root configuration.
     */
    disableDefaultFontLoading?: boolean;
    /**
     * Target element for loading styles related to `styled-components`.
     */
    styleSheetTarget?: HTMLElement;
    /**
     * Target element for rendering a `ReactDOM` portal.
     */
    portalTarget?: Element;
    /**
     * Override map to replace Cosmos components.
     */
    overrideMap?: {
        FileInput?: ComponentType<FileInputProps>;
    };
    /**
     * Use native HTML5 controls for inputs instead of rich ones.
     * @default false
     */
    renderNativeControls?: boolean;
    /**
     * String to identify this configuration instance.
     */
    id?: string;
}
export interface ConfigurationContextValue {
    locale: string;
    direction: ConfigurationProps['direction'];
    translations: TranslationPack;
    themeMachine: ThemeMachineLike<DefaultThemeDefinition>;
    styleSheetTarget?: HTMLElement;
    portalTarget?: Element;
    overrideMap: NonNullable<ConfigurationProps['overrideMap']>;
    renderNativeControls: boolean;
    initialized: boolean;
}
export declare const ConfigurationContext: Context<ConfigurationContextValue>;
interface CosmosInstance {
    version: string;
    mountedConfigs: string[];
    mountOrder: string[];
    mountCount: Record<string, number>;
}
declare module '../../init' {
    interface CosmosGlobals {
        instances?: CosmosInstance[];
        configurationContext?: Context<ConfigurationContextValue>;
    }
}
declare const Configuration: FunctionComponent<ConfigurationProps>;
export default Configuration;
//# sourceMappingURL=Configuration.d.ts.map