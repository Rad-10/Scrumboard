import { jsx as _jsx } from "react/jsx-runtime";
import { forwardRef, useCallback, useMemo } from 'react';
import FormField from '../FormField';
import { useConfiguration, useConsolidatedRef, useI18n, useInputFormatter, usePrevious, useUID } from '../../hooks';
import { getCleanedValue, getDecimalSign, getDecrementedValue, getIncrementedValue } from '../Number/utils';
import Input from '../Input';
import { getCurrencyMinimumFractionDigits, getFormattedValue, isValidCurrency } from './utils';
const CurrencyInput = forwardRef((props, ref) => {
    const uid = useUID();
    const { id = uid, status, label, labelHidden, info, required, disabled, readOnly, additionalInfo, value: valueProp = '', onChange, onBlur, onFocus, onResolveSuggestion, currencyISOCode, showDecimal = true, showGroupSeparators = true, min = Number.MIN_SAFE_INTEGER, max = Number.MAX_SAFE_INTEGER, step = 1, alwaysShowISOCode = false, maximumFractionDigits = 0, ...restProps } = props;
    const { locale } = useConfiguration();
    const t = useI18n();
    const inputRef = useConsolidatedRef(ref);
    const validCurrencyISOCode = useMemo(() => (currencyISOCode && isValidCurrency(currencyISOCode) ? currencyISOCode : undefined), [currencyISOCode]);
    const minimumFractionDigits = useMemo(() => getCurrencyMinimumFractionDigits(locale, validCurrencyISOCode), [locale, validCurrencyISOCode]);
    const numberOfDecimals = showDecimal
        ? Math.max(maximumFractionDigits, minimumFractionDigits)
        : 0;
    const decimalSign = useMemo(() => getDecimalSign(locale), [locale]);
    // on initial render only pad the value with 0 if necessary
    const rendered = usePrevious(true);
    let value = valueProp;
    if (!rendered && validCurrencyISOCode && !Number.isNaN(parseFloat(value))) {
        const [integer, fraction = ''] = value.split('.');
        value = `${integer}.${fraction.padEnd(numberOfDecimals, '0')}`;
    }
    const formatValue = useCallback(number => {
        return getFormattedValue(number, locale, validCurrencyISOCode, {
            showGroupSeparators,
            showAs: alwaysShowISOCode ? 'code' : 'symbol',
            numberOfDecimals
        });
    }, [alwaysShowISOCode, numberOfDecimals, showGroupSeparators, locale, validCurrencyISOCode]);
    const onInputChange = (e) => {
        const inputValue = e.target.value;
        const cleanedInputValue = getCleanedValue(inputValue, decimalSign, numberOfDecimals);
        if (cleanedInputValue === value)
            return;
        onChange(cleanedInputValue);
    };
    const onKeyDown = (e) => {
        if (readOnly)
            return;
        const input = e.currentTarget;
        switch (e.key) {
            case 'ArrowUp':
                e.preventDefault();
                onChange(getIncrementedValue(value, min, max, step));
                break;
            case 'ArrowDown':
                e.preventDefault();
                onChange(getDecrementedValue(value, min, max, step));
                break;
            case decimalSign:
                if (!showDecimal)
                    e.preventDefault();
                if (input.value.includes(decimalSign)) {
                    if (input.selectionStart && input.value.charAt(input.selectionStart) === decimalSign) {
                        input.setSelectionRange(input.selectionStart + 1, input.selectionStart + 1);
                    }
                    e.preventDefault();
                }
                else if (input.selectionStart !== null &&
                    !input.value.charAt(input.selectionStart - 1).match(/\d/)) {
                    onChange(getCleanedValue(`${input.value}0${decimalSign}`, decimalSign, numberOfDecimals));
                    e.preventDefault();
                }
                break;
            case '-':
                if (value.startsWith('-'))
                    e.preventDefault();
                break;
            default:
        }
    };
    const onInputFocusEvent = (e) => {
        let parsableValue = value;
        if (validCurrencyISOCode && !Number.isNaN(parseFloat(value))) {
            const [integer, fraction = ''] = value.split('.');
            parsableValue = `${integer}.${fraction.padEnd(numberOfDecimals, '0')}`;
        }
        if (e.type === 'focus')
            onFocus?.(parsableValue);
        else {
            if (parsableValue !== value) {
                onChange(parsableValue);
            }
            onBlur?.(parsableValue);
        }
    };
    const formattedValue = useInputFormatter(inputRef, value, formatValue, `\\p{N}${decimalSign}-`);
    const Comp = (_jsx(Input, { ...{ onChange: onInputChange, id, readOnly, required, disabled, status, ...restProps }, hasSuggestion: status === 'pending' && !!onResolveSuggestion, inputMode: 'numeric', ref: inputRef, value: formattedValue, onKeyDown: onKeyDown, onFocus: onInputFocusEvent, onBlur: onInputFocusEvent, "aria-label": `${label}. ${validCurrencyISOCode ? t('measured_in', [validCurrencyISOCode]) : ''}`, maxLength: 16 }));
    return label ? (_jsx(FormField, { ...{
            label,
            labelHidden,
            id,
            info,
            status,
            required,
            disabled,
            additionalInfo,
            onResolveSuggestion
        }, children: Comp })) : (Comp);
});
export default CurrencyInput;
//# sourceMappingURL=CurrencyInput.js.map