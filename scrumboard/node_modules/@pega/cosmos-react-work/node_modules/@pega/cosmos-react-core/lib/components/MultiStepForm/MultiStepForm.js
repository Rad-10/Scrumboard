import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef, useRef, useEffect } from 'react';
import styled, { css } from 'styled-components';
import { useUID, useI18n, usePrevious } from '../../hooks';
import { getFocusables } from '../../utils';
import { calculateFontSize } from '../../styles';
import Flex from '../Flex';
import Text from '../Text';
import HTML from '../HTML';
import VisuallyHiddenText from '../VisuallyHiddenText';
import FormProgress from './FormProgress';
export const StyledForm = styled.form ``;
export const StyledFormContent = styled.div ``;
export const StyledRequiredFieldLegend = styled(Text)(({ theme }) => {
    const { base: { 'font-size': fontSize, 'font-scale': fontScale, palette: { urgent } } } = theme;
    const { xxs: infoFontSize } = calculateFontSize(fontSize, fontScale);
    return css `
    font-size: ${infoFontSize};
    font-style: italic;

    &::before {
      display: 'inline';
      content: '\\00a0*';
      vertical-align: top;
      color: ${urgent};
    }
  `;
});
export const MultiStepForm = forwardRef(({ currentStepId, steps, heading, ...restProps }, ref) => {
    const multiStepContentRef = useRef(null);
    const previousId = usePrevious(currentStepId);
    const currentStep = steps.find((step) => step.id === currentStepId);
    const headingId = useUID();
    const descriptionId = useUID();
    const t = useI18n();
    useEffect(() => {
        if (previousId === undefined)
            return;
        if (previousId !== currentStepId) {
            const focusableElements = getFocusables(multiStepContentRef);
            if (focusableElements.length)
                focusableElements[0].focus();
        }
    }, [currentStepId, previousId]);
    return (_jsxs(Flex, { ref: ref, as: StyledForm, container: { direction: 'column', gap: 3 }, ...restProps, "aria-labelledby": heading ? headingId : undefined, "aria-describedby": currentStep.description ? descriptionId : undefined, children: [(heading || steps.length > 1) && (_jsxs(Flex, { container: { direction: 'column', gap: 1.5 }, children: [heading && (_jsx(Text, { id: headingId, variant: 'h3', children: heading })), steps.length > 1 && (_jsxs(_Fragment, { children: [_jsx(FormProgress, { steps: steps, currentStepId: currentStepId }), _jsx(VisuallyHiddenText, { "aria-live": 'polite', children: previousId !== undefined && previousId !== currentStepId
                                    ? t('step_changed_to_name', [currentStep.name])
                                    : '' })] }))] })), currentStep.banners, currentStep.description && (_jsx(HTML, { id: descriptionId, as: 'p', content: currentStep.description })), _jsx(StyledFormContent, { ref: multiStepContentRef, children: currentStep.content }), currentStep.actions && (_jsx(Flex, { container: { justify: 'between', alignItems: 'center' }, children: currentStep.actions }))] }));
});
export default MultiStepForm;
//# sourceMappingURL=MultiStepForm.js.map