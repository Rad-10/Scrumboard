import { RefObject } from 'react';
/** Hook for properly handling focus state of children components.
 * @example const hasFocus = useFocusWithin([containerRef, ...], (isFocused, element) => { doSomething; });
 * @param onFocusChange Callback function that is invoked with the current focus state and the current element when any child elements takes focus or all of them lose focus.
 * @returns * hasFocus:: A boolean indicating if the ref element has focus or not.
 */
declare const useFocusWithin: <T extends HTMLElement = HTMLElement>(els: (T | RefObject<T | null> | null)[], onFocusChange?: ((isFocused: boolean, element: T | null) => void) | undefined) => boolean;
export default useFocusWithin;
//# sourceMappingURL=useFocusWithin.d.ts.map