{"version":3,"file":"MetaList.js","sourceRoot":"","sources":["../../../src/components/MetaList/MetaList.tsx"],"names":[],"mappings":";AAAA,OAAO,EAAsD,UAAU,EAAE,MAAM,OAAO,CAAC;AACvF,OAAO,MAAM,EAAE,EAAE,GAAG,EAAE,MAAM,mBAAmB,CAAC;AAEhD,OAAO,IAAI,MAAM,SAAS,CAAC;AAC3B,OAAO,IAAI,MAAM,SAAS,CAAC;AAe3B,MAAM,CAAC,MAAM,cAAc,GAAG,MAAM,CAAC,EAAE,CAAyB,CAAC,EAAE,SAAS,EAAE,EAAE,EAAE;IAChF,OAAO,GAAG,CAAA;;;;MAIN,CAAC,SAAS;QACZ,GAAG,CAAA;;KAEF;GACF,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,kBAAkB,GAAG,MAAM,CAAC,EAAE,CAAyB,CAAC,EAAE,SAAS,EAAE,EAAE,EAAE;IACpF,OAAO,GAAG,CAAA;;;;MAIN,SAAS;QACT,CAAC,CAAC,GAAG,CAAA;;SAEF;QACH,CAAC,CAAC,GAAG,CAAA;;;;SAIF;;;;;;GAMN,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,MAAM,QAAQ,GAAoD,UAAU,CAC1E,CAAC,KAAqC,EAAE,GAAyB,EAAE,EAAE;IACnE,MAAM,EAAE,KAAK,EAAE,SAAS,GAAG,IAAI,EAAE,GAAG,SAAS,EAAE,GAAG,KAAK,CAAC;IACxD,OAAO,CACL,KAAC,IAAI,IACH,EAAE,EAAE,cAAc,EAClB,SAAS,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,UAAU,EAAE,QAAQ,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,EAAE,EACrF,SAAS,EAAE,SAAS,EACpB,GAAG,EAAE,GAAG,KACJ,SAAS,YAEZ,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,CAC9B,IAAI;YACF,CAAC,CAAC;gBACE,KAAC,IAAI,IACH,EAAE,EAAE,kBAAkB,EAEtB,OAAO,EAAC,WAAW,EACnB,SAAS,EAAE,SAAS,YAEnB,IAAI,IAJA,GAAG,CAAC,GAAG,CAAC,EAAE,CAKV;aACR,CAAC,MAAM,CACN,CAAC,KAAK,GAAG,CAAC,MAAM,GAAG,CAAC;gBAClB,CAAC,CAAC;oBACE,KAAC,IAAI,IACH,EAAE,EAAE,kBAAkB,EACtB,IAAI,EAAC,WAAW,EAEhB,OAAO,EAAC,WAAW,wBADd,GAAG,CAAC,GAAG,CAAC,MAAM,CAId;iBACR;gBACH,CAAC,CAAC,EAAE,CACP;YACH,CAAC,CAAC,EAAE,CACP,GACI,CACR,CAAC;AACJ,CAAC,CACF,CAAC;AAEF,eAAe,QAAQ,CAAC","sourcesContent":["import { FunctionComponent, ReactNode, Ref, PropsWithoutRef, forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\n\nimport Text from '../Text';\nimport Flex from '../Flex';\nimport { BaseProps, ForwardProps, NoChildrenProp } from '../../types';\n\nexport interface MetaListProps extends BaseProps, NoChildrenProp {\n  /** Array of nodes or text to be rendered in the list. */\n  items: ReactNode[];\n  /**\n   * If true, MetaList items that extend past the MetaList's container will wrap to a new line.\n   * @default true\n   */\n  wrapItems?: boolean;\n  /** Ref for the wrapping element. */\n  ref?: Ref<HTMLUListElement>;\n}\n\nexport const StyledMetaList = styled.ul<{ wrapItems: boolean }>(({ wrapItems }) => {\n  return css`\n    list-style: none;\n    overflow: hidden;\n\n    ${!wrapItems &&\n    css`\n      white-space: nowrap;\n    `}\n  `;\n});\n\nexport const StyledMetaListItem = styled.li<{ wrapItems: boolean }>(({ wrapItems }) => {\n  return css`\n    min-width: 0;\n    display: inline-block;\n\n    ${wrapItems\n      ? css`\n          overflow-wrap: break-word;\n        `\n      : css`\n          white-space: nowrap;\n          text-overflow: ellipsis;\n          overflow: hidden;\n        `}\n\n    &[role='separator'] {\n      -webkit-user-select: none;\n      user-select: none;\n    }\n  `;\n});\n\nconst MetaList: FunctionComponent<MetaListProps & ForwardProps> = forwardRef(\n  (props: PropsWithoutRef<MetaListProps>, ref: MetaListProps['ref']) => {\n    const { items, wrapItems = true, ...restProps } = props;\n    return (\n      <Flex\n        as={StyledMetaList}\n        container={{ colGap: 0.5, alignItems: 'center', wrap: wrapItems ? 'wrap' : 'nowrap' }}\n        wrapItems={wrapItems}\n        ref={ref}\n        {...restProps}\n      >\n        {items.flatMap((item, i, arr) =>\n          item\n            ? [\n                <Text\n                  as={StyledMetaListItem}\n                  key={`${i + 0}`}\n                  variant='secondary'\n                  wrapItems={wrapItems}\n                >\n                  {item}\n                </Text>\n              ].concat(\n                i !== arr.length - 1\n                  ? [\n                      <Text\n                        as={StyledMetaListItem}\n                        role='separator'\n                        key={`${i + 0}-sep`}\n                        variant='secondary'\n                      >\n                        â€¢\n                      </Text>\n                    ]\n                  : []\n              )\n            : []\n        )}\n      </Flex>\n    );\n  }\n);\n\nexport default MetaList;\n"]}