import styled, { css } from 'styled-components';
import { transparentize } from 'polished';
import { StyledButton } from '../Button';
import Icon, { StyledIcon } from '../Icon';
import { StyledProgressRing } from '../Progress';
import { defaultThemeProp } from '../../theme';
import { useDirection } from '../../hooks';
import Tree, { StyledTreeListItem } from './Tree';
export const StyledToggleIcon = styled(Icon) ``;
export const StyledNodeActions = styled.div ``;
export const StyledLabelContent = styled.div ``;
export const StyledNodeIcon = styled(Icon) ``;
export const StyledNodeText = styled.span ``;
export const StyledStandardTreeItemSubTree = styled.div(({ theme, lined }) => {
    return css `
    position: relative;

    ${lined &&
        css `
      ::before {
        content: '';
        display: block;
        position: absolute;
        background-color: currentColor;
        inset-block-start: -${theme.base.spacing};
        inset-block-end: 0;
        inset-inline-start: calc(
          0.5em * (var(--depth) + 1) + (${theme.base.spacing} * var(--depth) + 0.5em * var(--depth)) +
            ${theme.base.spacing} * 1.5
        );
        width: 0.0625rem;
        opacity: 0.2;
        transition: opacity ${theme.base.animation.speed} ${theme.base.animation.timing.ease};
      }
    `}

    ${StyledProgressRing} {
      margin: calc(${theme.base.spacing} * 1.25) 0;
      margin-inline-start: calc(
        var(--parent-caret-width) * (var(--depth) + 1) + var(--initial-padding)
      );
    }
  `;
});
StyledStandardTreeItemSubTree.defaultProps = defaultThemeProp;
export const StyledNodeInteraction = styled.div(({ theme }) => {
    return css `
    /* Could put on Flex pad prop but, needing logical prop below, maybe makes sense to keep here.
     * We should fix Flex/Grid pad arrays to map to logical props...
     */
    min-height: 2.25rem;
    padding-inline-start: calc(var(--parent-caret-width) * var(--depth) + var(--initial-padding));
    padding-inline-end: calc(var(--initial-padding) + ${theme.base.spacing});
    cursor: pointer;

    & > ${StyledNodeActions} {
      display: none;
      ${StyledButton} {
        margin-inline-start: calc(${theme.base.spacing} / 2);
      }
    }

    &:focus,
    &:focus-within {
      box-shadow: ${theme.base.shadow.focus};

      & > ${StyledNodeActions} {
        display: block;
      }
    }

    &:focus-visible {
      outline: none;
    }

    &:hover {
      background-color: ${transparentize(0.9, theme.base.palette['foreground-color'])};

      & > ${StyledNodeActions} {
        display: block;
      }
    }

    &[aria-current='true'] {
      background-color: ${transparentize(0.95, theme.base.palette['foreground-color'])};

      & > ${StyledLabelContent}, & > :first-child > ${StyledLabelContent} {
        color: ${theme.base.palette.interactive};
      }
    }
  `;
});
StyledNodeInteraction.defaultProps = defaultThemeProp;
export const StyledStandardTreeLeaf = styled.div(() => {
    return css `
    ${StyledNodeInteraction} {
      /* 1 when not at root and no parent sibling, 0 otherwise. */
      --include-parent-icon-width: min((1.5 - var(--has-parent-sibling)), (var(--depth) + 0.5));
      padding-inline-start: calc(
        var(--initial-padding) +
          (var(--parent-caret-width) * (var(--depth) + var(--has-parent-sibling))) +
          (var(--parent-icon-width) * var(--include-parent-icon-width))
      );
    }
  `;
});
StyledStandardTreeLeaf.defaultProps = defaultThemeProp;
// FIXME: any is used since typeof StyledNodeInteraction not playing nicely.
export const StyledStandardTreeParent = styled(StyledNodeInteraction)(({ theme }) => {
    const { ltr } = useDirection();
    return css `
    &[aria-expanded='true'] ${StyledToggleIcon} {
      transform: rotate(90deg);
    }

    &[aria-expanded='false'] {
      ${StyledToggleIcon} {
        transform: rotate(${ltr ? '0' : '180'}deg);
      }

      + ${StyledStandardTreeItemSubTree} {
        display: none;
      }
    }

    &:hover + ${StyledStandardTreeItemSubTree}::before {
      opacity: 0.5;
    }

    ${StyledToggleIcon} {
      transition: transform calc(${theme.base.animation.speed} / 2)
        ${theme.base.animation.timing.ease};
    }
  `;
});
StyledStandardTreeParent.defaultProps = defaultThemeProp;
export const StyledStandardTreeNode = styled.div(({ theme }) => css `
    --initial-padding: calc(${theme.base.spacing} * 1);
    --parent-caret-width: calc(1em + ${theme.base.spacing});
    --parent-icon-width: calc(1em + ${theme.base.spacing} / 2);

    ${StyledIcon} {
      width: 1em;
      height: 1em;
    }
  `);
StyledStandardTreeNode.defaultProps = defaultThemeProp;
export const StyledStandardTree = styled(Tree) `
  ${StyledTreeListItem} {
    display: block;
  }
`;
// FIXME: We need to determine why styled-component types are "eating" our types.
StyledStandardTree.defaultProps = defaultThemeProp;
//# sourceMappingURL=StandardTree.styles.js.map