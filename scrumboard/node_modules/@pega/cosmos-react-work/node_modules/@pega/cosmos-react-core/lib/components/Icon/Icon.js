import { jsx as _jsx } from "react/jsx-runtime";
import { forwardRef, useState, useEffect } from 'react';
import styled from 'styled-components';
const iconRegistry = new Map();
export const registerIcon = (...icons) => {
    icons.forEach(({ name, ...iconDef }) => {
        if (!iconRegistry.has(name))
            iconRegistry.set(name, iconDef);
    });
};
export const forceRegisterIcon = (...icons) => {
    icons.forEach(({ name, ...iconDef }) => {
        iconRegistry.set(name, iconDef);
    });
};
export const StyledIcon = styled.svg `
  display: inline-block;
  fill: currentColor;
  height: 1.125rem;
  width: 1.125rem;
  vertical-align: middle;
`;
const emptyIconDefinition = Object.freeze({ Component: () => null });
const Icon = forwardRef(({ name, ...restProps }, ref) => {
    const [iconDef, setIconDef] = useState(iconRegistry.get(name) ?? emptyIconDefinition);
    useEffect(() => {
        if (iconRegistry.has(name)) {
            setIconDef(iconRegistry.get(name));
            return;
        }
        const controller = new AbortController();
        (async () => {
            try {
                const module = await import(`./icons/${encodeURIComponent(name)}.icon`);
                if (module.name !== name || !module.Component)
                    throw new Error('Malformed icon definition');
                registerIcon(module);
            }
            catch {
                registerIcon({ name, ...emptyIconDefinition });
            }
            if (!controller.signal.aborted)
                setIconDef(iconRegistry.get(name) ?? emptyIconDefinition);
        })();
        return () => controller.abort();
    }, [name]);
    return (_jsx(StyledIcon, { role: 'presentation', ...restProps, viewBox: iconDef.viewBox, ref: ref, children: _jsx(iconDef.Component, {}) }));
});
export default Icon;
//# sourceMappingURL=Icon.js.map