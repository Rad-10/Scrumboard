import { jsx as _jsx } from "react/jsx-runtime";
import { forwardRef, useRef } from 'react';
import styled, { css } from 'styled-components';
import { defaultThemeProp } from '../../theme';
import Flex from '../Flex';
import Link from '../Link';
import Count from '../Badges/Count';
import Tab from './Tab';
export const StyledTabs = styled.div(({ type, theme }) => css `
    position: relative;
    overflow: ${type === 'horizontal' ? 'auto' : 'visible'};
    ${type === 'horizontal' &&
    css `
      border-bottom: 0.0625rem solid ${theme.base.palette['border-line']};
      height: max-content;
    `}
  `);
StyledTabs.defaultProps = defaultThemeProp;
/**
 * The tabs component will take a list of tab data objects and render out a list of tabs in either vertical or horizontal direction.
 * The tabs component handles which tab is active but will give you a callback function that allows you to make changes when a new tab is activated
 */
const Tabs = forwardRef(({ tabs = [], type = 'horizontal', currentTabId, onTabClick, inverted = false, ...restProps }, ref) => {
    // Used to keep a reference for every tab in order to focus them with key presses
    const tabRefs = useRef([]);
    // Handles arrow keypresses for changing the focus
    const changeTabFocus = (event, index) => {
        if (tabRefs.current?.length) {
            const { key } = event;
            if (key === 'ArrowRight' || key === 'ArrowDown') {
                const nextIndex = index + 1 < tabs.length ? index + 1 : 0;
                const nextTab = tabRefs.current[nextIndex];
                if (!nextTab?.disabled) {
                    nextTab?.focus();
                }
                else {
                    changeTabFocus(event, nextIndex);
                }
            }
            else if (key === 'ArrowLeft' || key === 'ArrowUp') {
                const prevIndex = index === 0 ? tabs.length - 1 : index - 1;
                const prevTab = tabRefs.current[prevIndex];
                if (!prevTab?.disabled) {
                    prevTab?.focus();
                }
                else {
                    changeTabFocus(event, prevIndex);
                }
            }
        }
    };
    let badgeVariant;
    if (inverted) {
        badgeVariant = 'inverted';
    }
    else {
        badgeVariant = 'default';
    }
    return (_jsx(Flex, { ...restProps, container: {
            direction: type !== 'horizontal' ? 'column' : undefined
        }, item: { shrink: 0 }, as: StyledTabs, ref: ref, type: type, role: 'tablist', "aria-orientation": type, children: tabs.map((tab, i) => {
            const { href, name, count, id, disabled } = tab;
            const selected = id === currentTabId;
            return (_jsx(Tab, { id: id, "aria-selected": selected, "aria-controls": `${id}-panel`, content: name, count: typeof count === 'number' && _jsx(Count, { variant: badgeVariant, children: count }), href: href, inverted: inverted || false, selected: selected, onClick: (event) => {
                    onTabClick?.(id, event);
                }, role: 'tab', ref: (el) => {
                    tabRefs.current[i] = el;
                }, onKeyDown: (e) => {
                    if (['ArrowRight', 'ArrowDown', 'ArrowLeft', 'ArrowUp'].includes(e.key)) {
                        e.preventDefault();
                    }
                }, onKeyUp: (e) => {
                    changeTabFocus(e, i);
                }, as: href ? Link : undefined, tabIndex: selected ? undefined : -1, "aria-label": name, type: type, disabled: disabled }, id));
        }) }));
});
export default Tabs;
//# sourceMappingURL=Tabs.js.map