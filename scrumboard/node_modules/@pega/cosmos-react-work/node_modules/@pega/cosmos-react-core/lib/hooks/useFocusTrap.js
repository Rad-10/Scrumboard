import { useCallback } from 'react';
import { getFocusables, getActiveElement } from '../utils';
import useEvent from './useEvent';
/**
 * @example useFocusTrap(elementRef)
 * @param elementRef ref of the element in which focus needs to be retained
 * @param addToDocument boolean value to specify if event to be attached to document or to be taken from elementRef, defaults to true
 * @param dependencies  list of variables or functions that will initiate this hook when they are updated.
 */
const useFocusTrap = (elementRef, attachToDocument = true, dependencies = []) => {
    const onKeydown = useCallback((e) => {
        if (e.key === 'Tab') {
            const focusables = getFocusables(elementRef);
            const { 0: firstFocusable, [focusables.length - 1]: lastFocusable } = focusables;
            const activeEl = getActiveElement();
            if (!e.shiftKey && (activeEl === elementRef.current || activeEl === lastFocusable)) {
                firstFocusable?.focus();
                e.preventDefault();
            }
            else if (e.shiftKey && (activeEl === elementRef.current || activeEl === firstFocusable)) {
                lastFocusable?.focus();
                e.preventDefault();
            }
        }
    }, dependencies);
    useEvent('keydown', onKeydown, { target: attachToDocument ? undefined : elementRef });
};
export default useFocusTrap;
//# sourceMappingURL=useFocusTrap.js.map