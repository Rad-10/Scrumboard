import { useState } from 'react';
import { useElement, useEscape, useOuterEvent } from '../../../hooks';
const usePickerButton = (onClose) => {
    const [open, setOpen] = useState(false);
    const [popoverEl, setPopoverRef] = useElement();
    const [buttonEl, setButtonEl] = useElement();
    /* Input calls onBlur callback in 'focusout' handler, so any immediate changes to the value, like setting midnight by default in DateTimeInput,
       must be made earlier - in 'mousedown' event. Although, we can't close the popover before all the events' processing ends, so we need to delay
       it. */
    useOuterEvent('mousedown', [popoverEl, buttonEl], () => {
        if (open) {
            onClose?.();
            setTimeout(() => setOpen(false));
        }
    });
    useEscape(e => {
        e.preventDefault();
        onClose?.();
        setOpen(false);
        // Stop propagation if triggered inside the picker to prevent closing a modal
        if (e.currentTarget === popoverEl) {
            e.stopPropagation();
            buttonEl?.focus();
        }
    }, popoverEl, [popoverEl]);
    return [open, setOpen, popoverEl, setPopoverRef, buttonEl, setButtonEl];
};
export default usePickerButton;
//# sourceMappingURL=usePickerButton.js.map