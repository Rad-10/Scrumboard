{"version":3,"file":"modifiers.js","sourceRoot":"","sources":["../../../src/components/Popover/modifiers.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAY,MAAM,gBAAgB,CAAC;AAE1D,0EAA0E;AAC1E,MAAM,CAAC,MAAM,SAAS,GAAkC,MAAM,CAAC,MAAM,CAAC;IACpE,IAAI,EAAE,WAAW;IACjB,OAAO,EAAE,IAAI;IACb,KAAK,EAAE,aAAa;IACpB,EAAE,CAAC,EAAE,KAAK,EAAE;QACV,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,IAAI,CAAC;IACjE,CAAC;IACD,QAAQ,EAAE,CAAC,eAAe,CAAC;CAC5B,CAAC,CAAC;AAEH,uFAAuF;AACvF,MAAM,CAAC,MAAM,OAAO,GAAgC,MAAM,CAAC,MAAM,CAAC;IAChE,IAAI,EAAE,SAAS;IACf,OAAO,EAAE,IAAI;IACb,KAAK,EAAE,MAAM;IACb,gBAAgB,EAAE,CAAC,QAAQ,EAAE,iBAAiB,EAAE,MAAM,CAAC;IACvD,EAAE,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE;QACzB,MAAM,QAAQ,GAAG,cAAc,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QAChD,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,KAAK,CAAC,aAAa,CAAC,eAAe,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;QACvE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC;QAC7C,MAAM,CAAC,aAAa,CAAC,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAEnD,MAAM,SAAS,GAAG,aAAa,KAAK,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC;QAC9D,MAAM,UAAU,GAAG,aAAa,KAAK,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC;QAE9D,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG;YAC1B,KAAK,EAAE,KAAK,GAAG,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC;YACtC,MAAM,EAAE,MAAM,GAAG,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC;SAC1C,CAAC;IACJ,CAAC;CACF,CAAC,CAAC;AAEH,2EAA2E;AAC3E,MAAM,CAAC,MAAM,YAAY,GAAqC,MAAM,CAAC,MAAM,CAAC;IAC1E,IAAI,EAAE,cAAc;IACpB,OAAO,EAAE,IAAI;IACb,KAAK,EAAE,aAAa;IACpB,QAAQ,EAAE,CAAC,SAAS,CAAC;IACrB,EAAE,CAAC,EAAE,KAAK,EAAE;QACV,MAAM,EAAE,MAAM,EAAE,GAAG,KAAK,CAAC,aAAa,CAAC,OAAO,CAAC;QAC/C,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,GAAG,GAAG,MAAM,IAAI,CAAC;IAChD,CAAC;CACF,CAAC,CAAC","sourcesContent":["import { detectOverflow, Modifier } from '@popperjs/core';\n\n// taken from https://codesandbox.io/s/bitter-sky-pe3z9?file=/src/index.js\nexport const sameWidth: Modifier<'sameWidth', object> = Object.freeze({\n  name: 'sameWidth',\n  enabled: true,\n  phase: 'beforeWrite',\n  fn({ state }) {\n    state.styles.popper.width = `${state.rects.reference.width}px`;\n  },\n  requires: ['computeStyles']\n});\n\n// taken from https://github.com/atomiks/popper.js/blob/master/src/modifiers/maxSize.js\nexport const maxSize: Modifier<'maxSize', object> = Object.freeze({\n  name: 'maxSize',\n  enabled: true,\n  phase: 'main',\n  requiresIfExists: ['offset', 'preventOverflow', 'flip'],\n  fn({ state, name, options }) {\n    const overflow = detectOverflow(state, options);\n    const { x, y } = state.modifiersData.preventOverflow || { x: 0, y: 0 };\n    const { width, height } = state.rects.popper;\n    const [basePlacement] = state.placement.split('-');\n\n    const widthProp = basePlacement === 'left' ? 'left' : 'right';\n    const heightProp = basePlacement === 'top' ? 'top' : 'bottom';\n\n    state.modifiersData[name] = {\n      width: width - overflow[widthProp] - x,\n      height: height - overflow[heightProp] - y\n    };\n  }\n});\n\n// taken from https://codesandbox.io/s/great-tesla-3roz7?file=/src/index.js\nexport const applyMaxSize: Modifier<'applyMaxSize', object> = Object.freeze({\n  name: 'applyMaxSize',\n  enabled: true,\n  phase: 'beforeWrite',\n  requires: ['maxSize'],\n  fn({ state }) {\n    const { height } = state.modifiersData.maxSize;\n    state.styles.popper.maxHeight = `${height}px`;\n  }\n});\n"]}