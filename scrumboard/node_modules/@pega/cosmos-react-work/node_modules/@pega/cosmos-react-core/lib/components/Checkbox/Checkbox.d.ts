import { ChangeEvent, FC } from 'react';
import { FormControlProps } from '../FormControl';
import { RadioCheckProps } from '../RadioCheck';
import { ForwardProps, NoChildrenProp } from '../../types';
export interface CheckboxProps extends NoChildrenProp {
    /**
     * Sets DOM id for the control and associates label element via 'for' attribute.
     * If an id is not pass, a random id will be generated for any render.
     */
    id?: FormControlProps['id'];
    /** Pass a string or a fragment with an Icon and string. */
    label?: FormControlProps['label'];
    /** Indicate if the field is required. The browser defaults to false. */
    required?: FormControlProps['required'];
    /** Disable the control. The browser defaults to false. */
    disabled?: FormControlProps['disabled'];
    /** Sets html name attribute for the underlying control. Useful for mapping to a data field. */
    name?: FormControlProps['name'];
    /** Sets checked prop via onChange when using as controlled component. */
    checked?: RadioCheckProps['checked'];
    /** Initialize checked prop when using as uncontrolled component. */
    defaultChecked?: RadioCheckProps['defaultChecked'];
    /**
     * Sets Checkbox to an an [indeterminate state](https://css-tricks.com/almanac/selectors/i/indeterminate/#indeterminate-checkboxes).
     * @default false
     */
    indeterminate?: RadioCheckProps['indeterminate'];
    /** Set visual state based on a validation state. */
    status?: FormControlProps['status'];
    /** Callback invoked when this particular checkbox changes selection. */
    onChange?: (e: ChangeEvent<HTMLInputElement>) => void;
}
declare const CB: FC<CheckboxProps & ForwardProps>;
export default CB;
//# sourceMappingURL=Checkbox.d.ts.map