{"version":3,"file":"SingleSelectInput.types.js","sourceRoot":"","sources":["../../../../src/components/ComboBox/SingleSelectInput/SingleSelectInput.types.ts"],"names":[],"mappings":"","sourcesContent":["import { ChangeEvent, KeyboardEvent, ReactNode } from 'react';\n\nimport { FormControlProps } from '../../FormControl';\nimport ComboBoxProps, { Selected } from '../ComboBox.types';\n\nexport default interface SingleSelectInputProps {\n  /** List of items to be represented as pills. */\n  selected?: Selected;\n  /** Input value */\n  value?: string;\n  /** Callback invoked when user accepts custom value by pressing enter. */\n  onNew?: (text: string) => void;\n  /** Callback fired when internal input value changes. */\n  onChange?: (e: ChangeEvent<HTMLInputElement>) => void;\n  /** Callback fired on every key stroke on input field. */\n  onKeyDown?: (e: KeyboardEvent<HTMLInputElement>) => void;\n  /** Callback fired when AI suggestion is accepted/rejected */\n  onResolveSuggestion?: FormControlProps['onResolveSuggestion'];\n  /** Makes the input non editable and non clickable. The browser defaults to false. */\n  readOnly?: FormControlProps['readOnly'];\n  /** Disable the control. The browser defaults to false. */\n  disabled?: FormControlProps['disabled'];\n  /** Set visual state based on a validation state. */\n  status?: FormControlProps['status'];\n  /** Placeholder visible on empty input. */\n  placeholder?: string;\n  /** Additional actions related to the input. */\n  actions?: ReactNode;\n  /** A visual to render a preview for the selected item */\n  visual?: ComboBoxProps['visual'];\n}\n"]}