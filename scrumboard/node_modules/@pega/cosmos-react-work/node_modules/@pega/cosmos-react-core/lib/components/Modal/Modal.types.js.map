{"version":3,"file":"Modal.types.js","sourceRoot":"","sources":["../../../src/components/Modal/Modal.types.ts"],"names":[],"mappings":"","sourcesContent":["import type { ComponentType, ReactNode, RefObject, Context } from 'react';\n\nimport type { ProgressProps } from '@pega/cosmos-react-core';\n\nimport type { BaseProps, AsProp, DeferInfer } from '../../types';\n\nexport interface ModalManagerProps {\n  /** Content that will be provided modal manager context. */\n  children: ReactNode;\n}\n\nexport interface ModalOptions {\n  /**\n   * If true, the Modal will render as an alert that is not dismissible.\n   * @default false\n   */\n  alert?: boolean;\n  /**\n   * Toggle Esc keypress action or clicking backdrop to dismiss Modal. Also displays dismiss button on Modal header.\n   * Not valid for Modals of type alert.\n   * @default alert ? false : true\n   */\n  dismissible?: boolean;\n  /**\n   * Toggle minimize button in header thereby helping in rendering minimizable/non-minimizable Modals.\n   * Not valid for Modals of type alert.\n   * @default false\n   */\n  minimizable?: boolean;\n  /**\n   * Toggle maximize button in header thereby helping in rendering maximizable/non-maximizable Modals.\n   * Not valid for Modals of type alert.\n   * @default false\n   */\n  maximizable?: boolean;\n  /** Positions the modal in the right corner without backdrop\n   * @default false\n   */\n  dockable?: boolean;\n  /**\n   * If true, the Modal will initially render in a minimized state.\n   * @default false\n   */\n  defaultMinimized?: boolean;\n  /**\n   * If true, the Modal content will be removed from the DOM when in a minimized state.\n   * @default true\n   */\n  unmountWhenMinimized?: boolean;\n  /**\n   * Used to identify the modal. Will be passed back as an argument in life cycle functions.\n   */\n  id?: string;\n  /**\n   * Life cycle function that will be run when the modal is minimized.\n   */\n  onMinimize?: (id: string) => void;\n  /**\n   * Life cycle function that will be run when the modal is maximized.\n   */\n  onMaximize?: (id: string) => void;\n  /**\n   * Life cycle function that will be run when the modal is maximized.\n   */\n  onDock?: (id: string) => void;\n  /**\n   * Life cycle function that will be run when the modal is activated (un minimized).\n   */\n  onActivate?: (id: string) => void;\n  /**\n   * Life cycle function that will be run when the modal is dismissed.\n   */\n  onDismiss?: (id: string) => void;\n}\n\nexport interface ModalProps extends BaseProps, AsProp {\n  /**\n   * Place a modal into a loading state by way of a bool or an object which allows for a custom message and determinate progress.\n   */\n  progress?: boolean | Pick<ProgressProps, 'message' | 'minValue' | 'maxValue' | 'value'>;\n  /**\n   * Heading for the Modal.\n   */\n  heading: ReactNode;\n  /**\n   * Count for list data presented in the Modal.\n   */\n  count?: number;\n  /**\n  /**\n   * Content for the Modal.\n   */\n  children: ReactNode;\n  /**\n   * Actions for the Modal.\n   */\n  actions?: ReactNode;\n  /**\n   * Render the modal in full width and height.\n   * @default false\n   */\n  stretch?: boolean;\n  /**\n   * Toggle to position the Modal vertically centered or not.\n   * @default false\n   */\n  center?: boolean;\n  /**\n   * Automatically compute the width of the Modal based on the content.\n   * @default false\n   */\n  autoWidth?: boolean;\n  /**\n   * Takes a React Ref of the element to be focused initially on mounting Modal.\n   */\n  defaultFocus?: RefObject<HTMLElement>;\n  /**\n   * Accepts a callback function that gets invoked before opening a Modal.\n   */\n  onBeforeOpen?: () => void;\n  /**\n   * Accepts a callback function that gets invoked after opening a Modal.\n   */\n  onAfterOpen?: () => void;\n  /**\n   * Accepts a callback function that gets invoked before closing a Modal.\n   */\n  onBeforeClose?: () => void;\n  /**\n   * Accepts a callback function that gets invoked after closing a Modal.\n   */\n  onAfterClose?: () => void;\n  /**\n   * Accepts a callback function that returns a boolean before dismissing a modal.\n   * If the boolean is false, the modal will not be dismissed.\n   */\n  onRequestDismiss?: () => boolean | void;\n  /**\n   * Accepts a callback function that returns a boolean before minimizing a modal.\n   * If the boolean is false, the modal will not be minimized.\n   */\n  onRequestMinimize?: () => boolean | void;\n  /**\n   * Accepts a callback function that returns a boolean before maximizing a modal.\n   * If the boolean is false, the modal will not be maximized.\n   */\n  onRequestMaximize?: () => boolean | void;\n  /**\n   * Accepts a callback function that returns a boolean before docking a modal.\n   * If the boolean is false, the modal will not be dockable.\n   */\n  onRequestDock?: () => boolean | void;\n  /**\n   * Accepts a callback function that returns a boolean before activating a modal.\n   * If the boolean is false, the modal will not be activated.\n   */\n  onRequestActivate?: () => boolean | void;\n}\n\nexport type ModalState = 'open' | 'closed' | 'minimized' | 'maximized' | 'docked';\n\nexport interface ModalMethods<P extends object = object> {\n  /**\n   * Closes the referenced Modal when called.\n   */\n  dismiss: () => void;\n  /**\n   * Updates the referenced Modal with a set of props.\n   */\n  update: (props: Partial<P>) => void;\n  /**\n   * Minimizes the referenced Modal.\n   */\n  minimize: () => void;\n  /**\n   * Maximizes the referenced Modal.\n   */\n  maximize: () => void;\n  /**\n   * docks the referenced Modal.\n   */\n  dock: () => void;\n  /**\n   * Will reopen the referenced Modal if minimized, and minimize any open Modals that are minimizable.\n   */\n  activate: () => void;\n  /**\n   * Removes the referenced Modal from the DOM.\n   */\n  unmount: () => void;\n}\n\nexport interface ModalManagerContextValue {\n  /**\n   * The function that will create the Modal. This function accepts the component to render a Modal, props for that component, and options for that Modal.\n   */\n  create: <P extends object>(\n    component: ComponentType<P>,\n    props?: DeferInfer<P>,\n    options?: ModalOptions\n  ) => ModalMethods<P>;\n  ModalContext: Context<ModalContextValue>;\n  initialized: boolean;\n}\n\nexport interface ModalContextValue extends ModalMethods, ModalOptions {\n  state: ModalState;\n  top: boolean;\n  initialized: boolean;\n}\n\nexport interface ModalObject<P extends object = object> {\n  id: string;\n  state: ModalState;\n  methods: ModalMethods<P>;\n  props?: P;\n  Component: ComponentType<P>;\n  options: ModalOptions;\n}\n"]}