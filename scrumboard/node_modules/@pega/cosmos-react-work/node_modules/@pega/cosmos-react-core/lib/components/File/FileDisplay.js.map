{"version":3,"file":"FileDisplay.js","sourceRoot":"","sources":["../../../src/components/File/FileDisplay.tsx"],"names":[],"mappings":";AAAA,OAAO,EAAE,UAAU,EAA2C,MAAM,OAAO,CAAC;AAG5E,OAAO,IAAI,MAAM,SAAS,CAAC;AAE3B,OAAO,QAA2B,MAAM,YAAY,CAAC;AAqBrD,MAAM,WAAW,GAAuD,UAAU,CAChF,CACE,EACE,WAAW,EACX,KAAK,EACL,OAAO,EACP,SAAS,EACT,SAAS,EACT,UAAU,EACV,GAAG,SAAS,EACsB,EACpC,GAA4B,EAC5B,EAAE;IACF,IAAI,OAAO,KAAK,MAAM,IAAI,CAAC,KAAK,EAAE;QAChC,OAAO,CACL,eAAM,GAAG,EAAE,GAAG,KAAM,SAAS,YAC1B,KAAK,CAAC,CAAC,CAAC,WAAW,IAAI,KAAK,CAAC,CAAC,CAAC,8BAAkB,MAAM,6BAAsB,GACzE,CACR,CAAC;KACH;IAED,IAAI,OAAO,KAAK,MAAM;QACpB,OAAO,CACL,KAAC,IAAI,IAAC,GAAG,EAAE,GAA6B,KAAM,SAAS,EAAE,IAAI,EAAE,KAAK,YACjE,WAAW,IAAI,KAAK,GAChB,CACR,CAAC;IAEJ,OAAO,CACL,KAAC,QAAQ,OACH,SAAS,EACb,GAAG,EAAE,GAA6B,EAClC,IAAI,EAAE,WAAW,IAAI,KAAK,EAC1B,GAAG,EAAE,KAAK,KACN;YACF,SAAS;YACT,UAAU;YACV,SAAS;SACV,GACD,CACH,CAAC;AACJ,CAAC,CACF,CAAC;AAEF,eAAe,WAAW,CAAC","sourcesContent":["import { forwardRef, FunctionComponent, PropsWithoutRef, Ref } from 'react';\n\nimport { BaseProps, ForwardProps, NoChildrenProp } from '../../types';\nimport Link from '../Link';\n\nimport FileItem, { FileItemProps } from './FileItem';\n\nexport interface FileDisplayProps\n  extends Pick<FileItemProps, 'onPreview' | 'onDownload'>,\n    BaseProps,\n    NoChildrenProp {\n  /** URL address */\n  value?: string;\n  /** The text to be displayed. */\n  displayText?: string;\n  /**\n   * Display value either as file, link only or textual representation.\n   * @default \"file\"\n   * */\n  variant?: 'file' | 'link' | 'text';\n  /** Thumbnail image. */\n  thumbnail?: string;\n  /** Ref for the wrapping element. */\n  ref?: Ref<HTMLDivElement | HTMLAnchorElement | HTMLSpanElement>;\n}\n\nconst FileDisplay: FunctionComponent<FileDisplayProps & ForwardProps> = forwardRef(\n  (\n    {\n      displayText,\n      value,\n      variant,\n      thumbnail,\n      onPreview,\n      onDownload,\n      ...restProps\n    }: PropsWithoutRef<FileDisplayProps>,\n    ref: FileDisplayProps['ref']\n  ) => {\n    if (variant === 'text' || !value) {\n      return (\n        <span ref={ref} {...restProps}>\n          {value ? displayText || value : <span aria-hidden='true'>&ndash;&ndash;</span>}\n        </span>\n      );\n    }\n\n    if (variant === 'link')\n      return (\n        <Link ref={ref as Ref<HTMLAnchorElement>} {...restProps} href={value}>\n          {displayText || value}\n        </Link>\n      );\n\n    return (\n      <FileItem\n        {...restProps}\n        ref={ref as Ref<HTMLButtonElement>}\n        name={displayText || value}\n        url={value}\n        {...{\n          thumbnail,\n          onDownload,\n          onPreview\n        }}\n      />\n    );\n  }\n);\n\nexport default FileDisplay;\n"]}