import arg from 'arg';
import chalk from 'chalk';

import {
  authenticate,
  buildComponent,
  buildAllComponents,
  createComponent,
  createAllComponents,
  deleteComponent,
  deleteAllComponents,
  initProject,
  listComponents,
  publishComponent,
  publishAllComponents,
  renameComponent,
  revertWebPack,
  promoteWebPack,
  updateComponent,
  validate,
  upgrade
} from './tasks/index.js';

const TASKS = {
  INIT: 'init',
  CREATE: 'create',
  CREATE_ALL: 'createAll',
  BUILD: 'buildComponent',
  BUILD_ALL: 'buildAllComponents',
  PROMOTE_WEBPACK: 'promoteWebPack',
  REVERT_WEBPACK: 'revertWebPack',
  PUBLISH: 'publish',
  PUBLISH_All: 'publishAll',
  RENAME: 'rename',
  LIST: 'list',
  VALIDATE_SCHEMA: 'validateSchema',
  UPDATE: 'update',
  DELETE: 'delete',
  DELETE_ALL: "deleteAll",
  AUTHENTICATE: 'authenticate',
  UPGRADE: 'upgrade'
};

const parseArgumentsIntoOptions = rawArgs => {
  const args = arg(
    {
      '--install': Boolean,
      '--skipBundle': Boolean
    },
    {
      argv: rawArgs.slice(2)
    }
  );
  return {
    task: args._[0],
    git: true, // args['--git'] || false
    runInstall: true, // args['--install'] || false
    skipBundle: args['--skipBundle'] || false,
    params: rawArgs
  };
};

export default async (args = []) => {
  const options = parseArgumentsIntoOptions(args);
  const { task } = options;
  switch (task) {
    case TASKS.INIT: {
      initProject(options);
      break;
    }
    case TASKS.CREATE: {
      createComponent(options);
      break;
    }
    case TASKS.CREATE_ALL: {
      createAllComponents(options);
      break;
    }
    case TASKS.PROMOTE_WEBPACK: {
      promoteWebPack(options);
      break;
    }
    case TASKS.REVERT_WEBPACK: {
      revertWebPack(options);
      break;
    }
    case TASKS.PUBLISH: {
      publishComponent(options);
      break;
    }
    case TASKS.PUBLISH_All: {
      publishAllComponents(options);
      break;
    }
    case TASKS.RENAME: {
      renameComponent(options);
      break;
    }
    case TASKS.BUILD: {
      buildComponent(options);
      break;
    }
    case TASKS.BUILD_ALL: {
      buildAllComponents(options);
      break;
    }
    case TASKS.LIST: {
      listComponents(options);
      break;
    }
    case TASKS.VALIDATE_SCHEMA: {
      validate(options);
      break;
    }
    case TASKS.UPDATE: {
      updateComponent(options);
      break;
    }
    case TASKS.DELETE: {
      deleteComponent(options);
      break;
    }
    case TASKS.DELETE_ALL: {
      deleteAllComponents(options);
      break;
    }
    case TASKS.AUTHENTICATE: {
      authenticate(options);
      break;
    }
    case TASKS.UPGRADE: {
      upgrade(options);
      break;
    }
    default: {
      console.log(chalk.red(`No task matched with ${task}`));
      break;
    }
  }
};
