import inquirer from 'inquirer';
import Listr from 'listr';
import chalk from 'chalk';

import validate from '../validator/index.js';

import bundleComponent from '../bundle/index.js';
import lintComponent from '../linter/index.js';
import { getPublishComponentQuestions } from './helper.js';
import { getComponentDirectoryPath, showVersion } from '../../util.js';

export default async options => {
  showVersion();

  const questions = await getPublishComponentQuestions();
  const answers = await inquirer.prompt(questions);
  const { componentKey, sourceMap, devBuild } = answers;

  let content = {
    ...answers
  };

  const sDevBuild = devBuild ? '(dev build)' : '';
  const tasks = new Listr(
    [
      {
        title: 'Validate config schema',
        task: async () => {
          await validate(componentKey);
        }
      },
      {
        title: 'Lint component',
        task: async () => {
          const targetDirectory = await getComponentDirectoryPath(componentKey);
          // console.log(`in buildComponent Lint component task: componentKey: ${componentKey} targetDirectory: ${targetDirectory}`);
          await lintComponent(targetDirectory);
        }
      },
      {
        title: `Bundle Component ${sDevBuild}`,
        type: 'confirm',
        task: async () => await bundleComponent(componentKey, sourceMap, devBuild),
        skip: () => (options.skipBundle ? 'Skipped bundling component' : undefined)
      }
    ],
    {
      exitOnError: true
    }
  );

  await tasks.run().catch(err => {
    console.log(chalk.bold.red(err.toString()));
  });
  return true;
};
