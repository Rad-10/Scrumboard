import fs from 'fs';
import path from 'path';

import AdmZip from 'adm-zip';
import chalk from 'chalk';

import {
  getComponentDirectoryPath,
  getComponents,
  getPegaServerConfig
} from '../../util.js';
import { COMPONENT_SCHEMA } from '../../constants.js';

export const cleanUp = async () => {
  fs.rm('dist/components', { recursive: true }, err => {
    if (err) {
      throw err;
    }
  });

  fs.rm('lib', { recursive: true }, err => {
    if (err) {
      throw err;
    }
  });
}



export const getBuildComponentQuestions = async ()  => {
  const components = await getComponents();
  const defaultPegaConfig = await getPegaServerConfig();

  if (components.length == 0) {
    console.log(chalk.redBright("No components to build"));
    process.exit(1);
  }

  return [
    {
      name: 'devBuild',
      type: 'confirm',
      message: 'Generate development build ?',
      default: defaultPegaConfig.devBuild
    }
  ];
};



export const zipComponent = async (componentKey) => {
  const srcDirectory = await getComponentDirectoryPath(componentKey);
  const buildDirectory = await path.join(path.resolve(), 'dist/components', componentKey);
  const configJson = `${srcDirectory}/config.json`;

  const zip = new AdmZip();

  zip.addLocalFolder(srcDirectory, 'src/');
  zip.addLocalFile(configJson);
  zip.addLocalFolder(buildDirectory);
  const zipContent = zip.toBuffer().toString('base64');

  const configContent = Buffer.from(fs.readFileSync(`${srcDirectory}/config.json`)).toString();
  // clean up now happens in function cleanUp
  // fs.rmd('dist/components', { recursive: true }, err => {
  //   if (err) {
  //     throw err;
  //   }
  // });
  return { zipContent, configContent };
};
