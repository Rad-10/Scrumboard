import inquirer from 'inquirer';
import Listr from 'listr';
import chalk from 'chalk';

import validate from '../validator/index.js';
import bundleComponent from '../bundle/index.js';
import { lintComponent } from '../linter/index.js';
import { getComponentDirectoryPath, showVersion, getComponents } from '../../util.js';

import { getBuildComponentQuestions, cleanUp } from './helper.js';


export function getCustomTasks(componentKey, sourceMap, devBuild, options) {

  const sDevBuild = devBuild ? '(dev build)' : '';
  return new Listr(
    [
      {
        title: 'Validate config schema',
        task: async () => {
          await validate(componentKey);
        }
      },
      {
        title: 'Lint component',
        task: async () => {
          const targetDirectory = await getComponentDirectoryPath(componentKey);
          // console.log(`in buildComponent Lint component task: componentKey: ${componentKey} targetDirectory: ${targetDirectory}`);
          await lintComponent(targetDirectory);
        }
      },
      {
        title: `Bundle component ${sDevBuild}`,
        task: async () => bundleComponent(componentKey, sourceMap, devBuild),
        skip: () => (options.skipBundle ? 'Skipped bundling component' : undefined)
      }
    ],
    {
      exitOnError: true
    }
  );


}




export default async (options) => {
  showVersion();


  const components = await getComponents();
  let sourceMap;
  let devBuild;

  if (options.params.length >= 4) {
    const dBuild = options.params[3];
    devBuild = (dBuild === 'Y' ||
    dBuild === 'y' ||
    dBuild === true ||
    dBuild === 'true') ? true : false;
  }
  else {
    const questions = await getBuildComponentQuestions();
    const answers = await inquirer.prompt(questions);
    ({ sourceMap, devBuild } = answers);
  }


  for (const componentKey of components) {
    console.log(chalk.bold.green(`Building ${componentKey}`));

    const myCustomTasks = getCustomTasks(componentKey, sourceMap, devBuild, options );

    // eslint-disable-next-line no-await-in-loop
    await myCustomTasks.run().catch(err => {
        console.log(chalk.bold.red(err.toString()));
    });
  }

  // once done, remove leftover directories
  await cleanUp();

  return true;
};
