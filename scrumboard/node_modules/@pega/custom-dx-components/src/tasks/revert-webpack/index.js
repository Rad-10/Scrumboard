
import fs from 'fs';
import path from 'path';
import { join } from 'path';
import { URL, fileURLToPath } from 'url';
import chalk from 'chalk';

import {
  convertIntoPascalCase,
  showVersion
} from '../../util.js';

import {
  WEBPACK_CONFIG_JS_FILENAME,
  BUILDER_INDEX_FILE_PATH
} from '../../constants.js';
import build from '@pega/custom-dx-components/src/tasks/build/index.js';
import { up } from 'inquirer/lib/utils/readline.js';



export const renamePromotedWebPack = async () => {

  // call this function from top level
  //fs.copyFileSync("./webpack.config.js", "webpack.config.js")

  const promoteWebPackDir = path.resolve(WEBPACK_CONFIG_JS_FILENAME);
  const renamedPromoteWebPackDir = path.resolve(WEBPACK_CONFIG_JS_FILENAME + ".notused");

  try {
    fs.renameSync(promoteWebPackDir, renamedPromoteWebPackDir);
  }
  catch (ex) {
    console.log(chalk.bold.red(`File ${promoteWebPackDir} not found.`));
    process.exit();
  }

  console.log(chalk.bold.green(`File ${promoteWebPackDir} marked as not used.`));

}

export const revertBuilder = async () => {

  const builderIndexDir = fileURLToPath(new URL(BUILDER_INDEX_FILE_PATH, import.meta.url));

  let indexFileJS = fs.readFileSync(builderIndexDir, { encoding: 'utf8' });

  if (indexFileJS.length > 0) {
    // uncomment out original webpack reference
    indexFileJS = indexFileJS.replaceAll("// import configFactory from './webpack.config.js';", "import configFactory from './webpack.config.js';");

    // comment out promoted webpack reference
    if (indexFileJS.indexOf("// import configFactory from '../../../../../../../webpack.config.js';") < 0) {
      indexFileJS = indexFileJS.replaceAll("import configFactory from '../../../../../../../webpack.config.js';", "// import configFactory from '../../../../../../../webpack.config.js';");
    }

    fs.writeFileSync(builderIndexDir, indexFileJS, { encoding: 'utf8' });

    console.log(chalk.bold.green(`Bundler reverted to using internal webpack.config.js.`));
  }


}

export default async options => {
  showVersion();

  await renamePromotedWebPack();
  await revertBuilder();

};
