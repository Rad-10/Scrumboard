import chalk from 'chalk';
import inquirer from 'inquirer';
import ora from 'ora';


import {
  deleteLocalComponent,
  deleteServerComponent,
  getComponents,
  getPegaServerConfig
} from '../../util.js';
import { getComponentsFromServer } from '../list/helper.js';



export const SOURCE_OF_COMPONENT_TYPES = {
  SERVER: 'Server',
  LOCAL: 'Local'
};

export const getDeleteComponentsQuestions = async (options, sourceOfComponentsOption) => {
  const defaultPegaServerConfig = await getPegaServerConfig();

  return [
    {
      name: 'sourceOfComponents',
      type: 'rawlist',
      message: 'Delete components from Server or Local ?',
      choices: Object.values(SOURCE_OF_COMPONENT_TYPES),
      default: defaultPegaServerConfig.sourceOfComponents,
      when() {
        return !options.params[3];
      }
    }
  ];
};

export const deleteLocalComponents = async sourceOfComponents => {
  const localComponents = await getComponents();

  if (localComponents.length > 0) {
    const answers = await inquirer.prompt([
      {
        name: 'componentKey',
        type: 'rawlist',
        message: 'Select component to delete',
        choices: localComponents
      },
      {
        name: 'confirmDeletion',
        type: 'confirm',
        message: 'Are you sure ?',
        default: false
      }
    ]);
    if (answers.confirmDeletion) {
      await deleteLocalComponent(answers.componentKey);
    }
  } else {
    console.log(chalk.bold.redBright(`No custom components in ${sourceOfComponents}`));
  }
};

export const deleteServerComponents = async (sourceOfComponents, answers) => {
  const spinner = ora('Fetching components from server').start();
  const data = await getComponentsFromServer(answers);

  const serverComponents = JSON.parse(data);
  spinner.stop();
  if (serverComponents && serverComponents.pxResults?.length > 0) {
    const choicesArr = serverComponents.pxResults.map(({ label, pyRuleSet, pyRuleSetVersion }) => {
      const name = `${standardizeStr(label, 45)} ${standardizeStr(pyRuleSet, 30)} ${standardizeStr(
        pyRuleSetVersion,
        20
      )}`;

      const value = `${label}~|~${pyRuleSet}~|~${pyRuleSetVersion}`;
      const short = `Selected component : ${chalk.redBright(
        `${label} ${pyRuleSet} : ${pyRuleSetVersion}`
      )}`;

      return { name, value, short };
    });
    const answers = await inquirer.prompt({
      name: 'componentToDelete',
      type: 'rawlist',
      pageSize: 10,
      message: `Select component to delete \n  ${standardizeStr('Rule name', 48)} ${standardizeStr(
        'Ruleset name',
        30
      )} ${standardizeStr('Ruleset version', 22)}`,
      choices: choicesArr
    });
    await deleteServerComponent(answers.componentToDelete);


  } else {
    console.log(chalk.bold.redBright(`No custom components in ${sourceOfComponents}`));
  }
};

export const standardizeStr = (str, leng) => {
  for (let i = str.length; i <= leng; i++) {
    str += ' ';
  }
  return str;
};
