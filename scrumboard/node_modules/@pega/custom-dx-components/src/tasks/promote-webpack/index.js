
import fs from 'fs';
import path from 'path';
import { join } from 'path';
import { URL, fileURLToPath } from 'url';
import chalk from 'chalk';
import inquirer from 'inquirer';

import {
  convertIntoPascalCase,
  showVersion
} from '../../util.js';

import {
  WEBPACK_CONFIG_JS_FILENAME,
  BUILDER_INDEX_FILE_PATH
} from '../../constants.js';



let redirectFile = "";

export const copyWebPack = async () => {

   // first check to see if already have the file
  const newWebPackDir = path.resolve(WEBPACK_CONFIG_JS_FILENAME);
  let override = true;
  if (fs.existsSync(newWebPackDir)) {

    console.log("Promoted file " + chalk.bold.yellow(`${newWebPackDir}`) + " already exists.");
    const questions = [
      {
        name: 'override',
        type: 'confirm',
        message: `Overwrite`,
        default: false
      }
    ];

    await inquirer.prompt(questions).then(async answers => {
      override = answers.override;
      });

  }


  if (override) {
    // call this function from top level
    //fs.copyFileSync("./webpack.config.js", "webpack.config.js")
    const promoteWebPackDir = fileURLToPath(new URL(WEBPACK_CONFIG_JS_FILENAME, import.meta.url));

    fs.copyFileSync(promoteWebPackDir, newWebPackDir);

  }

  redirectFile = newWebPackDir;



}

export const updateBuilder = async () => {

  const builderIndexDir = fileURLToPath(new URL(BUILDER_INDEX_FILE_PATH, import.meta.url));

  let indexFileJS = fs.readFileSync(builderIndexDir, { encoding: 'utf8' });

  if (indexFileJS.length > 0) {
    // comment out original webpack reference

    // if not commented out, comment out
    if (indexFileJS.indexOf("//import configFactory from './webpack.config.js';") < 0) {
      indexFileJS = indexFileJS.replaceAll("import configFactory from './webpack.config.js';", "//import configFactory from './webpack.config.js';");
    }

    // uncomment out promoted webpack reference
    indexFileJS = indexFileJS.replaceAll("//import configFactory from '../../../../../../../webpack.config.js';", "import configFactory from '../../../../../../../webpack.config.js';");

    fs.writeFileSync(builderIndexDir, indexFileJS, { encoding: 'utf8' });

    console.log(chalk.bold.green(`Bundler now using ${redirectFile}.`));
    console.log(chalk.bold.green(`Utilize this file for webpack mofifications.`));
  }


}

export default async options => {
  showVersion();

  await copyWebPack();
  await updateBuilder();

};
