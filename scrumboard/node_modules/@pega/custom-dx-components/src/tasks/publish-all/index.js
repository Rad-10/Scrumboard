import inquirer from 'inquirer';
import Listr from 'listr';
import chalk from 'chalk';

import validate from '../validator/index.js';
import bundleComponent from '../bundle/index.js';
import { lintComponent } from '../linter/index.js';
import { getComponents, getComponentDirectoryPath, showVersion } from '../../util.js';

import { getPublishComponentQuestions, publishComponentToServer, zipComponent, cleanUp } from './helper.js';

export function getCustomTasks(componentKey, sourceMap, devBuild, content, options) {
  const sDevBuild = devBuild ? '(dev build)' : '';
  // eslint-disable-next-line no-unneeded-ternary
  const doFetch = options.params.length >= 7 ? false : true;
  return new Listr(
    [
      {
        title: 'Validate config schema',
        task: async () => {
          await validate(componentKey);
        }
      },
      {
        title: `Bundle Component ${sDevBuild}`,
        task: async () => {
          await bundleComponent(componentKey, sourceMap, devBuild);
        },
        skip: () => (options.skipBundle ? 'Skipped bundling component' : undefined)
      },
      {
        title: 'Lint component',
        task: async () => {
          const targetDirectory = await getComponentDirectoryPath(componentKey);
          // console.log(`in buildComponent Lint component task: componentKey: ${componentKey} targetDirectory: ${targetDirectory}`);
          await lintComponent(targetDirectory);
        }
      },
      {
        title: 'Zip Component',
        task: async () => {
          const output = await zipComponent(componentKey);
          content = { ...content, ...output };
        }
      },
      {
        title: 'Publish Component',
        task: async () => {
          await publishComponentToServer(content, doFetch);
        }
      }
    ],
    {
      exitOnError: true
    }
  );
}

export default async (options) => {
  showVersion();

  const components = await getComponents();

  if (components.length === 0) {
    console.log(chalk.redBright('No components to publish'));
    process.exit();
  }

  let componentKey;
  let sourceMap;
  let devBuild;
  let content;

  if (options.params.length >= 7) {
    const rulesetName = options.params[3];
    const rulesetVersion = options.params[4];
    const dBuild = options.params[5];
    devBuild = dBuild === 'Y' || dBuild === 'y' || dBuild === true || dBuild === 'true';

    content = { componentKey, rulesetName, rulesetVersion, devBuild };
  } else {
    const questions = await getPublishComponentQuestions();
    const answers = await inquirer.prompt(questions);
    ({ sourceMap, devBuild } = answers);

    content = {
      ...answers
    };
  }

  // eslint-disable-next-line no-shadow
  for (const componentKey of components) {
    console.log(chalk.bold.green(`Publishing: ${componentKey}`));

    const myCustomTasks = getCustomTasks(componentKey, sourceMap, devBuild, content, options);

    // eslint-disable-next-line no-await-in-loop
    await myCustomTasks.run().catch((err) => {
      console.log(chalk.bold.red(err.toString()));
    });
  }

  // once done, remove leftover directories
  await cleanUp();

  return true;
};
