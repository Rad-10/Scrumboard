import fs from 'fs';
import https from 'https';

import chalk from 'chalk';
import fetch from 'node-fetch';

import { LIST_COMPONENT_SERVICE_REST_ENDPOINT, LP_LIST_COMPONENT_SERVICE_REST_ENDPOINT, TOKEN_PATH } from '../../constants.js';
import { constructCompleteUrl, getComponents, getPegaServerConfig } from '../../util.js';

export const SOURCE_OF_COMPONENT_TYPES = {
  SERVER: 'Server',
  LOCAL: 'Local'
};

export const getListComponentsQuestions = async (options, sourceOfComponentsOption) => {
  const defaultPegaServerConfig = await getPegaServerConfig();

  return [
    {
      name: 'sourceOfComponents',
      type: 'rawlist',
      message: 'List components from Server or Local ?',
      choices: Object.values(SOURCE_OF_COMPONENT_TYPES),
      default: defaultPegaServerConfig.sourceOfComponents,
      when() {
        return !options.params[3];
      }
    }
  ];
};

export const listLocalComponents = async sourceOfComponents => {
  let localComponents = await getComponents();
  localComponents = localComponents.map(name => ({ 'Rule name': name }));
  if (localComponents.length > 0) {
    console.log(chalk.bold.blueBright(`List of custom components in ${sourceOfComponents}`));
    console.table(localComponents, ['Rule name']);
  } else {
    console.log(chalk.bold.redBright(`No custom components in ${sourceOfComponents}`));
  }
};

export const getComponentsFromServer = async data => {
  const defaultPegaServerConfig = await getPegaServerConfig();
  const isLaunchpad = defaultPegaServerConfig.serverType === 'launchpad';
  const url = constructCompleteUrl(
    defaultPegaServerConfig.server,
    isLaunchpad ? LP_LIST_COMPONENT_SERVICE_REST_ENDPOINT :  LIST_COMPONENT_SERVICE_REST_ENDPOINT
  );
  return new Promise((resolve, reject) => {
    try {
      fs.readFile(TOKEN_PATH, 'utf8', (err, data) => {
        if (err) {
          reject(
            `\n${chalk.bold.red(
              'Error occured in authentication. Please regenerate using authenticate'
            )}`
          );
        }
        if (data) {
          const {
            access_token: accessToken,
            token_type: tokenType,
            refresh_token: refreshToken
          } = JSON.parse(data);
          let status = 500;

          const headers = {
            Authorization: `${tokenType} ${accessToken}`
          }

          if(isLaunchpad) {
            headers.cookie = `Pega-AAT=${accessToken}`;
          }

          fetch(url, {
            method: 'GET',
            agent: new https.Agent({ rejectUnauthorized: false }),
            headers
          })
            .then(response => {
              status = response.status;
              return response.text();
            })
            .then(resp => {
              const respData = JSON.parse(resp);
              if (status === 401) {
                throw new Error(
                  'Error occured in authentication. Please regenerate using authenticate'
                );
                // console.log(accessTokenUri, refreshToken);
                /* TODO - Handle refresh_token */
              } else if (status == 200) {
                resolve(resp);
              } else {
                throw new Error(`${respData.message}`);
              }
            })
            .catch(e => reject(`${chalk.bold.red(e)}`));
        }
      });
    } catch (error) {
      console.log(`\n${chalk.bold.red(error)}`);
      reject(`${chalk.bold.red(error)}`);
    }
  });
};

export const displayServerComponents = async data => {
  const defaultPegaServerConfig = await getPegaServerConfig();
  const isLaunchpad = defaultPegaServerConfig.serverType === 'launchpad';
  const parsedData = JSON.parse(data);
  const list = isLaunchpad ? parsedData.components : parsedData.pxResults;
  /**
   * TODO: Need to modify the components list mapping code to support Launchpad components
   */
  const componentList = list?.map(({ label, pyRuleSet, pyRuleSetVersion }) => ({
    'Rule name': label,
    'Ruleset name': pyRuleSet,
    'Ruleset version': pyRuleSetVersion
  }));

  if (componentList && componentList.length > 0) {
    console.log(
      chalk.bold.blueBright(`List of custom components in ${defaultPegaServerConfig.server}`)
    );
    console.table(componentList, ['Rule name', 'Ruleset name', 'Ruleset version']);
  } else {
    console.log(chalk.bold.redBright(`No custom components in ${defaultPegaServerConfig.server}`));
  }
};
