import { useRef, useMemo } from 'react';
/**
 * @example const ref = useConsolidatedRefs(refs);
 * @param refs The ref or refs to consolidate.
 * @returns ref:: The consolidated ref.
 */
const useConsolidatedRef = (...refs) => {
    const targetRef = useRef(null);
    const refProxy = useMemo(() => ({ current: null }), []);
    Object.defineProperty(refProxy, 'current', {
        configurable: true,
        enumerable: true,
        get: () => targetRef.current,
        set: value => {
            targetRef.current = value;
            refs.forEach(ref => {
                if (!ref)
                    return;
                if (typeof ref === 'function') {
                    ref(targetRef.current);
                }
                else {
                    ref.current = targetRef.current;
                }
            });
        }
    });
    return refProxy;
};
export default useConsolidatedRef;
//# sourceMappingURL=useConsolidatedRef.js.map