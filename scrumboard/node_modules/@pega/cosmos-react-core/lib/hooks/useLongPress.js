import { useCallback, useRef, useState } from 'react';
const isTouchEvent = (e) => {
    return 'touches' in e;
};
const preventDefault = (e) => {
    if (!isTouchEvent(e))
        return;
    if (e.touches.length < 2 && e.preventDefault) {
        e.preventDefault();
    }
};
const useLongPress = (onLongPress, onClick, { key = 'Enter', shouldPreventDefault = true, delay = 500 } = {}) => {
    const [longPressTriggered, setLongPressTriggered] = useState(false);
    const timeout = useRef();
    const target = useRef();
    const start = useCallback((event) => {
        if (shouldPreventDefault && event.target) {
            event.target.addEventListener('touchend', preventDefault, {
                passive: false
            });
            target.current = event.target;
        }
        timeout.current = setTimeout(() => {
            onLongPress();
            setLongPressTriggered(true);
        }, delay);
    }, [onLongPress, delay, shouldPreventDefault]);
    const clear = useCallback((shouldTriggerClick = true) => {
        if (timeout.current) {
            clearTimeout(timeout.current);
        }
        if (shouldTriggerClick && !longPressTriggered) {
            onClick?.();
        }
        setLongPressTriggered(false);
        if (shouldPreventDefault && target.current) {
            target.current.removeEventListener('touchend', preventDefault);
        }
    }, [shouldPreventDefault, onClick, longPressTriggered]);
    return {
        onMouseDown: (e) => start(e),
        onTouchStart: (e) => start(e),
        onKeyDown: (e) => {
            if (e.repeat || e.key !== key)
                return;
            start(e);
        },
        onMouseUp: () => clear(),
        onKeyUp: (e) => {
            if (e.repeat || e.key !== key)
                return;
            clear();
        },
        onMouseLeave: () => clear(false),
        onTouchEnd: () => clear()
    };
};
export default useLongPress;
//# sourceMappingURL=useLongPress.js.map