import { useEffect, useCallback } from 'react';
import { getAllPopovers, normalizeElements } from '../utils';
/**
 * @example useOuterEvent(eventName, [nodes], handler = () => { doSomething; });
 * @param eventName The type of event to trigger the handler function on. Reference [DocumentEventMap](https://microsoft.github.io/PowerBI-JavaScript/interfaces/_node_modules_typedoc_node_modules_typescript_lib_lib_dom_d_.documenteventmap.html) for a list of valid events.
 * @param nodes An array of Nodes or Refs to Nodes to attach the eventName to.
 * @param handler The function that is called when the given event occurs.
 */
const useOuterEvent = (eventName, nodes, handler) => {
    const onEvent = useCallback(event => {
        const path = event.composedPath();
        const target = path[0];
        if (!(target instanceof Node))
            return;
        let childIdx = 0;
        let parentIdx = 1;
        while (path[childIdx] !== document) {
            const child = path[childIdx];
            const parent = path[parentIdx];
            if (!child || !parent)
                return;
            if (parent instanceof DocumentFragment || parent instanceof Document) {
                if (!(child instanceof Node) || !parent.contains(child))
                    return;
                childIdx = parentIdx;
            }
            else if (child instanceof DocumentFragment) {
                if (!(parent instanceof Element) || parent.shadowRoot !== child)
                    return;
                childIdx = parentIdx;
            }
            parentIdx += 1;
        }
        const normalizedNodes = normalizeElements(nodes).flatMap(node => {
            if (!(node instanceof Element) &&
                !(node instanceof Document) &&
                !(node instanceof DocumentFragment)) {
                return [node];
            }
            return [node, ...getAllPopovers(node)];
        });
        if (normalizedNodes.every(node => {
            if (!node)
                return true;
            return node !== target && !node.contains(target);
        })) {
            handler(event);
        }
    }, [...nodes, handler]);
    useEffect(() => {
        const eventNames = Array.isArray(eventName) ? eventName : [eventName];
        eventNames.forEach(event => document.addEventListener(event, onEvent));
        return () => eventNames.forEach(event => document.removeEventListener(event, onEvent));
    }, [eventName, onEvent]);
};
export default useOuterEvent;
//# sourceMappingURL=useOuterEvent.js.map