import { RefObject } from 'react';
import { TranslationFunction, TranslationPack } from '../i18n';
export declare const windowIsAvailable: boolean;
export declare const navigatorIsAvailable: boolean;
export declare const documentIsAvailable: boolean;
/** @returns Debounced function that can be called only once in given timeout */
export declare function debounce<F extends (...args: any[]) => any>(this: any, func: F, waitTime: number): (...args: Parameters<F>) => void;
/** Check for an existence of prop */
export declare function hasProp<T extends object, P extends PropertyKey>(obj: T, prop: P): obj is T & {
    [key in P]: unknown;
};
export declare function bindAll<T extends object, K extends keyof T>(obj: T, names: K[]): void;
export declare function cap(s: string): string;
/** Generate unique id for elements */
export declare function createUID(): string;
/** Returns array with numbers from given range */
export declare function range(start: number, end: number): number[];
/** Return an array of strings and regex replaced components */
export declare function replaceMatchWithElement(str: string, re: RegExp, render: (match: string) => JSX.Element): JSX.Element[];
/** Get scrollbar width */
export declare function getScrollbarWidth(): number;
/** Test element for overflow */
export declare function testElForOverflow(el: Element): boolean[];
/** Used mostly to trigger css transition after DOM append */
export declare function reflow(node?: HTMLElement | null): number;
export declare function loadScript(src: string, onLoad: (this: HTMLScriptElement, ev: Event) => any, onError: (this: HTMLScriptElement, ev: ErrorEvent) => any): void;
export declare function deepGet(obj: object, keys: PropertyKey[]): any;
/** Compares two objects by comparing each key value regardless of order. */
export declare function deepObjectComparison(valueA: any, valueB: any): boolean;
export declare function defineSmartGetter(obj: Record<string, any>, key: string, valueFn: (...args: any[]) => any): Record<string, any>;
export declare function tryCatch<T>(tryFn: () => T): T | undefined;
export declare function tryCatch<T, C>(tryFn: () => T, catchFn: (err: unknown) => C): T | C;
export declare function tryCatch<T, C, F>(tryFn: () => T, catchFn: ((err: unknown) => C) | undefined, finallyFn: () => F): F;
/**
 * Returns normalized list of elements, ie. it de-reference the element from the RefObject if needed.
 * @param els a list of elements or refs to normalize.
 * @returns a new list of the same length with the de-referenced elements.
 */
export declare const normalizeElements: <T extends EventTarget = EventTarget>(els: (T | RefObject<T | null> | null)[]) => (T | null)[];
/**
 * Returns all valid focusable elements within a given ref.
 * @param focusablesRef The ref containing the element to search for focusable elements within.
 * @returns a list of valid focusable elements within the given ref.
 */
export declare const getFocusables: (focusablesRef: RefObject<HTMLElement>) => HTMLElement[];
/**
 * Generator that returns triple of subsequent values in the given array.
 * @param array source array
 * @returns triple of previous, current and next value on every call
 */
export declare function triple<T>(array: T[]): Generator<{
    prev?: T;
    current: T;
    next?: T;
}, undefined, unknown>;
/**
 * Escape special characters in order to pass a string to the RegExp constructor.
 * @param s a string.
 * @returns a string with special characters escaped.
 */
export declare const escapeRegExp: (s: string) => string;
/**
 * Generate a RegExp with a string parameter.
 * @param s The string to match.
 * @param type How to match.
 * @param flags Standard RegExp flags.
 * @returns A RegExp with the match pattern.
 */
export declare const createStringMatcher: (s: string, type?: 'contains' | 'start' | 'boundary', flags?: string) => RegExp;
/**
 * Function generates string representation of the given list accordingly to localization rules of given locale.
 * @param list list of strings to format
 * @param t translation function used internally
 * @param locale locale tag to get the localization rules for
 * @param options formatting options
 * @returns
 */
export declare const formatListToLocaleString: (list: string[], t: TranslationFunction<TranslationPack>, locale: string, { count, separator }?: {
    count?: number | undefined;
    separator?: string | undefined;
}) => string;
/**
 * Checks if two URLs have the same origin.
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy#definition_of_an_origin Definition of an origin}
 */
export declare const sameOrigin: ({ protocol: protocolA, hostname: hostnameA, port: portA }: Pick<URL, 'protocol' | 'hostname' | 'port'>, { protocol: protocolB, hostname: hostnameB, port: portB }: Pick<URL, 'protocol' | 'hostname' | 'port'>) => boolean;
/**
 * Gets element that currently has focus with support for open shadow roots.
 * @param root Optional container to search for the active element. Defaults to `document`.
 * @returns The Element within the DOM that currently has focus.
 */
export declare const getActiveElement: (root?: DocumentOrShadowRoot) => Element | null;
export declare const popoverMap: WeakMap<Element, Set<string>>;
export declare const getAllPopovers: (parent: ParentNode) => Element[];
//# sourceMappingURL=utils.d.ts.map