{"version":3,"file":"translate.js","sourceRoot":"","sources":["../../src/i18n/translate.tsx"],"names":[],"mappings":";AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAgCjC;;;;;;GAMG;AACH,MAAM,aAAa,GAAG,CACpB,WAAc,EACd,MAAc,EACU,EAAE;IAC1B,MAAM,aAAa,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;IACnD,MAAM,YAAY,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,CAAC;IACvE,OAAO,CAAC,CACN,OAA8B,EAC9B,SAAqC,EAAE,EACvC,OAA4B,EACJ,EAAE;QAC1B,IAAI,QAAQ,GAAwB,WAAW,CAAC,OAAO,CAAC,CAAC;QACzD,IAAI,CAAC,QAAQ;YAAE,OAAO,iBAAiB,OAAO,EAAE,CAAC;QACjD,MAAM,MAAM,GAAiB,EAAE,CAAC;QAChC,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;YAChC,MAAM,IAAI,GAAG,CAAC,OAAO,EAAE,UAAU,KAAK,SAAS,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,MAAM,CACpF,OAAO,EAAE,KAAK,IAAI,CAAC,CACpB,CAAC;YACF,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;SAC3B;QACD,QAAQ,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;YACpD,MAAM,IAAI,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;YACvD,IAAI,IAAI,KAAK,SAAS,IAAI,IAAI,KAAK,EAAE;gBAAE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;QAEH,IAAI,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,IAAI,KAAK,QAAQ,IAAI,OAAO,IAAI,KAAK,QAAQ,CAAC;YAC5E,OAAO,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;QAEhC,oDAAoD;QACpD,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,KAAC,QAAQ,cAAU,IAAI,IAAR,CAAC,CAAmB,CAAC,CAAC;IACtE,CAAC,CAA2B,CAAC;AAC/B,CAAC,CAAC;AAEF,eAAe,aAAa,CAAC","sourcesContent":["import { Fragment } from 'react';\nimport type { ReactChild, ReactText } from 'react';\n\nimport { TranslationPack } from './i18n';\n\ntype TranslationTemplate = string | Record<Intl.LDMLPluralRule, string>;\n\n/**\n * Interface for advanced translation options, like plural forms.\n */\nexport interface TranslationOptions {\n  /**\n   * Value that determines which plural form will be chosen during translation.\n   * @default 0\n   */\n  count?: number;\n  /**\n   * Discriminator for pluralization type: 'cardinal' or 'ordinal'.\n   */\n  pluralType?: Intl.PluralRuleType;\n}\n\n/**\n * Function that takes translation key with optional tokens and translation options to drive the translation process.\n * Returns translated string with tokens inserted at defined slots.\n */\nexport interface TranslationFunction<T extends Record<string, TranslationTemplate>> {\n  (literal: keyof T): string;\n  (literal: keyof T, tokens: ReactText[], options?: TranslationOptions): string;\n  (literal: keyof T, tokens: ReactChild[], options?: TranslationOptions): JSX.Element[];\n}\n\n/**\n * Function returns a function capable to translate tokens based on given translation pack and given locale.\n * The passed translation object should be correlated to given locale.\n * @param translation a translation pack (might be default or completely/partially overridden).\n * @param locale locale as BCP 47 language tag. Used for pluralization rules.\n * @returns\n */\nconst translatorFor = <T extends Record<string, TranslationTemplate>>(\n  translation: T,\n  locale: string\n): TranslationFunction<T> => {\n  const cardinalRules = new Intl.PluralRules(locale);\n  const ordinalRules = new Intl.PluralRules(locale, { type: 'ordinal' });\n  return ((\n    literal: keyof TranslationPack,\n    tokens: (ReactChild | ReactText)[] = [],\n    options?: TranslationOptions\n  ): string | JSX.Element[] => {\n    let template: TranslationTemplate = translation[literal];\n    if (!template) return `!unknown key: ${literal}`;\n    const result: ReactChild[] = [];\n    if (typeof template === 'object') {\n      const type = (options?.pluralType === 'ordinal' ? ordinalRules : cardinalRules).select(\n        options?.count || 0\n      );\n      template = template[type];\n    }\n    template.split(/\\{(\\d+)\\}/g).forEach((chunk, index) => {\n      const part = index % 2 ? tokens[Number(chunk)] : chunk;\n      if (part !== undefined && part !== '') result.push(part);\n    });\n\n    if (result.every(part => typeof part === 'string' || typeof part === 'number'))\n      return result.join('').trim();\n\n    // eslint-disable-next-line react/no-array-index-key\n    return result.map((part, i) => <Fragment key={i}>{part}</Fragment>);\n  }) as TranslationFunction<T>;\n};\n\nexport default translatorFor;\n"]}