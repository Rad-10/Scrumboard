import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { createElement as _createElement } from "react";
import { isValidElement, useCallback, useContext, useEffect, useRef, useState } from 'react';
import { useTheme, useArrows, useConsolidatedRef, useDirection, useUID, useI18n, useEscape } from '../../hooks';
import ExpandCollapse from '../ExpandCollapse';
import BareButton from '../Button/BareButton';
import Flex from '../Flex';
import Icon from '../Icon';
import Text from '../Text';
import Button from '../Button';
import Link from '../Link';
import NavigationListItemWrapper from './NavigationListItemWrapper';
import { StyledNavList, StyledNestedNavList, StyledAppShellNavIcon, StyledNavListItem, StyledCaseClose } from './AppShell.styles';
import AppShellContext from './AppShellContext';
const NavigationMenu = props => {
    const { navOpen } = useContext(AppShellContext);
    const { visual, primary, secondary, href, onClick, items, onDismiss, actions, forwardedRef, ...restProps } = props;
    const uid = useUID();
    const { navState } = useContext(AppShellContext);
    const [collapsed, setCollapsed] = useState(true);
    const toggleCollapsed = useCallback((e) => {
        e.stopPropagation();
        setCollapsed(state => !state);
    }, [setCollapsed]);
    const itemRef = useConsolidatedRef(forwardedRef);
    const menuRef = useRef(null);
    useArrows(menuRef, { selector: '[role="menuitem"]', cycle: true });
    useEscape(() => {
        setCollapsed(true);
        itemRef.current?.focus();
    }, menuRef);
    const { end } = useDirection();
    return (_createElement(StyledNavListItem, { ...restProps, key: primary, nestedListCollapsed: collapsed, ref: menuRef },
        _jsxs(BareButton, { id: uid, ref: itemRef, "aria-expanded": !collapsed, "aria-controls": `${uid}-menu`, "aria-label": primary, onClick: toggleCollapsed, children: [visual, secondary ? (_jsxs(Flex, { container: { direction: 'column', alignItems: 'start' }, children: [_jsx("span", { children: primary }), _jsx(Text, { variant: 'secondary', children: secondary })] })) : (_jsx("span", { children: primary })), navState === 'open' && _jsx(Icon, { name: `caret-${end}`, as: StyledAppShellNavIcon })] }),
        _jsx(NavigationList, { id: `${uid}-menu`, nestedList: true, items: items, collapsed: !navOpen || collapsed })));
};
export const NavigationListItem = ({ visual, primary, secondary, href, onClick, items, collapseItems = false, dismissible = false, onDismiss, actions, forwardedRef, isMenuItem, ...restProps }) => {
    const { navOpen, navState } = useContext(AppShellContext);
    const t = useI18n();
    const listItemRef = useConsolidatedRef(forwardedRef);
    const hasItems = (Array.isArray(items) && items.length > 0) || (Array.isArray(actions) && actions.length > 0);
    const compProps = {
        onClick: (e) => {
            e.stopPropagation();
            onClick?.(e);
        },
        href,
        'aria-label': primary
    };
    let caseItems;
    if (onDismiss) {
        caseItems = [
            {
                primary: t('go_to_noun', [primary]),
                onClick
            },
            {
                primary: t('dismiss_case'),
                onClick: onDismiss
            }
        ];
    }
    let Component;
    if (href) {
        Component = Link;
    }
    else {
        Component = BareButton;
    }
    useEffect(() => {
        if (!navOpen && actions) {
            const node = document.getElementsByTagName('body')[0];
            const clickEvent = document.createEvent('MouseEvent');
            clickEvent.initEvent('mousedown', true, true);
            node.dispatchEvent(clickEvent);
        }
        if (navOpen && isMenuItem && listItemRef.current?.parentElement?.matches(':first-child'))
            listItemRef.current?.focus();
    }, [navOpen]);
    const { end } = useDirection();
    return (_createElement(StyledNavListItem, { ...restProps, key: primary, nestedListCollapsed: true },
        _jsx(NavigationListItemWrapper, { tooltipLabel: secondary ? `${primary} ${secondary}` : primary, label: primary, childElementRef: listItemRef, items: actions || items || caseItems, children: _jsxs(Component, { ...compProps, ref: listItemRef, ...(navOpen && isMenuItem
                    ? { tabIndex: -1, role: 'menuitem', 'aria-label': primary }
                    : {}), children: [visual, secondary ? (_jsxs(Flex, { container: { direction: 'column', alignItems: 'start' }, children: [_jsx("span", { children: primary }), _jsx(Text, { variant: 'secondary', children: secondary })] })) : (_jsx("span", { children: primary })), (hasItems || actions) && navState === 'open' && (_jsx(Icon, { name: `caret-${end}`, as: StyledAppShellNavIcon }))] }) }),
        dismissible && navOpen && (_jsx(Button, { icon: true, variant: 'simple', as: StyledCaseClose, onClick: onDismiss, "aria-label": t('dismiss_case'), children: _jsx(Icon, { name: 'times' }) })),
        hasItems && (
        // eslint-disable-next-line @typescript-eslint/no-use-before-define
        _jsx(NavigationList, { nestedList: true, items: actions || items, collapsed: !navOpen || collapseItems }))));
};
const NavigationList = ({ items = [], nestedList, id, collapsed }) => {
    let Component = StyledNavList;
    let ItemComponent;
    const { navOpen } = useContext(AppShellContext);
    let fwdProps = {
        collapsed: !!collapsed
    };
    const { base: { animation } } = useTheme();
    if (nestedList) {
        fwdProps = {
            as: ExpandCollapse,
            forwardedAs: 'ul',
            nullWhenCollapsed: true,
            transitionSpeed: items.length >= 10 ? `calc(2 * ${animation.speed})` : animation.speed,
            ...fwdProps
        };
        Component = StyledNestedNavList;
    }
    return (_jsx(Component, { ...(nestedList ? { role: 'menu', id } : {}), ...fwdProps, children: items.map(item => {
            if (isValidElement(item))
                return item;
            if (item.items && item.items.length > 0 && navOpen) {
                ItemComponent = NavigationMenu;
            }
            else {
                ItemComponent = NavigationListItem;
            }
            return _jsx(ItemComponent, { isMenuItem: nestedList, ...item }, item.id || item.primary);
        }) }));
};
export default NavigationList;
//# sourceMappingURL=NavigationList.js.map