{"version":3,"file":"AppShell.types.js","sourceRoot":"","sources":["../../../src/components/AppShell/AppShell.types.ts"],"names":[],"mappings":"","sourcesContent":["import {\n  KeyboardEvent,\n  MouseEvent,\n  MouseEventHandler,\n  ReactElement,\n  ReactNode,\n  Ref,\n  RefObject\n} from 'react';\n\nimport { AsProp, BaseProps, ForwardProps, NoChildrenProp } from '../../types';\nimport { ImageProps } from '../Image';\nimport { SearchInputProps } from '../SearchInput';\n\n/** AppShell props */\n\nexport interface AppInfoProps {\n  /** The primary text to render in the header. */\n  appName: string;\n  /** If true, the appName will not be visibly displayed on screen. */\n  appNameHidden?: boolean;\n  /** The source for a small application image or logo that is rendered in the nav bar. */\n  imageSrc: ImageProps['src'];\n  /** The source for the full size application image or logo that is rendered in the app header, if enabled. */\n  fullImageSrc?: ImageProps['src'];\n  /** URL or DOM id to navigate to. */\n  href?: string;\n  /** Click handler for the header. */\n  onClick?: MouseEventHandler<HTMLAnchorElement>;\n  /** The secondary text to render in the header. */\n  portalName?: string;\n  /** Specifies where to open the link href. */\n  target?: string;\n}\n\nexport interface AppShellProps extends BaseProps, NoChildrenProp {\n  /** Props related to the App Shell header. */\n  appInfo: AppInfoProps;\n  /** The content of the application. */\n  main: ReactNode;\n  /** The active user of the application. */\n  operator: OperatorProps;\n  /** If true, a header will render containing the logo and name of the app as well as search and operator regions. */\n  appHeader?: boolean;\n  /** If true, the search results page will replace the search input in the app header with its own */\n  searchPage?: boolean;\n  /** Props related to the Search Input. */\n  searchInput?: SearchInputProps;\n  /**\n   * The aria-label for the search input.\n   * @default \"Sitewide\"\n   */\n  searchLabel?: string;\n  /** A set of cases that will render in an expanded list within the App Shell. */\n  caseTypes?: CaseTypeProps[];\n  /** A set of links that will render as a flat list in the App Shell. */\n  links?: LinkProps[];\n  /** A set of cases that will render as a flat list in the App Shell. */\n  cases?: CaseProps[];\n  /** Used for alternate environments, such as \"dev\" or \"staging\". */\n  environment?: {\n    name: string;\n    /** @default theme.base.colors.red['extra-light'] */\n    color?: string;\n  };\n  /** A set of app utilities like notifications, recents that renders at the bottom of AppShell */\n  utils?: (UtilItemProps | ReactElement)[];\n  /** Banners will render above the main content if they are provided. */\n  banners?: ReactNode;\n  defaultExpanded?: boolean;\n  /** When the navigation is collapsed menus will be shown on hover instead of on click */\n  collapsedHoverMenus?: boolean;\n}\nexport interface CaseTypeProps {\n  /** The display name of the case. */\n  name: string;\n  /** Click handler for the case. */\n  onClick?: MouseEventHandler<HTMLButtonElement>;\n}\n\nexport interface LinkProps extends ForwardProps {\n  /** Unique id */\n  id: string;\n  /** The display name of the link. */\n  name: string;\n  /** URL or DOM id to navigate to. */\n  href: string;\n  /** The name of the Cosmos Icon to render as a visual. */\n  icon?: string;\n  /** Determines if the link represents the active page. */\n  active?: boolean;\n  /** A set of nested links. */\n  links?: LinkProps[];\n  /** Click handler for the link. */\n  onClick?: MouseEventHandler<HTMLAnchorElement>;\n}\n\nexport interface CaseProps extends ForwardProps {\n  /** Unique id */\n  id: string;\n  /** Name of the case or some primary information like title. */\n  primary: string;\n  /** Additional info of a case like timestamp. */\n  secondary?: string;\n  /** A visual element identifying the case. If not passed will render case-solid icon */\n  visual?: ReactNode;\n  /** Determines if the case represents the active page. */\n  active?: boolean;\n  /** Click handler for the case . */\n  onClick?: MouseEventHandler<HTMLElement>;\n  /** Dismiss handler for the case. */\n  onDismiss?: MouseEventHandler<HTMLElement>;\n}\n\nexport interface OperatorProps {\n  /** A visual element identifying the operator. */\n  avatar: ReactNode;\n  /** A list of actions that will populate a menu attached to the operator. */\n  actions: Pick<NavListItemProps, 'id' | 'primary' | 'href' | 'onClick' | 'visual'>[];\n  /** The name of the operator. */\n  name: string;\n}\n\nexport interface UtilItemProps extends Pick<NavListItemProps, 'visual' | 'actions' | 'onClick'> {\n  /**  The display name of an utility item. */\n  name: string;\n  /* Number when given displays on top-right of a given icon.  */\n  count?: number;\n  /**  View that renders on an appShell drawer onClick of an item */\n  drawerView?: ReactNode;\n  /** Heading for view that renders */\n  drawerHeader?: string;\n  /** Callback that fires on appshell drawer open */\n  onDrawerOpen?: () => void;\n  /** Callback that fires on appshell drawer close */\n  onDrawerClose?: () => void;\n}\n\nexport interface UtilsProps {\n  /** The active user of the application. */\n  operator: AppShellProps['operator'];\n  /** A set of app utilities like notifications, recents that renders at the bottom of AppShell */\n  items?: (UtilItemProps | ReactElement)[];\n  appHeader?: boolean;\n}\n\nexport interface NavListProps extends AsProp, BaseProps {\n  items?: (NavListItemProps | ReactElement)[];\n  nestedList?: boolean;\n  collapsed?: boolean;\n  id?: string;\n}\n\nexport interface NavListItemWrapperProps extends ForwardProps {\n  label: string;\n  tooltipLabel: string;\n  content?: ReactNode;\n  items?: NavListItemProps[];\n  onMenuToggle?: (state: 'open' | 'close') => void;\n  childElementRef: RefObject<HTMLElement>;\n}\n\nexport interface NavListItemProps extends AsProp, BaseProps, ForwardProps, NoChildrenProp {\n  id?: string;\n  visual?: ReactNode;\n  primary: string;\n  secondary?: string;\n  href?: string;\n  onClick?: MouseEventHandler<HTMLAnchorElement | HTMLButtonElement | HTMLDivElement>;\n  items?: NavListItemProps[];\n  collapseItems?: boolean;\n  actions?: OperatorProps['actions'];\n  dismissible?: boolean;\n  onDismiss?: MouseEventHandler<HTMLElement>;\n  forwardedRef?: Ref<HTMLAnchorElement | HTMLDivElement | HTMLButtonElement>;\n  isMenuItem?: boolean;\n}\n\nexport interface NavMenuProps extends NavListItemProps {\n  forwardedRef?: Ref<HTMLButtonElement>;\n}\n\n/** AppHeader props */\n\nexport interface AppHeaderProps extends BaseProps, AppInfoProps {\n  operator: AppShellProps['operator'];\n  searchInput?: AppShellProps['searchInput'];\n  searchLabel?: AppShellProps['searchLabel'];\n  searchPage?: AppShellProps['searchPage'];\n}\n\n/** Drawer props */\n\nexport interface DrawerListProps {\n  items: (DrawerItemProps & ForwardProps)[];\n  loading?: boolean;\n  viewAll?: {\n    onClick?: MouseEventHandler<HTMLButtonElement | HTMLAnchorElement>;\n    href?: string;\n  } & ForwardProps;\n  newNotifications?: number;\n  onItemClick?: (id: string, event: MouseEvent<HTMLButtonElement | HTMLAnchorElement>) => void;\n  onItemPinToggle?: (id: string) => void;\n  onDrawerOpen?: () => void;\n  onDrawerClose?: () => void;\n}\n\nexport interface DrawerItemProps extends BaseProps {\n  /** An id representing the item. */\n  id: string;\n  /** The primary text for the item. */\n  primary: string;\n  /** Secondary text that will be rendered as a Meta List. */\n  secondary?: string[];\n  /** A visual associated with the item. */\n  visual?: ReactNode;\n  /** A flag indicating if the item has been read. */\n  unread?: boolean;\n  /** A flag indicating if the item has been pinned or not. */\n  pinned?: boolean;\n  /** URL or DOM id to navigate to. */\n  href?: string;\n  /** The onClick handler for the item. */\n  onClick?: (id: string, event: MouseEvent<HTMLElement> | KeyboardEvent<HTMLElement>) => void;\n  /** The handler hat is called when a pin icon is toggled on an item. */\n  onPinToggle?: (id: string) => void;\n}\n\nexport interface ListProps extends DrawerListProps {\n  headingText?: string;\n  emptyText: string;\n  displayRecents: boolean;\n  displayPins?: boolean;\n}\n"]}