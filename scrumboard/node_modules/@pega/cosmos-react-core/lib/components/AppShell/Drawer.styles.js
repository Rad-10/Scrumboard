import { lighten } from 'polished';
import styled, { css } from 'styled-components';
import { useDirection } from '../../hooks';
import { calculateFontSize } from '../../styles';
import { defaultThemeProp } from '../../theme';
import { tryCatch } from '../../utils';
import { StyledIcon } from '../Icon';
import { navOpenWidth } from './AppShell.styles';
export const StyledDrawerWrapper = styled.div(({ theme, open }) => {
    return css `
    background: ${theme.components['app-shell'].nav['background-color']};
    width: ${navOpenWidth};
    height: 100%;
    color: rgba(255, 255, 255, 0.7);
    opacity: ${open ? 1 : 0};
  `;
});
StyledDrawerWrapper.defaultProps = defaultThemeProp;
export const StyledDrawerHeading = styled.header(({ theme }) => {
    const fontSize = calculateFontSize(theme.base['font-size'], theme.base['font-scale']);
    return css `
    padding: ${theme.base.spacing} calc(2 * ${theme.base.spacing});
    line-height: 1;

    span {
      font-size: ${fontSize.s};
      font-weight: ${theme.base['font-weight']['semi-bold']};
      margin: 0 auto;
      position: relative;
      left: -0.7rem;
    }

    svg {
      font-size: ${fontSize.xxl};
      cursor: pointer;
      color: rgba(255, 255, 255, 0.7);
    }
  `;
});
StyledDrawerHeading.defaultProps = defaultThemeProp;
export const StyledDrawerBackButton = styled.button(({ theme }) => {
    return css `
    height: ${theme.base['hit-area']['mouse-min']};
    width: ${theme.base['hit-area']['mouse-min']};
    border-radius: calc(
      ${`${theme.base['border-radius']} * ${theme.components.button['border-radius']}`}
    );

    &:hover,
    &:focus {
      color: ${theme.base.colors.white};
      background-color: rgba(255, 255, 255, 0.05);
    }

    &:focus {
      outline: none;
      box-shadow: inset ${theme.base.shadow['focus-inverted']};
    }
  `;
});
StyledDrawerBackButton.defaultProps = defaultThemeProp;
export const StyledDrawerList = styled.ul(() => {
    return css ``;
});
StyledDrawerList.defaultProps = defaultThemeProp;
export const StyledDrawerMetaList = styled.ul `
  li {
    color: inherit;
  }
`;
export const StyledDrawerPinButton = styled.button(({ theme }) => {
    const fontSize = calculateFontSize(theme.base['font-size'], theme.base['font-scale']);
    const { ltr } = useDirection();
    return css `
    color: inherit;
    padding: calc(2 * ${theme.base.spacing});
    cursor: pointer;
    font-size: ${fontSize.xxl};

    ${StyledIcon} {
      display: block;
      ${ltr &&
        css `
        transform: scaleX(-1);
      `}
    }

    &:hover,
    &:focus {
      color: ${theme.base.colors.white};
      background-color: rgba(255, 255, 255, 0.05);
    }

    &:focus {
      outline: none;
      box-shadow: inset ${theme.base.shadow['focus-inverted']};
    }
  `;
});
StyledDrawerPinButton.defaultProps = defaultThemeProp;
export const EmptyDrawerVisual = styled.div(({ theme }) => {
    return css `
    width: calc(4 * ${theme.base.spacing});
    height: calc(4 * ${theme.base.spacing});
  `;
});
EmptyDrawerVisual.defaultProps = defaultThemeProp;
export const StyledDrawerListHeading = styled.h3(({ theme }) => {
    return css `
    position: sticky;
    top: 0;
    padding: ${theme.base.spacing} calc(2 * ${theme.base.spacing});
    background-color: hsl(207 14% 13% / 1);
    z-index: 1;
  `;
});
StyledDrawerListHeading.defaultProps = defaultThemeProp;
export const StyledDrawerViewAll = styled.a(({ theme }) => {
    return css `
    position: sticky;
    bottom: 0;
    padding: ${theme.base.spacing} 0;
    color: inherit;
    background-color: ${theme.components['app-shell'].nav['background-color']};
    text-align: center;
    margin-top: 0.0625rem;

    &:hover,
    &:focus {
      color: ${theme.base.colors.white};
      box-shadow: unset;
    }
  `;
});
StyledDrawerViewAll.defaultProps = defaultThemeProp;
export const StyledDrawerListSection = styled.div(({ theme }) => {
    const borderColor = tryCatch(() => lighten(0.1, theme.components['app-shell'].nav['background-color']));
    return css `
    border-top: 0.0625rem solid ${borderColor};
    min-height: max(20%, 8rem);
    overflow-y: auto;
  `;
});
StyledDrawerListSection.defaultProps = defaultThemeProp;
export const StyledDrawerListContainer = styled.div(({ theme }) => {
    const fontSize = calculateFontSize(theme.base['font-size'], theme.base['font-scale']);
    return css `
    height: calc(100% - 4 * ${theme.base.spacing} - ${fontSize.xxl});
    overflow: auto;
  `;
});
StyledDrawerListContainer.defaultProps = defaultThemeProp;
//# sourceMappingURL=Drawer.styles.js.map