import type { MouseEvent, KeyboardEvent } from 'react';
import type { Action, PropsWithDefaults } from '../../types';
import type { TreeProps, TreeNode } from './Tree';
export interface StandardTreeNode extends TreeNode {
    nodes?: StandardTreeNode[];
    label: string;
    icon?: string;
    expanded?: boolean;
    loading?: boolean;
    actions?: Action[];
    onClick?: (id: TreeNode['id'], e: MouseEvent<HTMLElement> | KeyboardEvent<HTMLElement>) => void;
}
export interface StandardTreeProps extends TreeProps<StandardTreeNode> {
    currentNodeId?: TreeNode['id'];
    lined?: boolean;
    onNodeClick?: (id: TreeNode['id'], e: MouseEvent<HTMLElement> | KeyboardEvent<HTMLElement>) => void;
    onNodeToggle?: (id: TreeNode['id'], e?: MouseEvent<HTMLElement> | KeyboardEvent<HTMLElement>) => void;
}
export interface StandardTreeContextProps extends StandardTreeProps {
    firstNodeId?: TreeNode['id'];
    lastNodeId?: TreeNode['id'];
    focusedNodeId?: TreeNode['id'];
    changeFocusedNodeId: (id: TreeNode['id'], type?: 'up' | 'down' | 'left' | 'right') => void;
}
export declare type StandardTreePropsWithDefaults = PropsWithDefaults<StandardTreeContextProps, 'lined'>;
//# sourceMappingURL=StandardTree.types.d.ts.map