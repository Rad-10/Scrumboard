import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef } from 'react';
import styled, { css } from 'styled-components';
import { defaultThemeProp } from '../../../theme';
import { StyledFormControl } from '../../FormControl';
import Flex from '../../Flex';
import { StyledSelectInput } from '../ComboBox.styles';
export const StyledSingleSelectInput = styled(StyledSelectInput) ``;
const StyledVisualContainer = styled.span(props => {
    const { theme: { base, components: { 'form-control': formControl, input: { height } } } } = props;
    return css `
    border-inline-end: ${formControl['border-width']} solid ${formControl['border-color']};
    min-width: calc(${height} - ${formControl['border-width']});
    padding: 0 calc(0.5 * ${base.spacing});
    height: calc(${height} - 2 * ${formControl['border-width']});
  `;
});
StyledVisualContainer.defaultProps = defaultThemeProp;
const SingleSelectInput = forwardRef((props, ref) => {
    const { value, readOnly, disabled, status, actions, onChange, onResolveSuggestion, selected, visual, ...restProps } = props;
    return (_jsxs(Flex, { as: StyledSingleSelectInput, forwardedAs: StyledFormControl, hasSuggestion: status === 'pending' && !!onResolveSuggestion, container: { alignItems: 'center', wrap: 'nowrap' }, ...{
            disabled,
            status,
            readOnly
        }, children: [visual && (_jsx(Flex, { container: { justify: 'center', alignItems: 'center' }, as: StyledVisualContainer, children: visual })), _jsx("input", { ...{
                    ref,
                    disabled,
                    status,
                    readOnly
                }, size: 1, value: value || selected?.text || '', 
                // no-op avoids react uncontrolled warning
                onChange: onChange || (() => { }), readOnly: readOnly || !onChange, autoComplete: 'off', ...restProps }), actions] }));
});
export default SingleSelectInput;
//# sourceMappingURL=SingleSelectInput.js.map