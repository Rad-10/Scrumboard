{"version":3,"file":"ComboBox.types.js","sourceRoot":"","sources":["../../../src/components/ComboBox/ComboBox.types.ts"],"names":[],"mappings":"","sourcesContent":["import { ChangeEvent, ReactNode, Ref, KeyboardEvent as ReactKeyboardEvent } from 'react';\n\nimport type { NoChildrenProp } from '../../types';\nimport { FormControlProps } from '../FormControl';\nimport { MenuItemProps, MenuProps } from '../Menu/Menu.types';\n\nexport interface Selected {\n  id: string;\n  text: string;\n}\n\nexport default interface ComboBoxProps extends NoChildrenProp {\n  /**\n   * Sets DOM id for the control and associates label element via 'for' attribute.\n   * If an id is not pass, a random id will be generated for any render.\n   */\n  id?: FormControlProps['id'];\n  /** Pass a string or a fragment with an Icon and string. */\n  label?: FormControlProps['label'];\n  /** Visually hides the label region. */\n  labelHidden?: FormControlProps['labelHidden'];\n  /** Indicate if the field is required. The browser defaults to false. */\n  required?: FormControlProps['required'];\n  /** Disable the control. The browser defaults to false. */\n  disabled?: FormControlProps['disabled'];\n  /** Makes the component non editable and non clickable. The browser defaults to false. */\n  readOnly?: FormControlProps['readOnly'];\n  /** Sets html name attribute for the underlying control. Useful for mapping to a data field. */\n  name?: FormControlProps['name'];\n  /** Set visual state based on a validation state. */\n  status?: FormControlProps['status'];\n  /** It is recommended to pass a simple string to offer guidance. Text will be styled based on status prop. */\n  info?: FormControlProps['info'];\n  /** Placeholder text */\n  placeholder?: FormControlProps['placeholder'];\n  /**\n   * Whether it is single selection or multi selection combobox.\n   * @default 'single-select'\n   */\n  mode?: 'single-select' | 'multi-select';\n  /** Currently selected option, single for single-select, an array for multi-select. */\n  selected?: {\n    items?: Selected | Selected[];\n    onRemove?: (id: MenuItemProps['id'], index: number) => void;\n    onNew?: (text: string) => void;\n  };\n  /** Value of the combobox filtering input. */\n  value?: FormControlProps['value'];\n  /** Callback fired when the filtering input value changes. */\n  onChange?: (e: ChangeEvent<HTMLInputElement>) => void;\n  /** Callback fired when the ComboBox input gains focus. */\n  onFocus?: (selected?: Selected | Selected[]) => void;\n  /**\n   * Callback fired when the ComboBox looses focus within its containing element.\n   * This is not specific to the input element.\n   * Note, behavior will be enhanced in an upcoming release and the input will be the only focusable element.\n   */\n  onBlur?: (selected?: Selected | Selected[]) => void;\n  /** Callback fired when AI suggestion is accepted/rejected */\n  onResolveSuggestion?: FormControlProps['onResolveSuggestion'];\n  /** Automatically focuses the input on render. */\n  autoFocus?: boolean;\n  /**\n   * Fired when the user clicks on the dropdown icon to initiate opening the menu.\n   * If you want to offer default menu items without an input value, pass this function.\n   * This function can be an appropriate time to fetch menu item data.\n   * Remember to set the loading prop to true when when fetching data for an empty list.\n   *\n   * @param open value defining whether the click opens or closes the menu\n   */\n  onDropdownButtonClick?: (open: boolean) => void;\n  /** Fired when user clicks on the Combobox input. */\n  onClick?: (e: MouseEvent) => void;\n  /** Fired before running default component onKeyDown handler.\n   * Returning `false` from this function prevents default onKeyDown handling.\n   */\n  onKeyDown?: (e: ReactKeyboardEvent) => boolean | void;\n  /** Action Buttons that will render within the input. */\n  actions?: ReactNode;\n  /** Menu related props. @see MenuProps */\n  menu?: MenuProps;\n  /** A visual which represents the selected item. */\n  visual?: ReactNode;\n  /** Pass a heading and content to show additional information on the field. */\n  additionalInfo?: FormControlProps['additionalInfo'];\n  /** Reference to the element. */\n  ref?: Ref<HTMLDivElement>;\n}\n"]}