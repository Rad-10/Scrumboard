import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef } from 'react';
import styled, { css } from 'styled-components';
import { transparentize } from 'polished';
import { defaultThemeProp } from '../../theme';
import { tryCatch } from '../../utils/utils';
import { StyledCount } from '../Badges/Count';
import BareButton from '../Button/BareButton';
const activeStyle = (color) => css `
  ::after {
    display: block;
    background-color: ${color};
  }
`;
const getHorizontalStyles = ({ selected, theme, inverted }) => {
    const primaryColor = inverted
        ? theme.components.tabs.inverted.foreground
        : theme.components.tabs.base.foreground;
    const lightenedColor = tryCatch(() => transparentize(0.3, primaryColor)) ?? '';
    const { spacing } = theme.base;
    return css `
    align-items: center;
    display: flex;
    flex-direction: row;
    height: calc(4 * ${spacing});
    padding: 0 calc(2 * ${spacing});
    border: none;
    text-decoration: none;

    span:first-of-type {
      color: ${selected ? primaryColor : theme.base.palette['foreground-color']};
      display: inline-block;

      ::before {
        content: attr(data-content);
        display: block;
        font-weight: bold;
        height: 0;
        overflow: hidden;
        visibility: hidden;
      }
    }

    &:first-child {
      margin-left: 0;
    }

    ::after {
      background: ${selected ? primaryColor : lightenedColor};
      display: ${selected ? 'block' : 'none'};
      content: '';
      position: absolute;
      height: 0.125rem;
      bottom: 0;
      left: 0;
      right: 0;
    }

    &:hover&:not(:disabled) {
      ${activeStyle(lightenedColor)}
      text-decoration: none;
    }

    &:focus,
    &:not([disabled]):focus {
      ${activeStyle(lightenedColor)}
      box-shadow: inset ${theme.base.shadow.focus};
      text-decoration: none;
    }

    ${StyledCount} {
      margin-inline-start: calc(0.5 * ${spacing});
    }
  `;
};
const getVerticalStyles = ({ selected, theme }) => {
    const borderColor = theme.base.palette['border-line'];
    const primaryColor = theme.base.palette.interactive;
    const lightenedColor = tryCatch(() => transparentize(0.5, primaryColor)) ?? '';
    const { spacing } = theme.base;
    return css `
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-style: solid;
    color: ${theme.base.palette['foreground-color']};
    border-width: 0.0625rem 0;
    border-color: ${borderColor};
    height: calc(5.5 * ${spacing});
    margin-top: -0.0625rem;
    padding: 0 calc(2 * ${spacing});
    text-decoration: none;

    &:first-child {
      border-top: 0.0625rem solid ${borderColor};
    }

    ::after {
      content: '';
      position: absolute;
      display: ${selected ? 'block' : 'none'};
      top: 0;
      bottom: 0;
      right: 0;
      width: 0.25rem;
      background: ${primaryColor};
    }

    &:hover&:not(:disabled) {
      ${activeStyle(lightenedColor)}
      text-decoration: none;
    }

    &:focus,
    &:not([disabled]):focus {
      ${activeStyle(primaryColor)}
      box-shadow: inset 0 0 0 0.0625rem ${primaryColor};
      text-decoration: none;
    }
  `;
};
export const StyledTab = styled(BareButton) `
  position: relative;
  background: none;
  cursor: pointer;

  ${props => props.tabType === 'horizontal' ? getHorizontalStyles(props) : getVerticalStyles(props)}
  ${props => props.selected &&
    css `
      font-weight: bold;
    `}
  white-space: nowrap;

  & + & {
    margin-inline-start: 0;
  }

  &:focus {
    outline: none;
  }

  &:disabled {
    cursor: not-allowed;
    opacity: ${props => props.theme.base['disabled-opacity']};
  }
`;
StyledTab.defaultProps = defaultThemeProp;
const Tab = forwardRef(({ selected, inverted, content, count, type, disabled, ...restProps }, ref) => {
    return (_jsxs(StyledTab, { ref: ref, selected: selected, inverted: inverted, tabType: type, disabled: disabled, type: 'button', ...restProps, children: [_jsx("span", { "data-content": content, children: content }), count] }));
});
export default Tab;
//# sourceMappingURL=Tab.js.map