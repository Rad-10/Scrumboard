import { jsx as _jsx } from "react/jsx-runtime";
import { forwardRef, useRef, useEffect } from 'react';
import styled from 'styled-components';
import { defaultThemeProp } from '../../theme';
import { useConsolidatedRef } from '../../hooks';
export const StyledBareButton = styled.button `
  background: none;
  border: none;
  outline: none;
  cursor: pointer;
  user-select: none;
  color: inherit;

  & + & {
    margin-inline-start: ${props => props.theme.base.spacing};
  }
`;
StyledBareButton.defaultProps = defaultThemeProp;
const BareButton = forwardRef(({ type = 'button', disabled = false, href, ...restProps }, ref) => {
    const mouseDownEvent = useRef();
    const buttonRef = useConsolidatedRef(ref);
    useEffect(() => {
        return () => {
            mouseDownEvent.current = undefined;
        };
    }, []);
    return (_jsx(StyledBareButton, { ref: buttonRef, as: href ? 'a' : undefined, type: href ? undefined : type, disabled: disabled, ...restProps, href: href, onMouseDown: (e) => {
            restProps.onMouseDown?.(e);
            e.persist();
            mouseDownEvent.current = e;
        }, onMouseUp: (e) => {
            const shouldFocus = mouseDownEvent.current && !mouseDownEvent.current.defaultPrevented;
            mouseDownEvent.current = undefined;
            if (shouldFocus && buttonRef.current !== document.activeElement) {
                buttonRef.current?.focus();
            }
            return restProps.onMouseUp?.(e);
        } }));
});
export default BareButton;
//# sourceMappingURL=BareButton.js.map