import { FunctionComponent, Ref, MouseEvent as ReactMouseEvent, KeyboardEvent as ReactKeyboardEvent } from 'react';
import { BaseProps, ForwardProps } from '../../types';
import { PopoverProps } from '../Popover';
export interface DialogProps extends BaseProps {
    target: HTMLElement | null;
    placement?: PopoverProps['placement'];
    children: PopoverProps['children'];
    heading: string;
    headingHidden?: boolean;
    onSubmit?: (arg: {
        close: () => void;
    }) => void;
    onClose?: () => void;
    onOpen?: () => void;
    loading?: boolean;
    ref?: Ref<HTMLDivElement>;
}
export declare const StyledDialog: import("styled-components").StyledComponent<"dialog", import("styled-components").DefaultTheme, {}, never>;
export declare const StyledDialogTitle: import("styled-components").StyledComponent<FunctionComponent<import("../Text").TextProps & ForwardProps>, import("styled-components").DefaultTheme, {}, never>;
export declare const useDialog: () => {
    target: HTMLElement | null;
    loading: boolean;
    setLoading: import("react").Dispatch<import("react").SetStateAction<boolean>>;
    events: {
        onMouseDown: (e: ReactMouseEvent) => void;
        onKeyDown: (e: ReactKeyboardEvent) => void;
    };
    setTargetWithEvent: (e: ReactMouseEvent | ReactKeyboardEvent) => void;
};
declare const Dialog: FunctionComponent<DialogProps & ForwardProps>;
export default Dialog;
//# sourceMappingURL=Dialog.d.ts.map