import { FunctionComponent } from 'react';
import { ForwardProps, NoChildrenProp, OmitStrict } from '../../types';
import { FormControlProps } from '../FormControl';
import { MenuItemProps } from '../Menu';
import { LinkProps } from '../Link';
export declare type SearchResult = Pick<MenuItemProps, 'id' | 'primary' | 'secondary' | 'href' | 'onClick'>;
export declare type RecentSearch = Pick<MenuItemProps, 'id' | 'primary' | 'href' | 'onClick'>;
export interface SearchInputProps extends NoChildrenProp {
    /**
     * Placeholder text. The default value is a locale translation of 'Search…'
     * @default "Search…"
     */
    placeholder?: FormControlProps['placeholder'];
    /**
     * Creates a controlled input and sets the value. Requires an onChange handler to update value.
     * value + onChange is the recommended method per React team.
     */
    value?: FormControlProps['value'];
    /** Called when the SearchInput value changes. */
    onSearchChange?: (value: string) => void;
    /**
     * Called when the SearchButton is clicked or when the Enter key is pressed while SearchInput is in focus.
     * NOTE: this does not trigger an actual form submit event. It simply represents an explicit action by the user to search as opposed to onSearchChange.
     */
    onSearchSubmit?: (value: string) => void;
    /** A list of user selectable scopes to filter search with. */
    filters?: string[];
    /** The selected scope filter on initial render. */
    defaultFilter?: string;
    /** Called when user changes scope filter. */
    onFilterChange?: (value: string) => void;
    /** A list of matching results presented in the input's dropdown menu. */
    searchResults?: SearchResult[];
    /** A list of recent searches presented in the input's dropdown menu. */
    recentSearches?: RecentSearch[];
    /** Places the menu into an indeterminate loading state. */
    loading?: boolean;
    /** Prop passed to the advanced search page link. */
    advancedSearchLink?: OmitStrict<LinkProps, 'children'>;
    /** Aria label for search input, used by screen readers. */
    searchInputAriaLabel?: string;
    /**
     * Boolean for determining for whether the search results will render in a popover.
     * @default true
     */
    resultsPopover?: boolean;
}
declare const SearchInput: FunctionComponent<SearchInputProps & ForwardProps>;
export default SearchInput;
//# sourceMappingURL=SearchInput.d.ts.map