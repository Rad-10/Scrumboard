import { useCallback, useEffect } from 'react';
/**
 * Automatically moves focus to next referenced input when current one's number of chars is equal to max-length.
 * @example useAutoFocusNextInput([ref1, ref2, ref3]);
 * @param refs - array of references to relevant input elements
 */
const useAutoFocusNextInput = (refs) => {
    const wrapListener = useCallback((nextElement) => {
        return (ev) => {
            const targetElement = ev.target;
            if (ev.inputType === 'insertText' &&
                targetElement.value.length === targetElement.maxLength) {
                nextElement?.current?.focus();
                nextElement?.current?.select();
            }
        };
    }, []);
    useEffect(() => {
        // Save current state of ref array to ensure it is the same during cleanup.
        const els = refs.flatMap(ref => ref.current ?? []);
        const callbacks = [];
        els.forEach((el, index) => {
            callbacks.push(wrapListener(refs[index + 1]));
            el.addEventListener('input', callbacks[index]);
        });
        return () => {
            els.forEach((el, index) => {
                el.removeEventListener('input', callbacks[index]);
            });
        };
    }, [refs]);
};
export default useAutoFocusNextInput;
//# sourceMappingURL=useAutoFocusNextInput.js.map