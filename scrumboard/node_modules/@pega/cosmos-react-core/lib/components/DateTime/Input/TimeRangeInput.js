import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef, useCallback, useRef } from 'react';
import Flex from '../../Flex';
import { useConsolidatedRef, useFocusWithin, useI18n } from '../../../hooks';
import { StyledRangeInputContainer } from '../../Input/Input.styles';
import FormField from '../../FormField';
import { parseToDate } from './utils';
import TimeInput from './TimeInput';
import DateTimeInput from './DateTimeInput';
const convertToCallbackParameter = (v) => {
    return {
        valueAsISOString: v === undefined || Number.isNaN(v) ? '' : new Date(v).toISOString(),
        valueAsTimestamp: v
    };
};
const TimeRangeInput = forwardRef(({ value = {}, onChange, onFocus, onBlur, label, fromLabel, toLabel, labelHidden, required, readOnly, disabled, min, max, withSeconds, pickerInterval, clockFormat, mode, status, fromAdditionalInfo, toAdditionalInfo, autoFocus, ...restProps }, ref) => {
    const t = useI18n();
    const startDateRef = useRef(value.start ? parseToDate(value.start).getTime() : undefined);
    const endDateRef = useRef(value.end ? parseToDate(value.end).getTime() : undefined);
    const onFocusChange = useCallback((focused) => {
        (focused ? onFocus : onBlur)?.({
            start: convertToCallbackParameter(startDateRef.current),
            end: convertToCallbackParameter(endDateRef.current)
        });
    }, [onFocus, onBlur]);
    const containerRef = useConsolidatedRef(ref);
    useFocusWithin([containerRef], onFocusChange);
    const commonProps = {
        required,
        readOnly,
        disabled,
        min,
        max,
        status,
        withSeconds,
        pickerInterval,
        clockFormat
    };
    return (_jsx(FormField, { as: 'fieldset', ...restProps, container: { wrap: 'nowrap' }, ref: containerRef, labelAs: 'legend', label: label, labelHidden: labelHidden, disabled: disabled, required: required, readOnly: readOnly, status: status, children: _jsx(Flex, { container: true, as: StyledRangeInputContainer, children: mode === 'time' ? (_jsxs(_Fragment, { children: [_jsx(TimeInput, { ...commonProps, value: value.start, onBlur: changedValue => {
                            startDateRef.current = !changedValue.state
                                ? changedValue.valueAsTimestamp
                                : undefined;
                            onChange({
                                start: changedValue,
                                end: convertToCallbackParameter(endDateRef.current)
                            });
                        }, label: fromLabel, "aria-label": `${t('range_from_datetime') + (label ? ` - ${label}` : '')}`, additionalInfo: fromAdditionalInfo, autoFocus: autoFocus }), _jsx(TimeInput, { ...commonProps, value: value.end, onBlur: changedValue => {
                            endDateRef.current = !changedValue.state
                                ? changedValue.valueAsTimestamp
                                : undefined;
                            onChange({
                                start: convertToCallbackParameter(startDateRef.current),
                                end: changedValue
                            });
                        }, label: toLabel, "aria-label": `${t('range_to_datetime') + (label ? ` - ${label}` : '')}`, additionalInfo: toAdditionalInfo })] })) : (_jsxs(_Fragment, { children: [_jsx(DateTimeInput, { ...commonProps, value: value.start, onBlur: changedValue => {
                            startDateRef.current = !changedValue.state
                                ? changedValue.valueAsTimestamp
                                : undefined;
                            onChange({
                                start: changedValue,
                                end: convertToCallbackParameter(endDateRef.current)
                            });
                        }, label: fromLabel, "aria-label": `${t('range_from_datetime') + (label ? ` - ${label}` : '')}`, additionalInfo: fromAdditionalInfo }), _jsx(DateTimeInput, { ...commonProps, value: value.end, onBlur: changedValue => {
                            endDateRef.current = !changedValue.state
                                ? changedValue.valueAsTimestamp
                                : undefined;
                            onChange({
                                start: convertToCallbackParameter(startDateRef.current),
                                end: changedValue
                            });
                        }, label: toLabel, "aria-label": `${t('range_to_datetime') + (label ? ` - ${label}` : '')}`, additionalInfo: toAdditionalInfo })] })) }) }));
});
export default TimeRangeInput;
//# sourceMappingURL=TimeRangeInput.js.map