import { FunctionComponent } from 'react';
import { ForwardProps } from '../../../types';
import { FormControlProps } from '../../FormControl';
export declare type DayOfWeek = 1 | 2 | 3 | 4 | 5 | 6 | 7;
export interface DayOfWeekInputProps {
    /**
     * Number from range [1-7].
     * Creates a controlled input and sets the value. Requires an onChange handler to update value.
     * value + onChange is the recommended method per React team.
     */
    value?: DayOfWeek;
    /**
     * Sets DOM id for the control and associates label element via 'for' attribute.
     * If an id is not pass, a random id will be generated for any render.
     */
    id?: FormControlProps['id'];
    /** Set visual state based on a validation state. */
    status?: FormControlProps['status'];
    /** Pass a string or a fragment with an Icon and string. */
    label?: FormControlProps['label'];
    /** Visually hides the label region. */
    labelHidden?: FormControlProps['labelHidden'];
    /** It is recommended to pass a simple string to offer guidance. Text will be styled based on status prop. */
    info?: FormControlProps['info'];
    /** Indicate if the field is required. The browser defaults to false. */
    required?: FormControlProps['required'];
    /** Disable the control. The browser defaults to false. */
    disabled?: FormControlProps['disabled'];
    /** Makes the input non editable and non clickable. The browser defaults to false. */
    readOnly?: FormControlProps['readOnly'];
    /** Sets html name attribute for the underlying control. Useful for mapping to a data field. */
    name?: FormControlProps['name'];
    /** Pass a heading and content to show additional information on the field. */
    additionalInfo?: FormControlProps['additionalInfo'];
    /** Callback fired when input value changes. */
    onChange?: (value: DayOfWeek) => void;
}
declare const DayOfWeekInput: FunctionComponent<DayOfWeekInputProps & ForwardProps>;
export default DayOfWeekInput;
//# sourceMappingURL=DayOfWeekInput.d.ts.map