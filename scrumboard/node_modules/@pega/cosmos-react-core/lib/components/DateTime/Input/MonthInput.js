import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useMemo, forwardRef, useReducer, useEffect } from 'react';
import styled from 'styled-components';
import { defaultThemeProp } from '../../../theme';
import { range } from '../../../utils';
import { useConfiguration, useConsolidatedRef, useFocusWithin } from '../../../hooks';
import FormField from '../../FormField';
import Select, { Option } from '../../Select';
import { StyledSelect } from '../../Select/Select';
import Flex from '../../Flex';
import { StyledFormControl } from '../../FormControl';
import { parseToDate, getLocalizedMonths } from './utils';
import StyledDateTime from './DateTime.styles';
export const StyledMonthInput = styled(StyledDateTime) `
  padding: 0;
  border: 0;

  ${StyledSelect} {
    min-width: 0;

    &:focus {
      z-index: 1;
    }

    &:first-child {
      border-start-end-radius: 0;
      border-end-end-radius: 0;
    }

    &:last-child {
      max-width: max-content;
      margin-inline-start: -0.0625rem;
      border-start-start-radius: 0;
      border-end-start-radius: 0;
    }
  }
`;
StyledMonthInput.defaultProps = defaultThemeProp;
const convertToCallbackParameter = (date, { month, year }) => {
    if ([month, year].every(Boolean)) {
        const resultDate = new Date(date);
        resultDate.setUTCFullYear(Number(year), Number(month));
        return {
            valueAsISOString: resultDate.toISOString(),
            valueAsTimestamp: resultDate.getTime()
        };
    }
    if ([year, month].every(p => !p)) {
        return {
            valueAsISOString: '',
            valueAsTimestamp: undefined
        };
    }
    return {
        valueAsISOString: '',
        valueAsTimestamp: NaN,
        state: 'incomplete'
    };
};
const reducer = (state, action) => {
    if (action.field) {
        return { ...state, [action.field]: action.value };
    }
    return state;
};
const MonthInput = forwardRef((props, ref) => {
    const { locale } = useConfiguration();
    const { defaultValue, value = defaultValue, min, max, id, label, labelHidden, info, status, required, readOnly, disabled, onChange, onFocus, onBlur, autoFocus, additionalInfo, ...restProps } = props;
    const date = value ? parseToDate(value) : undefined;
    const currentYear = date ? date.getUTCFullYear() : new Date().getFullYear();
    const minYear = min ? parseToDate(min).getUTCFullYear() : currentYear - 10;
    const maxYear = max ? parseToDate(max).getUTCFullYear() : currentYear + 10;
    const years = range(minYear, maxYear);
    const months = useMemo(() => getLocalizedMonths(locale), [locale]);
    const [state, dispatch] = useReducer(reducer, {
        year: date?.getUTCFullYear().toString(),
        month: date?.getUTCMonth().toString()
    });
    useEffect(() => {
        dispatch({ field: 'month', value: date?.getUTCMonth().toString() });
        dispatch({ field: 'year', value: date?.getUTCFullYear().toString() });
    }, [date?.toDateString()]);
    const onFocusChange = (focused) => {
        const callbackParam = convertToCallbackParameter(date ? new Date(date) : new Date(), state);
        if (onFocus && focused)
            onFocus(callbackParam);
        else if (onBlur && !focused)
            onBlur(callbackParam);
    };
    const onSelectChange = (field) => (ev) => {
        const action = { field, value: ev.target.value };
        dispatch(action);
        onChange?.(convertToCallbackParameter(date ? new Date(date) : new Date(), reducer(state, action)));
    };
    const containerRef = useConsolidatedRef(ref);
    useFocusWithin([containerRef], onFocusChange);
    const monthOptions = months.map((month, index) => (_jsx(Option, { value: index.toString(), children: months[index] }, month)));
    const yearOptions = years.map(year => (_jsx(Option, { value: year.toString(), children: year.toString() }, year.toString())));
    const displayNames = new Intl.DisplayNames(locale, { style: 'long', type: 'dateTimeField' });
    const Month = (_jsxs(Select, { "aria-label": displayNames.of('month'), readOnly: readOnly, required: required, value: state.month?.toString() ?? '', onChange: onSelectChange('month'), status: status, disabled: disabled, autoFocus: autoFocus, children: [!required && _jsx(Option, { children: " " }, 'null'), monthOptions] }, 'month'));
    const Year = (_jsxs(Select, { "aria-label": displayNames.of('year'), readOnly: readOnly, required: required, value: state.year?.toString() ?? '', onChange: onSelectChange('year'), status: status, disabled: disabled, children: [!required && _jsx(Option, { children: " " }, 'null'), yearOptions] }, 'year'));
    const Comp = (_jsxs(Flex, { as: StyledMonthInput, forwardedAs: StyledFormControl, container: { alignItems: 'center', wrap: 'nowrap' }, ref: containerRef, status: status, disabled: disabled, readOnly: readOnly, ...restProps, children: [Month, Year] }));
    return label ? (_jsx(FormField, { as: 'fieldset', labelAs: 'legend', ...{ label, labelHidden, id, info, status, required, disabled, additionalInfo }, children: Comp })) : (Comp);
});
export default MonthInput;
//# sourceMappingURL=MonthInput.js.map