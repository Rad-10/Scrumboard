{"version":3,"file":"PartInput.js","sourceRoot":"","sources":["../../../../src/components/DateTime/Input/PartInput.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n  FocusEvent,\n  KeyboardEvent,\n  FunctionComponent,\n  forwardRef,\n  PropsWithoutRef,\n  Ref,\n  useCallback,\n  useEffect,\n  ChangeEvent\n} from 'react';\n\nimport { useConsolidatedRef } from '../../../hooks';\nimport { ForwardProps, OmitStrict } from '../../../types';\nimport { InputProps } from '../../Input/Input';\n\nimport { BareInput } from './DateTime.styles';\n\nconst padNumberWithZeros = (maxLength: number, value: string = '') => {\n  if (value === '') return '';\n\n  return value.padStart(Number.isFinite(maxLength) ? maxLength : 0, '0');\n};\n\nexport interface PartInputProps extends OmitStrict<InputProps, 'defaultValue' | 'value'> {\n  value?: number;\n  min?: number;\n  max?: number;\n  maxLength?: number;\n  padWithZeros?: boolean;\n  size?: number;\n  onChange?: (value?: string) => void;\n}\n\nconst PartInput: FunctionComponent<PartInputProps & ForwardProps> = forwardRef(\n  (\n    {\n      value,\n      onChange,\n      readOnly,\n      min = 0,\n      max = Infinity,\n      size = 2,\n      maxLength = Infinity,\n      padWithZeros = true,\n      ...restProps\n    }: PropsWithoutRef<PartInputProps>,\n    ref: Ref<HTMLInputElement>\n  ) => {\n    const onKeyDown = useCallback((ev: KeyboardEvent<HTMLInputElement>) => {\n      if (['+', '-', 'e', 'E', '.', ','].includes(ev.key)) ev.preventDefault();\n    }, []);\n\n    const inputRef = useConsolidatedRef(ref);\n    useEffect(() => {\n      if (inputRef.current && !Number.isNaN(value)) {\n        inputRef.current.value = padNumberWithZeros(maxLength, value?.toString());\n      }\n    }, [value, inputRef.current]);\n\n    const onInputChange = useCallback(\n      (ev: ChangeEvent<HTMLInputElement>) => {\n        const targetEl = ev.target;\n        if (targetEl.value.length > maxLength) targetEl.value = targetEl.value.slice(0, maxLength);\n        else if (size !== maxLength)\n          targetEl.style.width = `${Math.max(targetEl.value.length, size)}ch`;\n      },\n      [maxLength]\n    );\n\n    const onBlur = useCallback(\n      (ev: FocusEvent<HTMLInputElement>) => {\n        const targetElValue = ev.target.value;\n        onChange?.(padWithZeros ? padNumberWithZeros(maxLength, targetElValue) : targetElValue);\n      },\n      [onChange]\n    );\n\n    const defaultValue = padNumberWithZeros(maxLength, value?.toString());\n\n    return (\n      <BareInput\n        type='number'\n        defaultValue={defaultValue}\n        onBlur={onBlur}\n        onKeyDown={onKeyDown}\n        onChange={onInputChange}\n        step={1}\n        min={min}\n        max={max}\n        maxLength={maxLength}\n        readOnly={readOnly}\n        ref={inputRef}\n        size={size}\n        {...restProps}\n      />\n    );\n  }\n);\n\nexport default PartInput;\n"]}