import styled, { css } from 'styled-components';
import { defaultThemeProp } from '../../../theme';
import { StyledButton } from '../../Button';
import { StyledPopover } from '../../Popover/Popover.styles';
import { StyledSelect } from '../../Select/Select';
export const BareInput = styled.input(({ theme, size }) => {
    return css `
    color: ${theme.components['form-control']['foreground-color']};
    border: 0;
    outline: none;
    width: ${size}ch;
    background-color: transparent;
    text-align: end;
    margin-inline-end: 0.125rem;
    height: inherit;

    &::placeholder {
      font-size: 0.6em;
      text-align: center;
      transform: translateY(-0.35ex);
    }

    &:last-child {
      text-align: start;
    }

    &:nth-child(3) {
      text-align: start;
      &::placeholder {
        text-align: start;
      }
    }

    ::-webkit-outer-spin-button,
    ::-webkit-inner-spin-button {
      -webkit-appearance: none;
      margin: 0;
    }

    &[type='number'] {
      -moz-appearance: textfield;
    }

    :not(:first-child) {
      margin-inline-start: 0.125rem;
    }
  `;
});
BareInput.defaultProps = defaultThemeProp;
export const StyledInputContainer = styled.div `
  height: inherit;
  overflow: hidden;

  > ${StyledSelect} {
    border: 0;
    background-color: transparent;
    color: currentcolor;
    opacity: 1;
    width: max-content;

    &:focus:not([readonly]):enabled {
      box-shadow: none;
      font-weight: ${p => p.theme.base['font-weight']['semi-bold']};
    }

    option {
      font-weight: ${p => p.theme.base['font-weight'].normal};
    }

    @media (pointer: coarse) {
      min-height: inherit;
    }
  }
`;
const StyledDateTime = styled.div(props => {
    const { theme: { base: { 'font-family': fontFamily, spacing, 'border-radius': baseBorderRadius, 'hit-area': hitArea }, components: { input: { height }, 'form-control': { 'border-radius': formBorderRadius, 'foreground-color': fgColor, 'border-width': borderWidth, ':focus': { 'border-color': focusBorderColor, 'box-shadow': shadow } } } } } = props;
    return css `
    min-width: min-content;
    height: ${height};
    min-height: ${hitArea['mouse-min']};
    outline: none;
    padding: 0 ${spacing};

    @media (pointer: coarse) {
      min-height: ${hitArea['finger-min']};
    }

    &:focus-within:not([disabled]) {
      border-color: ${focusBorderColor};
      box-shadow: ${shadow};
    }

    > ${StyledButton} {
      border-radius: calc(${baseBorderRadius} * ${formBorderRadius});
      margin-inline-start: auto;
      border: 0;
      &:enabled {
        color: ${fgColor};
      }
      min-height: calc(${height} - 2 * ${borderWidth});
      height: calc(${height} - 2 * ${borderWidth});
      @media (pointer: coarse) {
        min-height: calc(${hitArea['finger-min']} - 2 * ${borderWidth});
      }
    }

    ${StyledPopover},
    ${StyledSelect} {
      font-family: ${fontFamily};
    }
  `;
});
StyledDateTime.defaultProps = defaultThemeProp;
export default StyledDateTime;
//# sourceMappingURL=DateTime.styles.js.map