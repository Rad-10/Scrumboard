import { NoChildrenProp } from '../../types';
import { FormControlProps } from '../FormControl';
export interface DateTimeProperties {
    /** Date as ISO8601 string, timestamp or native Date object. Defines minimum available value that can be set by the user. */
    min?: string | number | Date;
    /** Date as ISO8601 string, timestamp or native Date object. Defines maximum available value that can be set by the user. */
    max?: string | number | Date;
    /**
     * Sets DOM id for the control and associates label element via 'for' attribute.
     * If an id is not pass, a random id will be generated for any render.
     */
    id?: FormControlProps['id'];
    /** Set visual state based on a validation state. */
    status?: FormControlProps['status'];
    /** Pass a string or a fragment with an Icon and string. */
    label?: FormControlProps['label'];
    /** Visually hides the label region. */
    labelHidden?: FormControlProps['labelHidden'];
    /** It is recommended to pass a simple string to offer guidance. Text will be styled based on status prop. */
    info?: FormControlProps['info'];
    /** Indicate if the field is required. The browser defaults to false. */
    required?: FormControlProps['required'];
    /** Disable the control. The browser defaults to false. */
    disabled?: FormControlProps['disabled'];
    /** Makes the input non editable and non clickable. The browser defaults to false. */
    readOnly?: FormControlProps['readOnly'];
    /** Sets html name attribute for the underlying control. Useful for mapping to a data field. */
    name?: FormControlProps['name'];
    /** Automatically focuses the input on render. */
    autoFocus?: boolean;
}
export declare type DateTimeValueErrorState = 'incomplete' | 'invalid';
export declare type DateTimeCallbackParameter = {
    valueAsISOString: string;
    valueAsTimestamp: number | undefined;
    state?: DateTimeValueErrorState;
};
export interface DateTimeCallbacks {
    /** Callback fired when input value changes. */
    onChange?: (value: DateTimeCallbackParameter) => void;
    /** Callback fired when the component gets focused. */
    onFocus?: (value: DateTimeCallbackParameter) => void;
    /** Callback fired when the component loses focus. */
    onBlur?: (value: DateTimeCallbackParameter) => void;
    /** Callback fired when AI suggestion is accepted/rejected */
    onResolveSuggestion?: FormControlProps['onResolveSuggestion'];
}
export default interface DateTimeProps extends DateTimeProperties, DateTimeCallbacks, NoChildrenProp {
    /**
     * Date as ISO8601 string, timestamp or native Date object.
     * Requires onChange prop to update value for controlled inputs.
     */
    value?: string | number | Date;
    /**
     * Date as ISO8601 string, timestamp or native Date object. Sets the value for an uncontrolled input.
     */
    defaultValue?: string | number | Date;
}
export declare type DateRangeCallbackParameter = {
    start: DateTimeCallbackParameter;
    end: DateTimeCallbackParameter;
};
export declare type AbsoluteVariant = 'date' | 'datetime' | 'time' | 'week' | 'month' | 'year' | 'monthyear' | 'quarteryear';
export declare type DateTimeVariant = AbsoluteVariant | 'relative';
export declare type DateTimeFormat = 'short' | 'long' | 'numeric';
//# sourceMappingURL=DateTime.types.d.ts.map