{"version":3,"file":"DateTimeDisplay.js","sourceRoot":"","sources":["../../../src/components/DateTime/DateTimeDisplay.tsx"],"names":[],"mappings":";AAAA,OAAO,EAAE,UAAU,EAA2C,MAAM,OAAO,CAAC;AAG5E,OAAO,EAAE,gBAAgB,EAAE,OAAO,EAAE,MAAM,aAAa,CAAC;AAGxD,OAAO,EAAe,WAAW,EAAE,MAAM,eAAe,CAAC;AACzD,OAAO,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAC;AAC7C,OAAO,EAAE,cAAc,EAAE,MAAM,SAAS,CAAC;AAwBzC,MAAM,eAAe,GAA2D,UAAU,CACxF,CACE,EACE,KAAK,EACL,OAAO,EACP,MAAM,GAAG,OAAO,EAChB,WAAW,EACX,GAAG,SAAS,EAC0B,EACxC,GAAgC,EAChC,EAAE;IACF,MAAM,EAAE,MAAM,EAAE,GAAG,gBAAgB,EAAE,CAAC;IACtC,MAAM,CAAC,GAAG,OAAO,EAAE,CAAC;IAEpB,OAAO,CACL,eAAM,GAAG,EAAE,GAAG,KAAM,SAAS,YAC1B,CAAC,KAAK,IAAI,KAAK,KAAK,CAAC,CAAC,IAAI,WAAW,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAC3D,cAAc,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE;YACjC,CAAC;YACD,MAAM;YACN,MAAM;YACN,OAAO;YACP,WAAW;YACX,QAAQ,EAAE,KAAK;SAChB,CAAC,CACH,CAAC,CAAC,CAAC,CACF,8BAAkB,MAAM,6BAAsB,CAC/C,GACI,CACR,CAAC;AACJ,CAAC,CACF,CAAC;AAEF,eAAe,eAAe,CAAC","sourcesContent":["import { forwardRef, FunctionComponent, PropsWithoutRef, Ref } from 'react';\n\nimport { BaseProps, ForwardProps } from '../../types';\nimport { useConfiguration, useI18n } from '../../hooks';\n\nimport { DateTimeFormat, DateTimeVariant } from './DateTime.types';\nimport { ClockFormat, parseToDate } from './Input/utils';\nimport { isValidDate } from './Picker/utils';\nimport { formatDateTime } from './utils';\n\nexport interface DateTimeDisplayProps extends BaseProps {\n  /**\n   * Date as ISO8601 string, timestamp or native Date object.\n   */\n  value?: Date | string | number;\n  /**\n   * Controls date time variant.\n   */\n  variant: DateTimeVariant;\n  /**\n   * Controls display format.\n   * @default \"short\"\n   */\n  format?: DateTimeFormat;\n  /**\n   * Defines clock format that overrides locale based format\n   */\n  clockFormat?: ClockFormat;\n  /** Ref for the wrapping element. */\n  ref?: Ref<HTMLSpanElement>;\n}\n\nconst DateTimeDisplay: FunctionComponent<DateTimeDisplayProps & ForwardProps> = forwardRef(\n  (\n    {\n      value,\n      variant,\n      format = 'short',\n      clockFormat,\n      ...restProps\n    }: PropsWithoutRef<DateTimeDisplayProps>,\n    ref: DateTimeDisplayProps['ref']\n  ) => {\n    const { locale } = useConfiguration();\n    const t = useI18n();\n\n    return (\n      <span ref={ref} {...restProps}>\n        {(value || value === 0) && isValidDate(parseToDate(value)) ? (\n          formatDateTime(parseToDate(value), {\n            t,\n            locale,\n            format,\n            variant,\n            clockFormat,\n            timeZone: 'UTC'\n          })\n        ) : (\n          <span aria-hidden='true'>&ndash;&ndash;</span>\n        )}\n      </span>\n    );\n  }\n);\n\nexport default DateTimeDisplay;\n"]}