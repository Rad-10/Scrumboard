{"version":3,"file":"DateTime.types.js","sourceRoot":"","sources":["../../../src/components/DateTime/DateTime.types.ts"],"names":[],"mappings":"","sourcesContent":["import { NoChildrenProp } from '../../types';\nimport { FormControlProps } from '../FormControl';\n\nexport interface DateTimeProperties {\n  /** Date as ISO8601 string, timestamp or native Date object. Defines minimum available value that can be set by the user. */\n  min?: string | number | Date;\n  /** Date as ISO8601 string, timestamp or native Date object. Defines maximum available value that can be set by the user. */\n  max?: string | number | Date;\n  /**\n   * Sets DOM id for the control and associates label element via 'for' attribute.\n   * If an id is not pass, a random id will be generated for any render.\n   */\n  id?: FormControlProps['id'];\n  /** Set visual state based on a validation state. */\n  status?: FormControlProps['status'];\n  /** Pass a string or a fragment with an Icon and string. */\n  label?: FormControlProps['label'];\n  /** Visually hides the label region. */\n  labelHidden?: FormControlProps['labelHidden'];\n  /** It is recommended to pass a simple string to offer guidance. Text will be styled based on status prop. */\n  info?: FormControlProps['info'];\n  /** Indicate if the field is required. The browser defaults to false. */\n  required?: FormControlProps['required'];\n  /** Disable the control. The browser defaults to false. */\n  disabled?: FormControlProps['disabled'];\n  /** Makes the input non editable and non clickable. The browser defaults to false. */\n  readOnly?: FormControlProps['readOnly'];\n  /** Sets html name attribute for the underlying control. Useful for mapping to a data field. */\n  name?: FormControlProps['name'];\n  /** Automatically focuses the input on render. */\n  autoFocus?: boolean;\n}\n\nexport type DateTimeValueErrorState = 'incomplete' | 'invalid';\n\nexport type DateTimeCallbackParameter = {\n  valueAsISOString: string;\n  valueAsTimestamp: number | undefined;\n  state?: DateTimeValueErrorState;\n};\n\nexport interface DateTimeCallbacks {\n  /** Callback fired when input value changes. */\n  onChange?: (value: DateTimeCallbackParameter) => void;\n  /** Callback fired when the component gets focused. */\n  onFocus?: (value: DateTimeCallbackParameter) => void;\n  /** Callback fired when the component loses focus. */\n  onBlur?: (value: DateTimeCallbackParameter) => void;\n  /** Callback fired when AI suggestion is accepted/rejected */\n  onResolveSuggestion?: FormControlProps['onResolveSuggestion'];\n}\n\nexport default interface DateTimeProps\n  extends DateTimeProperties,\n    DateTimeCallbacks,\n    NoChildrenProp {\n  /**\n   * Date as ISO8601 string, timestamp or native Date object.\n   * Requires onChange prop to update value for controlled inputs.\n   */\n  value?: string | number | Date;\n  /**\n   * Date as ISO8601 string, timestamp or native Date object. Sets the value for an uncontrolled input.\n   */\n  defaultValue?: string | number | Date;\n}\n\nexport type DateRangeCallbackParameter = {\n  start: DateTimeCallbackParameter;\n  end: DateTimeCallbackParameter;\n};\n\nexport type AbsoluteVariant =\n  | 'date'\n  | 'datetime'\n  | 'time'\n  | 'week'\n  | 'month'\n  | 'year'\n  | 'monthyear'\n  | 'quarteryear';\nexport type DateTimeVariant = AbsoluteVariant | 'relative';\nexport type DateTimeFormat = 'short' | 'long' | 'numeric';\n"]}