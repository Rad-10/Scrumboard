{"version":3,"file":"CompositeInput.types.js","sourceRoot":"","sources":["../../../src/components/CompositeInput/CompositeInput.types.ts"],"names":[],"mappings":"","sourcesContent":["import { ComponentType, Ref } from 'react';\n\nimport { BaseProps, DeferInfer, NoChildrenProp } from '../../types';\nimport { FormControlProps } from '../FormControl';\n\nexport interface CompositeInputProps<P extends object = object> extends BaseProps, NoChildrenProp {\n  /**\n   * Sets DOM id for the control and associates label element via 'for' attribute.\n   * If an id is not pass, a random id will be generated for any render.\n   */\n  id?: FormControlProps['id'];\n  /** Set visual state based on a validation state. */\n  status?: FormControlProps['status'];\n  /** Pass a string or a fragment with an Icon and string. */\n  label?: FormControlProps['label'];\n  /** Visually hides the label region. */\n  labelHidden?: FormControlProps['labelHidden'];\n  /** It is recommended to pass a simple string to offer guidance. Text will be styled based on status prop. */\n  info?: FormControlProps['info'];\n  /** Indicate if the field is required. The browser defaults to false. */\n  required?: FormControlProps['required'];\n  /** Disable the control. The browser defaults to false. */\n  disabled?: FormControlProps['disabled'];\n  /** Callback when clear button is clicked. */\n  onClear: () => void;\n  /** String representation of the complex value. */\n  value?: string;\n  /** Text visible when on value has been set. */\n  placeholder?: FormControlProps['placeholder'];\n  /** Button when clicked will show additional information for the composite input */\n  additionalInfo?: FormControlProps['additionalInfo'];\n  /** Value form options. */\n  dialog: {\n    /**\n     * A component to render the main portion of the form.\n     */\n    renderer: ComponentType<P>;\n    /**\n     * A props object that will be passed to the form renderer.\n     */\n    rendererProps?: DeferInfer<P>;\n    /** Callback when cancel button is clicked. */\n    onCancel: ({ close }: { close: () => void }) => void;\n    /** Callback when apply button is clicked. */\n    onApply: ({ close }: { close: () => void }) => void;\n  };\n  /** Ref forwarded to the wrapping element. */\n  ref?: Ref<HTMLDivElement>;\n}\n"]}