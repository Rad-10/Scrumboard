import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { useCallback, useContext, useEffect, useState } from 'react';
import styled, { css } from 'styled-components';
import Tooltip from '../Tooltip';
import { useElement, useI18n } from '../../hooks';
import Icon, { registerIcon } from '../Icon';
import * as locationIcon from '../Icon/icons/location.icon';
import Button from '../Button';
import { defaultThemeProp } from '../../theme';
import MapsContext from './MapsContext';
import { getNavigatorPosition, getAddress, loadMapsAPI } from './utils';
registerIcon(locationIcon);
export const StyledCurrentLocationButton = styled(Button)(({ currentLocationDisabled, theme: { base: { 'disabled-opacity': disabledOpacity } } }) => css `
    ${currentLocationDisabled &&
    css `
      opacity: ${disabledOpacity};
      cursor: auto;
    `}
  `);
StyledCurrentLocationButton.defaultProps = defaultThemeProp;
const CurrentLocationButton = ({ onChange, onError, defaultToCurrentLocation }) => {
    const t = useI18n();
    const { name, ...providerOpts } = useContext(MapsContext);
    const [currentLocationDisabled, setCurrentLocationDisabled] = useState(false);
    const [el, setEl] = useElement();
    const getCurrentLocation = useCallback(() => {
        getNavigatorPosition()
            .catch(error => {
            setCurrentLocationDisabled(true);
            throw error;
        })
            .then(getAddress)
            .then(address => onChange?.(address))
            .catch(error => onError?.(error));
    }, [onChange, onError]);
    useEffect(() => {
        navigator.permissions?.query({ name: 'geolocation' }).then(result => {
            if (result.state === 'denied') {
                setCurrentLocationDisabled(true);
            }
        });
        if (defaultToCurrentLocation) {
            loadMapsAPI(name, providerOpts).then(getCurrentLocation);
        }
    }, []);
    return (_jsxs(_Fragment, { children: [_jsx(Button, { ref: setEl, as: StyledCurrentLocationButton, variant: 'simple', icon: true, onClick: getCurrentLocation, "aria-label": t('my_current_location_button_a11y'), currentLocationDisabled: currentLocationDisabled, children: _jsx(Icon, { name: 'location' }) }), el && currentLocationDisabled && (_jsx(Tooltip, { shown: true, target: el, children: t('allow_location_permissions_text') }))] }));
};
export default CurrentLocationButton;
//# sourceMappingURL=CurrentLocationButton.js.map