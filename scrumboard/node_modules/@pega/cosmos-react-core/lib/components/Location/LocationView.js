import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useContext, useRef, useState, useEffect } from 'react';
import styled, { css } from 'styled-components';
import { defaultThemeProp } from '../../theme';
import { hasProp } from '../../utils';
import Progress from '../Progress';
import { Status } from '../Badges';
import { loadMapsAPI, getCoords, toGoogleLatLng, getPlaceById, isLatLngObject } from './utils';
import MapsContext from './MapsContext';
export const StyledLocationError = styled.div `
  position: absolute;
  top: 40%;
  left: 50%;
  transform: translate(-50%, -50%);
`;
StyledLocationError.defaultProps = defaultThemeProp;
export const StyledLocationView = styled.div(props => {
    const { height, theme } = props;
    return css `
    height: ${height};
    position: relative;
    flex: auto;
    border-radius: ${theme.base['border-radius']};
    mask-image: radial-gradient(white, black);
    -webkit-mask-image: radial-gradient(white, black);
  `;
});
StyledLocationView.defaultProps = defaultThemeProp;
const StyledMap = styled.div(({ height, disabled, status, eMessage, theme: { base: { 'disabled-opacity': disabledOpacity } } }) => {
    return css `
      height: ${height};
      ${disabled &&
        css `
        opacity: ${disabledOpacity};
      `}
      ${status === 'error' &&
        eMessage &&
        css `
        opacity: ${disabledOpacity};
      `}
    `;
});
StyledMap.defaultProps = defaultThemeProp;
var LoadStatus;
(function (LoadStatus) {
    LoadStatus["Init"] = "init";
    LoadStatus["Ready"] = "ready";
    LoadStatus["Error"] = "error";
})(LoadStatus || (LoadStatus = {}));
const LocationView = (props) => {
    const { location = 'current', zoomLevel = 13, height = '25rem', centerMapOnChange = false, onClick, onError, disabled = false, ...restProps } = props;
    const { name, ...providerOpts } = useContext(MapsContext);
    const [status, setStatus] = useState(LoadStatus.Init);
    const [eMessage, setEMessage] = useState('');
    const mapElemRef = useRef();
    const map = useRef();
    const marker = useRef();
    function initialize() {
        if (mapElemRef.current) {
            const position = toGoogleLatLng({ latitude: 0, longitude: 0 });
            map.current = new google.maps.Map(mapElemRef.current, {
                center: position,
                zoom: 2,
                draggable: !disabled
            });
            marker.current = new google.maps.Marker({
                map: map.current,
                position
            });
            marker.current?.setVisible(false);
            if (onClick)
                map.current.addListener('click', (event) => {
                    if (event &&
                        typeof event === 'object' &&
                        hasProp(event, 'placeId') &&
                        typeof event.placeId === 'string') {
                        getPlaceById(event.placeId).then(placeInfo => {
                            if (hasProp(event, 'latLng') && isLatLngObject(event.latLng))
                                onClick?.({
                                    ...placeInfo,
                                    latitude: event.latLng.lat(),
                                    longitude: event.latLng.lng()
                                });
                        });
                    }
                });
        }
    }
    useEffect(() => {
        let unMounted = false;
        loadMapsAPI(name, providerOpts)
            .then(() => {
            if (!unMounted) {
                initialize();
                setStatus(LoadStatus.Ready);
            }
        })
            .catch((error) => {
            setStatus(LoadStatus.Error);
            setEMessage(error.message);
            onError?.(error);
        });
        return () => {
            unMounted = true;
            if (map.current)
                google.maps.event.clearInstanceListeners(map.current);
        };
    }, []);
    useEffect(() => {
        getCoords(location)
            .then(coords => {
            if (map.current) {
                map.current.setOptions({
                    zoom: zoomLevel,
                    draggable: !disabled
                });
                marker.current?.setPosition(toGoogleLatLng(coords));
                marker.current?.setVisible(true);
                if (centerMapOnChange)
                    map.current.setCenter(toGoogleLatLng(coords));
                if (status !== LoadStatus.Ready)
                    setStatus(LoadStatus.Ready);
            }
        })
            .catch((error) => {
            if (status !== LoadStatus.Error)
                setStatus(LoadStatus.Error);
            marker.current?.setVisible(false);
            setEMessage(error.message);
            onError?.(error);
        });
    }, [location, status, zoomLevel, disabled, centerMapOnChange, onError]);
    return (_jsxs(StyledLocationView, { height: height, children: [_jsx(StyledMap, { ref: mapElemRef, height: height, disabled: disabled, status: status, eMessage: eMessage, ...restProps }), status === LoadStatus.Init && _jsx(Progress, { placement: 'local' }), status === LoadStatus.Error && eMessage && (_jsx(Status, { as: StyledLocationError, "aria-label": eMessage, variant: 'info', children: eMessage }))] }));
};
export default LocationView;
//# sourceMappingURL=LocationView.js.map