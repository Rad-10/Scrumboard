import { FunctionComponent, ReactNode, Ref } from 'react';
import { BaseProps, ForwardProps, NoChildrenProp } from '../../types';
export interface ListProps extends BaseProps, NoChildrenProp {
    /** List content. */
    items: ReactNode[];
    /** List Heading. */
    heading?: string;
    /** Number of list items that need to be shown. */
    count?: number;
    /** Callback to display more/less items. */
    onToggleShow?: () => void;
    /** Ref forwarded to the wrapping element. */
    ref?: Ref<HTMLDivElement>;
}
export interface VisualListProps extends ListProps {
    /** Type of list. */
    variant: 'ordered' | 'unordered';
    /** Depth of list (used for recursion). */
    depth?: number;
}
declare const olTypes: readonly ["decimal", "lower-alpha", "lower-roman"];
declare const ulTypes: readonly ["disc", "circle", "square"];
export declare const StyledList: import("styled-components").StyledComponent<"div", import("styled-components").DefaultTheme, {
    depth: number;
    listType: (typeof olTypes)[number] | (typeof ulTypes)[number];
}, never>;
export declare const StyledSublistItem: import("styled-components").StyledComponent<"li", import("styled-components").DefaultTheme, {}, never>;
declare const List: FunctionComponent<VisualListProps & ForwardProps>;
export default List;
//# sourceMappingURL=List.d.ts.map