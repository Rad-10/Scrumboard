import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef } from 'react';
import styled, { css } from 'styled-components';
import { defaultThemeProp } from '../../theme';
import { calculateFontSize } from '../../styles';
import Button from '../Button';
import Text from '../Text';
import { useI18n } from '../../hooks';
const olTypes = ['decimal', 'lower-alpha', 'lower-roman'];
const ulTypes = ['disc', 'circle', 'square'];
export const StyledList = styled.div(({ theme, depth, listType }) => {
    const fontSize = calculateFontSize(theme.base['font-size'], theme.base['font-scale']);
    return css `
    padding-inline-start: calc(2 * ${theme.base.spacing});
    list-style-position: inside;
    h3 {
      margin-block-end: calc(2 * ${theme.base.spacing});
    }

    & > ol,
    & > ul {
      list-style-type: ${listType};

      & > li {
        &:not(:last-child) {
          margin-block-end: calc(0.5 * ${theme.base.spacing});
        }

        ${depth > 0
        ? css `
              font-size: ${fontSize.xs};
            `
        : css `
              &::marker {
                font-weight: ${theme.base['font-weight'].bold};
              }
            `}
      }
    }
  `;
});
StyledList.defaultProps = defaultThemeProp;
export const StyledSublistItem = styled.li `
  list-style: none;
`;
const List = forwardRef(({ items, variant, count, onToggleShow, depth = 0, heading, ...restProps }, ref) => {
    const t = useI18n();
    const listContent = items.map((value, idx) => Array.isArray(value) ? (
    // eslint-disable-next-line react/no-array-index-key
    _jsx(StyledSublistItem, { children: _jsx(List, { depth: depth + 1, variant: variant, items: value }) }, idx)) : (
    // eslint-disable-next-line react/no-array-index-key
    _jsx("li", { children: value }, idx)));
    return (_jsxs(StyledList, { ...restProps, ref: ref, depth: depth, listType: (variant === 'ordered' ? olTypes : ulTypes)[depth % 3], children: [heading && _jsx(Text, { variant: 'h3', children: heading }), variant === 'ordered' ? _jsx("ol", { children: listContent }) : _jsx("ul", { children: listContent }), count && onToggleShow && (_jsx(Button, { variant: 'link', onClick: onToggleShow, children: count > items.flat().length ? t('show_more') : t('show_less') }))] }));
});
export default List;
//# sourceMappingURL=List.js.map