{"version":3,"file":"CreditCard.types.js","sourceRoot":"","sources":["../../../src/components/CreditCard/CreditCard.types.ts"],"names":[],"mappings":"","sourcesContent":["import { Ref } from 'react';\n\nimport { BaseProps, NoChildrenProp } from '../../types';\nimport { FormControlProps } from '../FormControl';\n\nexport type ObfuscationMode = 'none' | 'partial' | 'full';\n\nexport interface FormattingOptions {\n  obfuscation?: ObfuscationMode;\n}\n\nexport interface CreditCardDisplayProps extends BaseProps, NoChildrenProp {\n  /** Number value. */\n  value?: string;\n  /** Options to define formatting. */\n  formattingOptions?: {\n    /**\n     * Defines if the obfuscation (replacing digits with bullets) should be applied.\n     * This is only visual obfuscation, the real one should be applied on the server side.\n     * Characters that are going to be obfuscated may be random characters or even missing.\n     * @default 'none'\n     */\n    obfuscation?: ObfuscationMode;\n  };\n  /** Ref for the wrapping element. */\n  ref?: Ref<HTMLSpanElement>;\n}\n\nexport interface CreditCardInputProps extends BaseProps, NoChildrenProp {\n  /**\n   * Sets DOM id for the control and associates label element via 'for' attribute.\n   * If an id is not pass, a random id will be generated for any render.\n   */\n  id?: FormControlProps['id'];\n  /** Set visual state based on a validation state. */\n  status?: FormControlProps['status'];\n  /** Pass a string or a fragment with an Icon and string. */\n  label?: FormControlProps['label'];\n  /**\n   * Visually hides the label region.\n   * @default false\n   */\n  labelHidden?: FormControlProps['labelHidden'];\n  /** It is recommended to pass a simple string to offer guidance. Text will be styled based on status prop. */\n  info?: FormControlProps['info'];\n  /** Indicate if the field is required. The browser defaults to false. */\n  required?: FormControlProps['required'];\n  /** Placeholder text. The browser defaults to an empty string. */\n  placeholder?: string;\n  /** Disable the control. The browser defaults to false. */\n  disabled?: FormControlProps['disabled'];\n  /** Makes the component non editable and non clickable. The browser defaults to false. */\n  readOnly?: FormControlProps['readOnly'];\n  /** Sets html name attribute for the underlying control. Useful for mapping to a data field. */\n  name?: FormControlProps['name'];\n  /**\n   * CurrencyInput input value.\n   * Requires an onChange handler to update value.\n   * @default ''\n   */\n  value?: string;\n  /** Callback fired when input value changes. */\n  onChange: (value?: string) => void;\n  /** Callback fired when the component loses focus. */\n  onFocus?: (value?: string) => void;\n  /** Callback fired when the component loses focus. */\n  onBlur?: (value?: string) => void;\n  /** Pass a heading and content to show additional information on the field. */\n  additionalInfo?: FormControlProps['additionalInfo'];\n  /** Ref for the wrapping element. */\n  ref?: Ref<HTMLInputElement>;\n}\n"]}