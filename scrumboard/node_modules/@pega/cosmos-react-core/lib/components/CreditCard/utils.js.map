{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../src/components/CreditCard/utils.ts"],"names":[],"mappings":"AAAA,OAAO,cAAc,EAAE,EAAE,WAAW,EAAE,MAAM,kBAAkB,CAAC;AAI/D,MAAM,eAAe,GAAG,CAAC,KAAa,EAAE,IAAc,EAAU,EAAE;IAChE,MAAM,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CACxB,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,EAClC,KAAK,CAAC,MAAM,CACb,CAAC;IAEF,MAAM,MAAM,GAAG,EAAE,CAAC;IAClB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;QACjD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;KAC1D;IACD,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC1B,CAAC,CAAC;AAEF;;;;GAIG;AACH,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAC9B,KAAa,EACb,EAAE,WAAW,GAAG,MAAM,KAAwB,EAAE,EACxC,EAAE;IACV,IAAI,MAAM,CAAC;IACX,QAAQ,WAAW,EAAE;QACnB,KAAK,MAAM;YACT,MAAM,GAAG,eAAe,CAAC,KAAK,EAAE,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,IAAI,EAAE,CAAC,CAAC;YACtE,MAAM;QACR,KAAK,SAAS;YACZ,MAAM,GAAG,eAAe,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;YACxE,MAAM;QACR;YACE,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KACpE;IACD,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC;AAEF,0FAA0F;AAC1F,MAAM,CAAC,MAAM,qBAAqB,GAAG,CAAC,QAAgB,EAAU,EAAE;IAChE,MAAM,IAAI,GAAG,WAAW,CAAC,QAAQ,CAAC,CAAC;IACnC,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;AACtD,CAAC,CAAC;AAEF,yFAAyF;AACzF,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAAC,UAAkB,EAAW,EAAE;IAClE,OAAO,cAAc,CAAC,UAAU,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;AAC/C,CAAC,CAAC;AAEF,mHAAmH;AACnH,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,UAAkB,EAAW,EAAE;IAC/D,OAAO,CACL,cAAc,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC;QACxF,KAAK,CACN,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import creditCardType, { getTypeInfo } from 'credit-card-type';\n\nimport type { FormattingOptions } from './CreditCard.types';\n\nconst prettyPrintCard = (value: string, gaps: number[]): string => {\n  const offsets = [0].concat(\n    gaps.filter(n => n < value.length),\n    value.length\n  );\n\n  const groups = [];\n  for (let i = 0; offsets[i] < value.length; i += 1) {\n    groups.push(value.substring(offsets[i], offsets[i + 1]));\n  }\n  return groups.join(' ');\n};\n\n/**\n * Returns a formatted and obfuscated on demand partial credit card number.\n * @param value starting, partial number.\n * @param formattingOptions additional formatting options\n */\nexport const formatCreditCard = (\n  value: string,\n  { obfuscation = 'none' }: FormattingOptions = {}\n): string => {\n  let result;\n  switch (obfuscation) {\n    case 'none':\n      result = prettyPrintCard(value, creditCardType(value)[0]?.gaps ?? []);\n      break;\n    case 'partial':\n      result = prettyPrintCard(value.slice(-4).padStart(16, '•'), [4, 8, 12]);\n      break;\n    default:\n      result = Array.from({ length: 4 }).fill('•'.repeat(4)).join(' ');\n  }\n  return result;\n};\n\n/** Returns maximum total length of formatted credit card of given type including gaps. */\nexport const creditCardTotalLength = (cardType: string): number => {\n  const type = getTypeInfo(cardType);\n  return Math.max(...type.lengths) + type.gaps.length;\n};\n\n/** Returns true if given first numbers match a pattern of any card, false otherwise.  */\nexport const isPossibleCardNumber = (cardNumber: string): boolean => {\n  return creditCardType(cardNumber).length > 0;\n};\n\n/** Returns true if given card number is valid (matches the pattern and length of a card type), false otherwise. */\nexport const isValidCreditCard = (cardNumber: number): boolean => {\n  return (\n    creditCardType(cardNumber.toString())[0]?.lengths.includes(cardNumber.toString().length) ??\n    false\n  );\n};\n"]}