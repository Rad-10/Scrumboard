{"version":3,"file":"Menu.types.js","sourceRoot":"","sources":["../../../src/components/Menu/Menu.types.ts"],"names":[],"mappings":"","sourcesContent":["import { Dispatch, ReactNode, Ref, RefObject, SetStateAction, MouseEvent } from 'react';\n\nimport { BaseProps, NoChildrenProp, OmitStrict, PropsWithDefaults } from '../../types';\nimport { MetaListProps } from '../MetaList';\nimport type { UseActiveDescendantConfig } from '../../hooks';\n\nexport type AcceptedMouseEventElement = HTMLButtonElement | HTMLAnchorElement | HTMLInputElement;\n\nexport interface MenuItemProps extends MenuObjectProps {\n  /** The primary piece of item information as a string. */\n  primary: string;\n  /** Secondary info about an item. Useful for additional metadata or context. Will be overridden when ancestors are passed as a prop. */\n  secondary?: MetaListProps['items'];\n  /** A visual to assist identifying an item. e.g. Avatar or Icon. */\n  visual?: ReactNode;\n  /** A count to assist with number of associated items. */\n  count?: number;\n  /** An array of MenuItemProps to identify an item's ancestors by their primary value. Useful for flattened tree search results. */\n  ancestors?: (MenuItemProps | MenuGroupProps)[];\n  /** An array of either MenuItemProps or MenuGroupProps children. */\n  items?: (MenuItemProps | MenuGroupProps)[];\n  /**\n   * For single or multi select menus, selected must be set true|false to render an item's radiobutton or checkbox.\n   * May be set on parent or leaf items.\n   */\n  selected?: boolean;\n  /**\n   * FUTURE SUPPORT: Use to indicate an item has a partial selection, some but not all of its descendants are selected.\n   */\n  partial?: boolean;\n  /** Will render the action item as link. Only use for leaf items. */\n  href?: string;\n  /**\n   * Provide a description for an item that will render in a Tooltip when hovering that item.\n   * This should be used only for VERY SPECIFIC UX scenarios.\n   */\n  tooltip?: string;\n  /** Use this function to identify and set item selections. Recommend leveraging top level Menu onItemClick handler. */\n  onClick?: (id: MenuItemProps['id'], e: MouseEvent<AcceptedMouseEventElement>) => void;\n  onExpand?: MenuItemProps['onClick'];\n  /** Determines if the MenuItem will be disabled. */\n  disabled?: boolean;\n  role?: 'menuitem' | 'option';\n}\n\nexport interface MenuGroupProps extends MenuObjectProps {\n  /** Label of the group. */\n  label: string;\n  /** An array of MenuItemProps children. */\n  items: MenuItemProps[];\n  /** List-like role to apply to group items. */\n  itemRole?: MenuItemProps['role'];\n}\n\nexport type ParentMenuItemProps = MenuItemProps & { items: NonNullable<MenuItemProps['items']> };\n\nexport interface MenuListHeaderProps {\n  /** Text used to indicate an expanded parent item. */\n  text: string;\n  /** Internal handler. */\n  onClick: () => void;\n}\n\nexport interface MenuObjectProps {\n  /** A unique id within the entire tree of menu items. */\n  id: string;\n}\n\nexport interface MenuListProps {\n  items: ParentMenuItemProps['items'];\n  id?: string;\n  ref?: Ref<HTMLFieldSetElement>;\n  parent?: {\n    el: HTMLFieldSetElement;\n    item: ParentMenuItemProps;\n    siblingItems: ParentMenuItemProps['items'];\n    setExpandedItem: Dispatch<SetStateAction<ParentMenuItemProps | undefined>>;\n    returnFocusRef: RefObject<HTMLButtonElement>;\n  };\n  menuRole?: 'menu' | 'listbox';\n}\n\nexport interface MenuProps extends BaseProps, NoChildrenProp {\n  /** An array of MenuItemProps. */\n  items: (MenuItemProps | MenuGroupProps)[];\n  /** ID placed on the menu's list element. */\n  listId?: string;\n  /**\n   * Indicates intent for the menu.\n   * As of now item types can not be mixed.\n   * @default \"action\"\n   */\n  mode?: 'action' | 'multi-select' | 'single-select';\n  role?: 'menu' | 'listbox';\n  /**\n   * Always recommended to go for default drill-down variant for better accessibility.\n   * When flyout variant is selected, its recommended not to have more than 1 nested level\n   * @default \"drill-down\"\n   */\n  variant?: 'drill-down' | 'flyout';\n  /**\n   * Use to accent(make bold) portions of the primary text.\n   * Useful for filter/search results.\n   * If passed a function, that function will be passed each items primary text.\n   */\n  accent?: RegExp | ((primary: string) => RegExp);\n  /**\n   * Item height will grow or shrink based on item count.\n   * Use this indicate at which item the menu should begin its scroll.\n   * @default 7\n   */\n  scrollAt?: number;\n  /** A simple message to display when there are no items. */\n  emptyText?: string;\n  /**\n   * A top level handler for all item clicks.\n   * This is convenient way to detect which item was clicked to react by updating state or performing an action.\n   * Both an item's onClick and this will be called if both are passed.\n   */\n  onItemClick?: MenuItemProps['onClick'];\n  /**\n   * A top level handler for all item pseudo focus events.\n   * This is convenient way to detect which item is active to react by updating state or performing an action.\n   */\n  onItemActive?: (id: MenuItemProps['id']) => void;\n  /**\n   * A top level handler for clicks on parent items to expand their child items.\n   * This is convenient way to detect when an item is expanded.\n   * For lazy loading this would be a good time to set an item's items.\n   * Both an item's onExpand and this will be called if both are passed.\n   */\n  onItemExpand?: MenuProps['onItemClick'];\n  /**\n   * A top level handler for capturing when nested items have been collapsed / \"back\" button clicks.\n   */\n  onItemCollapse?: (id: MenuItemProps['id']) => void;\n  /**\n   * Show a Progress indicator at the end of a list where newly loaded items will be appended.\n   * @default false\n   */\n  loading?: boolean;\n  /** Callback to fetch more items */\n  loadMore?: (id?: MenuItemProps['id']) => void;\n  /** Ref placed on the root menu element. */\n  ref?: Ref<HTMLDivElement>;\n  /** HTML ID. */\n  id?: string;\n  /**\n   * Currently highlighted item.\n   * Setting currentItemId assumes synthetic focus is being controlled entirely by the containing component,\n   * and unbinds menu useActiveDescendant keydown controls.\n   * @deprecated\n   * */\n  currentItemId?: string;\n  /** Override for default active-descendant focus control element in menu */\n  focusControlEl?: HTMLElement | undefined;\n  /** Override whether the menu automatically focuses the control element on close */\n  focusElOnClose?: boolean;\n  /** Header region. */\n  header?: ReactNode;\n  /** Footer region. */\n  footer?: ReactNode;\n  /** Pauses evaluation of menu active descendants while true */\n  pauseDescendantEvaluation?: UseActiveDescendantConfig['pauseDescendantEvaluation'];\n  /**\n   * Flag to indicate that Right/Left arrow navigation for expand/collapse parent items is not available.\n   * Will accept enter if not selectable parent, otherwise falls back to shift + space.\n   */\n  arrowNavigationUnsupported?: boolean;\n  /**\n   * Additional information to announce to screen reader users. Read before menu navigation instructions.\n   */\n  'aria-describedby'?: string;\n  /** Label for menu or listbox element */\n  'aria-label'?: string;\n}\n\ntype MenuPropsWithDefaults = PropsWithDefaults<\n  MenuProps,\n  'mode' | 'variant' | 'scrollAt' | 'loading'\n>;\nexport interface MenuContextProps extends OmitStrict<MenuPropsWithDefaults, 'ref' | 'items'> {\n  radioName?: string;\n  componentId: string;\n  pushFlyoutId: (id: string) => void;\n  flyOutActiveIdStack: string[];\n  focusControl: HTMLElement | null;\n  updateActiveDescendants: (options?: { preventScroll?: boolean }) => void;\n  setFocusDescendant: Dispatch<SetStateAction<HTMLElement | null>>;\n  setFocusReturnEl: Dispatch<SetStateAction<HTMLElement | null | undefined>>;\n  getScopedItemId: (itemId: string) => string;\n  updateParentDescendantStack?: (item: HTMLElement | null) => void;\n}\n\nexport interface NavItemsListProps {\n  listRef: RefObject<HTMLUListElement>;\n  cycle?: boolean;\n}\n"]}