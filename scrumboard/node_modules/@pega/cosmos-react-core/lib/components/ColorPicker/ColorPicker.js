import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef, useState, useEffect } from 'react';
import styled, { css } from 'styled-components';
import { hideVisually } from 'polished';
import { ChromePicker } from 'react-color';
import FormField from '../FormField';
import { defaultThemeProp } from '../../theme';
import { StyledFormControl } from '../FormControl';
import Flex from '../Flex';
import { useConsolidatedRef, useUID, useElement, useOuterEvent } from '../../hooks';
import Popover from '../Popover';
const StyledColorPicker = styled.div(({ theme, swatchOnly }) => {
    const size = theme.components.input.height;
    const borderWidth = theme.components['form-control']['border-width'];
    return css `
      ${StyledFormControl} {
        overflow: hidden;
        text-transform: uppercase;
        ${!swatchOnly &&
        css `
          min-width: 8rem;
        `}

        ${!swatchOnly &&
        css `
          padding-inline-end: ${theme.base.spacing};
        `}

        &:focus-within {
          box-shadow: ${theme.base.shadow.focus};
          border: none;
        }

        & > input {
          ${hideVisually}

          & + div {
            height: calc(${size} - (2 * ${borderWidth}));

            ${swatchOnly
        ? css `
                  width: calc(${size} - (2 * ${borderWidth}));
                `
        : css `
                  min-width: calc(${size} - ${borderWidth});
                  margin-inline-end: ${theme.base.spacing};
                  border-inline-end: ${borderWidth} solid
                    ${theme.components['form-control']['border-color']};
                `}
          }

          &:focus + div {
            width: ${size};
            height: ${size};
          }
        }

        & input {
          height: 2rem !important;
          min-height: 2rem;
          color: #000000 !important;
          background-color: #ffffff !important;
          font-size: 0.8125rem !important;
          font-family: ${theme.base['font-family']};

          & + label {
            font-weight: 600;
            color: rgba(0, 0, 0, 0.6) !important;
            font-size: 0.8125rem !important;
            font-family: ${theme.base['font-family']};
          }
        }
      }
    `;
});
StyledColorPicker.defaultProps = defaultThemeProp;
const ColorPicker = forwardRef((props, ref) => {
    const uid = useUID();
    const { id = uid, value = '#000000', label, info, disabled, status, required, readOnly, labelHidden, swatchOnly = false, alpha = false, inline, onClick, onChange, onBeforeClose, additionalInfo, ...restProps } = props;
    const inputRef = useConsolidatedRef(ref);
    const maskedSwatchRef = useConsolidatedRef();
    const [popoverEl, setPopoverEl] = useElement(null);
    const [showPopOver, setShowPopOver] = useState(false);
    const hidePopover = () => {
        if (showPopOver) {
            onBeforeClose?.();
        }
        setShowPopOver(false);
    };
    const closePopover = (e) => {
        if (e.key === 'Escape') {
            e.preventDefault();
            hidePopover();
        }
    };
    useOuterEvent('mousedown', [popoverEl], hidePopover);
    useEffect(() => {
        document.addEventListener('keydown', closePopover);
        popoverEl?.addEventListener('keydown', closePopover);
        return () => {
            document.removeEventListener('keydown', closePopover);
            popoverEl?.removeEventListener('keydown', closePopover);
        };
    }, [popoverEl]);
    useEffect(() => {
        if (showPopOver) {
            popoverEl?.focus();
        }
    }, [showPopOver]);
    return (_jsx(FormField, { inline: inline, container: inline ? { justify: 'between' } : undefined, as: StyledColorPicker, id: id, label: label, labelHidden: labelHidden, swatchOnly: swatchOnly, info: info, disabled: disabled, status: status, required: required, additionalInfo: additionalInfo, ...restProps, children: _jsxs(Flex, { container: { alignItems: 'center' }, item: swatchOnly ? { alignSelf: 'start' } : undefined, as: StyledFormControl, disabled: disabled, status: status, required: required, readOnly: readOnly, onClick: readOnly || disabled ? undefined : () => setShowPopOver(true), children: [_jsx("input", { ...restProps, id: id, type: readOnly ? undefined : 'color', ref: inputRef, defaultValue: value, disabled: disabled, required: required, readOnly: readOnly, onClick: e => {
                        e.preventDefault();
                    } }), _jsx("div", { style: { backgroundColor: value }, ref: maskedSwatchRef }), !swatchOnly && value, _jsx(Popover, { placement: 'bottom-start', style: { zIndex: '3000' }, show: showPopOver, ref: setPopoverEl, groupId: 'popover', target: maskedSwatchRef.current, children: _jsx(ChromePicker, { disableAlpha: !alpha, color: value, onChange: (color, e) => {
                            onChange?.(color, e);
                        } }) })] }) }));
});
export default ColorPicker;
//# sourceMappingURL=ColorPicker.js.map