import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef, useState } from 'react';
import styled, { css } from 'styled-components';
import Button from '../Button';
import ExpandCollapse from '../ExpandCollapse';
import Flex from '../Flex';
import Grid from '../Grid';
import HTML from '../HTML';
import Icon, { StyledIcon, registerIcon } from '../Icon';
import * as caretRightIcon from '../Icon/icons/caret-right.icon';
import Actions from '../Actions';
import { defaultThemeProp } from '../../theme';
import { useDirection, useI18n, useUID } from '../../hooks';
import { calculateFontSize, omitProps } from '../../styles';
import AdditionalInfo from '../AdditionalInfo';
registerIcon(caretRightIcon);
const StyledExpandButton = styled(Button)(({ theme: { base: { animation } } }) => {
    const { rtl } = useDirection();
    return css `
      ${StyledIcon} {
        transition: transform ${animation.speed} ${animation.timing.ease};
      }
      &[aria-expanded='true'] ${StyledIcon} {
        transform: rotate(90deg);
      }
      &[aria-expanded='false'] ${StyledIcon} {
        transform: rotate(${rtl ? 180 : 0}deg);
      }
    `;
});
StyledExpandButton.defaultProps = defaultThemeProp;
export const StyledFieldGroupName = styled.span ``;
export const StyledFieldGroupLegend = styled.legend.withConfig(omitProps('open'))(({ open, theme: { base: { spacing, animation, 'hit-area': { 'mouse-min': hitAreaMouse, 'finger-min': hitAreaFinger } } } }) => {
    return css `
      width: 100%;
      margin-bottom: 0;
      ${open &&
        css `
        margin-block-end: calc(1.5 * ${spacing});
      `}
      transition: margin-block-end ${animation.speed} ${animation.timing.ease};

      > ${StyledExpandButton} {
        min-height: ${hitAreaMouse};

        @media (pointer: 'coarse') {
          min-height: ${hitAreaFinger};
        }
      }
    `;
});
StyledFieldGroupLegend.defaultProps = defaultThemeProp;
export const StyledFieldGroup = styled.fieldset(({ theme: { base: { 'font-size': fontSize, 'font-scale': fontScale }, components: { text } } }) => {
    const fontSizes = calculateFontSize(fontSize, fontScale);
    return css `
      border: none;

      & ${StyledFieldGroupName} {
        font-size: ${fontSizes[text.h3['font-size']]};
        font-weight: ${text.h3['font-weight']};
      }

      & & ${StyledFieldGroupName} {
        font-size: ${fontSizes[text.h4['font-size']]};
        font-weight: ${text.h4['font-weight']};
      }

      & & & ${StyledFieldGroupName} {
        font-size: ${fontSizes[text.h5['font-size']]};
        font-weight: ${text.h5['font-weight']};
      }

      & & & & ${StyledFieldGroupName} {
        font-size: ${fontSizes[text.h6['font-size']]};
        font-weight: ${text.h6['font-weight']};
      }
    `;
});
StyledFieldGroup.defaultProps = defaultThemeProp;
const FieldGroupLegend = ({ children, open, actions, additionalInfo, ...restProps }) => {
    return (_jsx(StyledFieldGroupLegend, { open: open, ...restProps, children: _jsxs(Flex, { container: { alignItems: 'center', justify: 'between', gap: 0.5 }, children: [_jsxs(Flex, { container: { alignItems: 'center', gap: 0.5 }, children: [children, additionalInfo && (_jsx(AdditionalInfo, { heading: additionalInfo.heading, children: additionalInfo.content }))] }), actions && _jsx(Actions, { items: actions })] }) }));
};
const FieldGroup = forwardRef(({ children, description, name, additionalInfo, actions, collapsible = false, defaultCollapsed = false, ...restProps }, ref) => {
    const [open, setOpen] = useState(!defaultCollapsed);
    const t = useI18n();
    const uid = useUID();
    const descAndChildren = (_jsxs(Grid, { container: { gap: 3 }, children: [description && _jsx(HTML, { id: `${uid}-description`, as: 'p', content: description }), _jsx("div", { children: children })] }));
    return (_jsxs(StyledFieldGroup, { "aria-label": name, "aria-describedby": description ? `${uid}-description` : undefined, ...restProps, ref: ref, children: [name && (_jsx(FieldGroupLegend, { open: open, actions: actions, additionalInfo: additionalInfo, children: collapsible ? (_jsx(StyledExpandButton, { type: 'button', variant: 'text', onClick: () => {
                        setOpen(cur => !cur);
                    }, "aria-expanded": open ? 'true' : 'false', "aria-label": t(open ? 'collapse_noun' : 'expand_noun', [name]), children: _jsxs(Flex, { container: { direction: 'row', alignItems: 'center', gap: 0.5 }, forwardedAs: 'span', children: [_jsx(Icon, { name: 'caret-right' }), _jsx(StyledFieldGroupName, { children: name })] }) })) : (_jsx(StyledFieldGroupName, { children: name })) })), collapsible ? (_jsx(ExpandCollapse, { collapsed: !open, children: descAndChildren })) : (descAndChildren)] }));
});
export default FieldGroup;
//# sourceMappingURL=FieldGroup.js.map