import { detectOverflow } from '@popperjs/core';
// taken from https://codesandbox.io/s/bitter-sky-pe3z9?file=/src/index.js
export const sameWidth = Object.freeze({
    name: 'sameWidth',
    enabled: true,
    phase: 'beforeWrite',
    fn({ state }) {
        state.styles.popper.width = `${state.rects.reference.width}px`;
    },
    requires: ['computeStyles']
});
// taken from https://github.com/atomiks/popper.js/blob/master/src/modifiers/maxSize.js
export const maxSize = Object.freeze({
    name: 'maxSize',
    enabled: true,
    phase: 'main',
    requiresIfExists: ['offset', 'preventOverflow', 'flip'],
    fn({ state, name, options }) {
        const overflow = detectOverflow(state, options);
        const { x, y } = state.modifiersData.preventOverflow || { x: 0, y: 0 };
        const { width, height } = state.rects.popper;
        const [basePlacement] = state.placement.split('-');
        const widthProp = basePlacement === 'left' ? 'left' : 'right';
        const heightProp = basePlacement === 'top' ? 'top' : 'bottom';
        state.modifiersData[name] = {
            width: width - overflow[widthProp] - x,
            height: height - overflow[heightProp] - y
        };
    }
});
// taken from https://codesandbox.io/s/great-tesla-3roz7?file=/src/index.js
export const applyMaxSize = Object.freeze({
    name: 'applyMaxSize',
    enabled: true,
    phase: 'beforeWrite',
    requires: ['maxSize'],
    fn({ state }) {
        const { height } = state.modifiersData.maxSize;
        state.styles.popper.maxHeight = `${height}px`;
    }
});
//# sourceMappingURL=modifiers.js.map