import { jsx as _jsx } from "react/jsx-runtime";
import { memo, useCallback } from 'react';
import styled, { css } from 'styled-components';
import { hideVisually } from 'polished';
import { defaultThemeProp } from '../../theme';
import Button, { StyledButton } from '../Button';
import Popover from '../Popover';
import Flex from '../Flex';
export const StyledSkipLinks = styled(Popover)(props => {
    const { theme: { base: { 'z-index': zIndices, spacing } } } = props;
    const z = Math.max(...Object.values(zIndices)) + 1;
    return css `
    position: fixed;
    z-index: ${z};
    padding: ${spacing};

    & > ${StyledButton} {
      margin: 0;
      display: block;
    }

    &:not(:focus-within) {
      ${hideVisually}
    }
  `;
});
StyledSkipLinks.defaultProps = defaultThemeProp;
const SkipLinks = memo(({ items }) => {
    const onClick = useCallback((item) => {
        const selectedEl = document.querySelector(item.target.selector);
        const container = selectedEl ?? document;
        const heading = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'].reduce((el, tag) => el ?? container.querySelector(tag), null);
        const target = heading ?? selectedEl;
        if (!target)
            return;
        if (target === selectedEl && !selectedEl.hasAttribute('aria-label')) {
            selectedEl.setAttribute('aria-label', item.target.ariaLabel);
            selectedEl.addEventListener('focusout', () => {
                selectedEl.removeAttribute('aria-label');
            }, { once: true });
        }
        if (target.hasAttribute('tabindex')) {
            target.focus();
        }
        else {
            target.setAttribute('tabindex', '-1');
            target.focus();
            target.addEventListener('focusout', () => {
                target.removeAttribute('tabindex');
            }, { once: true });
        }
    }, []);
    return (_jsx(Flex, { as: StyledSkipLinks, portal: false, container: { gap: 0.5, direction: 'column' }, show: true, placement: 'bottom-end', target: {
            getBoundingClientRect: () => ({
                height: 0,
                width: 0,
                x: 24,
                y: 24,
                top: 24,
                bottom: 24,
                left: 24,
                right: 24
            })
        }, children: items.map(item => (_jsx(Button, { variant: 'link', onClick: () => onClick(item), children: item.label }, item.label))) }));
});
export default SkipLinks;
//# sourceMappingURL=SkipLinks.js.map