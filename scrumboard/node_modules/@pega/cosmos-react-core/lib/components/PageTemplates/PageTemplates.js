import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { forwardRef, useState, useRef, useContext, useEffect } from 'react';
import styled, { css } from 'styled-components';
import { readableColor } from 'polished';
import { defaultThemeProp } from '../../theme';
import Grid from '../Grid';
import Text from '../Text';
import SummaryItem from '../SummaryItem';
import Icon from '../Icon';
import { tryCatch } from '../../utils';
import Tabs, { TabPanel } from '../Tabs';
import Flex from '../Flex';
import { useBreakpoint, useElement, useScrollStick, useConsolidatedRef } from '../../hooks';
import Breadcrumbs, { StyledBreadcrumbs } from '../Breadcrumbs';
import AppShellContext from '../AppShell/AppShellContext';
import { StyledBanner } from '../Banner/Banner';
import { StyledTabs } from '../Tabs/Tabs';
export const StyledPageIcon = styled(Flex)(({ theme }) => {
    const bgColor = theme.base.palette['brand-primary'];
    const color = tryCatch(() => readableColor(bgColor));
    return css `
    height: calc(4 * ${theme.base.spacing});
    width: calc(4 * ${theme.base.spacing});
    background: ${bgColor};
    color: ${color};
    border-radius: calc(0.5 * ${theme.base['border-radius']});
  `;
});
StyledPageIcon.defaultProps = defaultThemeProp;
export const StyledPageHeader = styled.header(({ theme }) => {
    return css `
    ${StyledBreadcrumbs} {
      margin-block-end: ${theme.base.spacing};
    }

    ${StyledBanner},
    ${StyledTabs} {
      margin-block-start: calc(2 * ${theme.base.spacing});
    }
  `;
});
StyledPageHeader.defaultProps = defaultThemeProp;
export const StyledRegion = styled.div ``;
StyledRegion.defaultProps = defaultThemeProp;
export const StyledRegions = styled.div(({ pad, theme }) => {
    const spacing = theme.base.spacing;
    return css `
    flex-grow: 1;
    max-width: 100%;

    ${pad &&
        css `
      padding: 0 calc(2 * ${spacing}) calc(2 * ${spacing});
    `}
  `;
});
StyledRegions.defaultProps = defaultThemeProp;
export const StyledContent = styled.div ``;
StyledContent.defaultProps = defaultThemeProp;
export const StyledScrollableTabPanel = styled(TabPanel)(() => {
    return css `
    height: 100%;
    overflow: auto;
  `;
});
StyledScrollableTabPanel.defaultProps = defaultThemeProp;
export const StyledPageLayout = styled.div(({ theme, scrollContent, minContentHeight }) => {
    const emptyContentHeight = minContentHeight ? `${minContentHeight}px` : undefined;
    return css `
    --content-height-in-view: ${emptyContentHeight};
    position: relative;
    min-height: inherit;
    background-color: ${theme.base.palette['app-background']};

    ${scrollContent &&
        css `
      ${StyledContent} {
        position: relative;
      }

      ${StyledRegions} {
        position: absolute;
        height: 100%;
        width: 100%;
        overflow: auto;
      }
    `}
  `;
});
StyledPageLayout.defaultProps = defaultThemeProp;
const PageLayout = forwardRef(({ regions, cols = `repeat(${regions.length}, minmax(0, 1fr))`, title, icon, path, actions, banners, tabs, as, header, regionsRef, scrollContent = false, ...restProps }, ref) => {
    const [contentEl, setContentEl] = useElement();
    const isMediumOrAbove = useBreakpoint('md');
    const hasSideBySideColumns = regions.length > 1 && isMediumOrAbove;
    const { headerEl } = useContext(AppShellContext);
    const consolidatedRegionRef = useConsolidatedRef(regionsRef);
    const scrollStickOptions = useRef({
        elements: []
    });
    scrollStickOptions.current.scrollContainer = scrollContent && contentEl ? contentEl : undefined;
    scrollStickOptions.current.offset = (headerEl?.offsetHeight ?? 0) + 16;
    useScrollStick(hasSideBySideColumns ? scrollStickOptions.current : undefined);
    const renderSingleRegion = regions?.length === 1;
    const [minContentHeight, setMinContentHeight] = useState();
    useEffect(() => {
        if (consolidatedRegionRef && consolidatedRegionRef.current) {
            const refElement = consolidatedRegionRef.current;
            const regionsPaddingBottomPixels = Number.parseInt(window.getComputedStyle(refElement).getPropertyValue('padding-bottom'), 10);
            const resizeObserver = new ResizeObserver(() => {
                const headerOffset = headerEl?.offsetHeight ?? 0;
                const emptyHeight = document.documentElement.offsetHeight -
                    (headerOffset + refElement?.offsetTop) -
                    regionsPaddingBottomPixels;
                setMinContentHeight(emptyHeight);
            });
            resizeObserver.observe(refElement);
            return () => {
                resizeObserver.disconnect();
            };
        }
    }, [consolidatedRegionRef, headerEl]);
    return (_jsxs(Flex, { ...restProps, container: {
            direction: 'column',
            alignItems: 'stretch',
            gap: 2
        }, scrollContent: scrollContent, as: StyledPageLayout, forwardedAs: as, ref: ref, minContentHeight: minContentHeight, children: [_jsxs(Flex, { container: { direction: 'column', pad: [2, 2, 0] }, item: { grow: 0, shrink: 0 }, as: StyledPageHeader, children: [path && path.length > 0 && _jsx(Breadcrumbs, { path: path }), header || (_jsx(SummaryItem, { visual: icon && (_jsx(StyledPageIcon, { container: { alignItems: 'center', justify: 'center' }, children: _jsx(Icon, { name: icon }) })), primary: _jsx(Text, { variant: 'h1', children: title }), actions: actions })), banners, tabs] }), _jsxs(Flex, { container: true, item: { grow: 1 }, as: StyledContent, ref: scrollContent ? setContentEl : undefined, children: [renderSingleRegion && (_jsx(StyledRegions, { ref: consolidatedRegionRef, pad: true, children: _jsx(Flex, { container: {
                                direction: 'column',
                                gap: 2
                            }, as: StyledRegion, ref: (el) => {
                                if (el) {
                                    scrollStickOptions.current.elements[0] = el;
                                }
                            }, children: regions[0] }) })), !renderSingleRegion && (_jsx(Grid, { container: {
                            cols: 'minmax(0, 1fr)',
                            alignItems: 'start',
                            gap: 2,
                            pad: [0, 2, 2]
                        }, md: { container: { cols } }, as: StyledRegions, ref: consolidatedRegionRef, children: regions.map((colItems, i) => {
                            return (_jsx(Flex, { container: {
                                    direction: 'column',
                                    gap: 2
                                }, as: StyledRegion, ref: (el) => {
                                    if (el) {
                                        scrollStickOptions.current.elements[i] = el;
                                    }
                                }, children: colItems }, i));
                        }) }))] })] }));
});
export const TabbedPage = forwardRef(({ tabs, ...restProps }, ref) => {
    const [tabId, setTabId] = useState(tabs.defaultTabId || tabs.tabs[0]?.id);
    const tabPanels = tabs.tabs.map(tab => {
        return (_jsx(Flex, { container: { direction: 'column', gap: 2 }, as: TabPanel, tabId: tab.id, currentTabId: tabId, children: tab.content }, tab.id));
    });
    return (_jsx(PageLayout, { ...restProps, tabs: _jsx(Tabs, { ...tabs, onTabClick: (id, e) => {
                setTabId(id);
                tabs.onTabClick?.(id, e);
            }, currentTabId: tabId }), regions: [_jsx(_Fragment, { children: tabPanels })], ref: ref }));
});
export const OneColumnPage = forwardRef(({ a, ...restProps }, ref) => {
    return _jsx(PageLayout, { regions: [a], ref: ref, ...restProps, cols: 'minmax(0, 1fr)' });
});
export const TwoColumnPage = forwardRef(({ a, b, ...restProps }, ref) => {
    return (_jsx(PageLayout, { regions: [a, b], ref: ref, ...restProps, cols: 'repeat(2, minmax(0, 1fr))' }));
});
export const ThreeColumnPage = forwardRef(({ a, b, c, ...restProps }, ref) => {
    return (_jsx(PageLayout, { regions: [a, b, c], ref: ref, ...restProps, cols: 'repeat(3, minmax(0, 1fr))' }));
});
export const FourColumnPage = forwardRef(({ a, b, c, d, ...restProps }, ref) => {
    return (_jsx(PageLayout, { regions: [a, b, c, d], ref: ref, ...restProps, cols: 'repeat(4, minmax(0, 1fr))' }));
});
export const WideNarrowPage = forwardRef(({ a, b, ...restProps }, ref) => {
    return (_jsx(PageLayout, { regions: [a, b], ref: ref, ...restProps, cols: 'minmax(0, 2fr) minmax(0, 1fr)' }));
});
export const NarrowWidePage = forwardRef(({ a, b, ...restProps }, ref) => {
    return (_jsx(PageLayout, { regions: [a, b], ref: ref, ...restProps, cols: 'minmax(0, 1fr) minmax(0, 2fr)' }));
});
export const WideWideNarrowPage = forwardRef(({ a, b, c, ...restProps }, ref) => {
    return (_jsx(PageLayout, { regions: [a, b, c], ref: ref, ...restProps, cols: 'repeat(2, minmax(0, 2fr)) minmax(0, 1fr)' }));
});
export const NarrowWideWidePage = forwardRef(({ a, b, c, ...restProps }, ref) => {
    return (_jsx(PageLayout, { regions: [a, b, c], ref: ref, ...restProps, cols: 'minmax(0, 1fr) repeat(2, minmax(0, 2fr))' }));
});
export const NarrowWideNarrowPage = forwardRef(({ a, b, c, ...restProps }, ref) => {
    return (_jsx(PageLayout, { regions: [a, b, c], ref: ref, ...restProps, cols: 'minmax(0, 1fr) minmax(0, 3fr) minmax(0, 1fr)' }));
});
//# sourceMappingURL=PageTemplates.js.map