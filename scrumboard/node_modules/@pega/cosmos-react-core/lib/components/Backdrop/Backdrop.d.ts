import { FunctionComponent, ReactNode, Ref, MouseEvent } from 'react';
import { BaseProps, ForwardProps } from '../../types';
import { FlexProps } from '../Flex';
interface BackdropContextValue {
    el: HTMLDivElement | null;
}
export declare const BackdropContext: import("react").Context<BackdropContextValue>;
export interface BackdropProps extends BaseProps {
    /**
     * Opacity of the Backdrop.
     * @default 0.4
     */
    alpha?: number;
    /**
     * Any React Node to be rendered on top of the Backdrop component.
     */
    children?: ReactNode;
    /** Props passed to Flex container. */
    container?: Exclude<FlexProps['container'], boolean>;
    /**
     * Toggles visibility of Backdrop.
     * @default false
     */
    open?: boolean;
    /**
     * Determines the color of the Backdrop.
     * @default "dark"
     */
    variant?: 'dark' | 'light';
    /**
     * Transition speed of Backdrop animation.
     * @default "medium"
     */
    transitionSpeed?: 'slow' | 'medium' | 'fast' | 'none';
    /**
     * The position of the Backdrop.
     * @default "fixed"
     */
    position?: 'absolute' | 'fixed';
    /**
     * Accepts a callback function for click event on Backdrop.
     */
    onClick?: (e: MouseEvent<HTMLDivElement>) => void;
    /**
     * Accepts a callback that gets invoked before opening Backdrop.
     */
    onBeforeTransitionIn?: () => void;
    /**
     * Accepts a callback that gets invoked after opening Backdrop.
     */
    onAfterTransitionIn?: () => void;
    /**
     * Accepts a callback that gets invoked before closing Backdrop.
     */
    onBeforeTransitionOut?: () => void;
    /**
     * Accepts a callback that gets invoked after closing Backdrop
     */
    onAfterTransitionOut?: () => void;
    /** Ref for a Backdrop's root div element. */
    ref?: Ref<HTMLDivElement>;
}
export declare const StyledBackdrop: import("styled-components").StyledComponent<"div", import("styled-components").DefaultTheme, import("../../types").OmitStrict<BackdropProps, "alpha" | "open" | "position" | "transitionSpeed"> & Required<Pick<BackdropProps, "alpha" | "open" | "position" | "transitionSpeed">> & {
    opacity: 0 | 1;
}, never>;
declare const Backdrop: FunctionComponent<BackdropProps & ForwardProps>;
export default Backdrop;
//# sourceMappingURL=Backdrop.d.ts.map