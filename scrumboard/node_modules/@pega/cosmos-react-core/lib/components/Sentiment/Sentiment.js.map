{"version":3,"file":"Sentiment.js","sourceRoot":"","sources":["../../../src/components/Sentiment/Sentiment.tsx"],"names":[],"mappings":";AAAA,OAAO,EAAE,UAAU,EAA2C,MAAM,OAAO,CAAC;AAC5E,OAAO,MAAM,EAAE,EAAE,GAAG,EAAE,MAAM,mBAAmB,CAAC;AAEhD,OAAO,IAAI,MAAM,SAAS,CAAC;AAC3B,OAAO,EAAE,OAAO,EAAE,MAAM,aAAa,CAAC;AACtC,OAAO,EAAE,gBAAgB,EAAE,MAAM,aAAa,CAAC;AAE/C,OAAO,IAAI,EAAE,EAAE,UAAU,EAAE,MAAM,SAAS,CAAC;AAuB3C,MAAM,YAAY,GAA4B;IAC5C,QAAQ,EAAE,UAAU;IACpB,QAAQ,EAAE,YAAY;IACtB,OAAO,EAAE,YAAY;CACtB,CAAC;AAEF,MAAM,CAAC,MAAM,eAAe,GAAG,MAAM,CAAC,GAAG,CAAiB,KAAK,CAAC,EAAE;IAChE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,KAAK,CAAC;IACjC,OAAO,GAAG,CAAA;QACJ,UAAU;eACH,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,KAAK;;GAErD,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,eAAe,CAAC,YAAY,GAAG,gBAAgB,CAAC;AAEhD,MAAM,SAAS,GAAqD,UAAU,CAC5E,CAAC,KAAsC,EAAE,GAA0B,EAAE,EAAE;IACrE,MAAM,CAAC,GAAG,OAAO,EAAE,CAAC;IAEpB,MAAM,aAAa,GAA6B;QAC9C,QAAQ,EAAE,CAAC,CAAC,oBAAoB,CAAC;QACjC,QAAQ,EAAE,CAAC,CAAC,oBAAoB,CAAC;QACjC,OAAO,EAAE,CAAC,CAAC,mBAAmB,CAAC;KAChC,CAAC;IAEF,MAAM,EACJ,YAAY,EAAE,SAAS,EACvB,OAAO,EACP,WAAW,GAAG,KAAK,EACnB,MAAM,GAAG,EAAE,EACX,KAAK,GAAG,EAAE,EACV,GAAG,SAAS,EACb,GAAG,KAAK,CAAC;IAEV,OAAO,CACL,MAAC,IAAI,kBACS,SAAS,EACrB,GAAG,EAAE,GAAG,EACR,OAAO,EAAE,OAAO,EAChB,IAAI,EAAC,KAAK,KACN,SAAS,EACb,EAAE,EAAE,eAAe,EACnB,SAAS,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,aAErB,KAAC,IAAI,mBAAa,MAAM,EAAC,IAAI,EAAE,KAAK,CAAC,OAAO,CAAC,IAAI,YAAY,CAAC,OAAO,CAAE,GAAI,EAC1E,CAAC,WAAW,IAAI,yBAAO,MAAM,CAAC,OAAO,CAAC,IAAI,aAAa,CAAC,OAAO,CAAC,GAAQ,IACpE,CACR,CAAC;AACJ,CAAC,CACF,CAAC;AAEF,eAAe,SAAS,CAAC","sourcesContent":["import { forwardRef, FunctionComponent, PropsWithoutRef, Ref } from 'react';\nimport styled, { css } from 'styled-components';\n\nimport Flex from '../Flex';\nimport { useI18n } from '../../hooks';\nimport { defaultThemeProp } from '../../theme';\nimport { BaseProps, ForwardProps, NoChildrenProp } from '../../types';\nimport Icon, { StyledIcon } from '../Icon';\n\nexport interface SentimentProps extends BaseProps, NoChildrenProp {\n  /** Ref to the element */\n  ref?: Ref<HTMLDivElement>;\n  /** Variant of the sentiment */\n  variant: 'positive' | 'neutral' | 'negative';\n  /** Flag that indicates if label needs to be hidden\n   * @default false\n   */\n  labelHidden?: boolean;\n  /** Labels for different sentiment variants. If not supplied default labels will be shown */\n  labels?: {\n    [variant in SentimentProps['variant']]?: string;\n  };\n  /** Icons for different sentiment variants. If not supplied default icons will be shown */\n  icons?: {\n    [variant in SentimentProps['variant']]?: string;\n  };\n  /** Aria label for screen readers. */\n  'aria-label'?: string;\n}\n\nconst defaultIcons: SentimentProps['icons'] = {\n  negative: 'face-sad',\n  positive: 'face-happy',\n  neutral: 'face-blank'\n};\n\nexport const StyledSentiment = styled.div<SentimentProps>(props => {\n  const { theme, variant } = props;\n  return css`\n    > ${StyledIcon} {\n      color: ${theme.components.sentiment[variant].color};\n    }\n  `;\n});\n\nStyledSentiment.defaultProps = defaultThemeProp;\n\nconst Sentiment: FunctionComponent<SentimentProps & ForwardProps> = forwardRef(\n  (props: PropsWithoutRef<SentimentProps>, ref: SentimentProps['ref']) => {\n    const t = useI18n();\n\n    const defaultLabels: SentimentProps['labels'] = {\n      negative: t('sentiment_negative'),\n      positive: t('sentiment_positive'),\n      neutral: t('sentiment_neutral')\n    };\n\n    const {\n      'aria-label': ariaLabel,\n      variant,\n      labelHidden = false,\n      labels = {},\n      icons = {},\n      ...restProps\n    } = props;\n\n    return (\n      <Flex\n        aria-label={ariaLabel}\n        ref={ref}\n        variant={variant}\n        role='img'\n        {...restProps}\n        as={StyledSentiment}\n        container={{ gap: 1 }}\n      >\n        <Icon aria-hidden='true' name={icons[variant] || defaultIcons[variant]!} />\n        {!labelHidden && <span>{labels[variant] || defaultLabels[variant]}</span>}\n      </Flex>\n    );\n  }\n);\n\nexport default Sentiment;\n"]}