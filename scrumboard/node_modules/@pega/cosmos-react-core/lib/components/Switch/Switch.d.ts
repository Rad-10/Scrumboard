import { ChangeEvent, FunctionComponent, Ref } from 'react';
import type { BaseProps, ForwardProps, NoChildrenProp } from '../../types';
import { FormControlProps } from '../FormControl';
export interface SwitchProps extends BaseProps, NoChildrenProp {
    /**
     * Sets DOM id for the control and associates label element via 'for' attribute.
     * If an id is not pass, a random id will be generated for any render.
     */
    id?: FormControlProps['id'];
    /** Pass a string or a fragment with an Icon and string. */
    label?: FormControlProps['label'];
    /**
     * Disables the control.
     * @default false
     */
    disabled?: FormControlProps['disabled'];
    /**
     * Sets checked prop via onChange.
     * @default false
     */
    on?: boolean;
    /** Callback that is triggered when the Switch is toggled. */
    onChange?: (e: ChangeEvent<HTMLInputElement>) => void;
    /** Ref for the input element. */
    ref?: Ref<HTMLInputElement>;
}
export declare const SwitchLabel: import("styled-components").StyledComponent<"label", import("styled-components").DefaultTheme, {}, never>;
export declare const SwitchInput: import("styled-components").StyledComponent<"input", import("styled-components").DefaultTheme, {}, never>;
export declare const StyledSwitch: import("styled-components").StyledComponent<"div", import("styled-components").DefaultTheme, {}, never>;
declare const Switch: FunctionComponent<SwitchProps & ForwardProps>;
export default Switch;
//# sourceMappingURL=Switch.d.ts.map