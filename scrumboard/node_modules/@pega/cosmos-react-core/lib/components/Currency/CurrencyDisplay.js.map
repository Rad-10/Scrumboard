{"version":3,"file":"CurrencyDisplay.js","sourceRoot":"","sources":["../../../src/components/Currency/CurrencyDisplay.tsx"],"names":[],"mappings":";AAAA,OAAO,EAAE,UAAU,EAA2C,MAAM,OAAO,CAAC;AAG5E,OAAO,EAAE,gBAAgB,EAAE,MAAM,aAAa,CAAC;AAC/C,OAAO,kBAAkB,MAAM,uBAAuB,CAAC;AAEvD,OAAO,EAAE,cAAc,EAAE,eAAe,EAAE,MAAM,SAAS,CAAC;AAkC1D,MAAM,eAAe,GAA2D,UAAU,CACxF,CACE,EACE,KAAK,EACL,eAAe,EACf,iBAAiB,EAAE,EACjB,QAAQ,GAAG,QAAQ,EACnB,QAAQ,GAAG,YAAY,EACvB,QAAQ,GAAG,UAAU,EACrB,eAAe,GAAG,IAAI,EACtB,cAAc,EACf,GAAG,EAAE,EACN,GAAG,SAAS,EAC0B,EACxC,GAAgC,EAChC,EAAE;IACF,MAAM,EAAE,MAAM,EAAE,GAAG,gBAAgB,EAAE,CAAC;IAEtC,MAAM,OAAO,GACX,eAAe,IAAI,eAAe,CAAC,eAAe,CAAC;QACjD,CAAC,CAAE;YACC,KAAK,EAAE,UAAU;YACjB,QAAQ,EAAE,eAAe;YACzB,eAAe,EAAE,QAAQ;YACzB,WAAW,EAAE,eAAe;YAC5B,QAAQ;YACR,YAAY,EAAE,QAAQ,KAAK,aAAa,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,UAAU;YACpE,qBAAqB,EAAE,cAAc;YACrC,qBAAqB,EAAE,cAAc;SACT;QAChC,CAAC,CAAC,SAAS,CAAC;IAEhB,MAAM,SAAS,GAAG;QAChB,GAAG,OAAO;QACV,WAAW,EAAE,KAAK;QAClB,YAAY,EAAE,UAAU;QACxB,eAAe,EAAE,MAAM;KACxB,CAAC;IAEF,OAAO,CACL,eAAM,GAAG,EAAE,GAAG,KAAM,SAAS,YAC1B,KAAK,IAAI,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,CACtB,8BACE,8BAAkB,MAAM,YAAE,cAAc,CAAC,KAAK,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC,GAAQ,EAC5E,KAAC,kBAAkB,cAChB,cAAc,CAAC,KAAK,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC,GACnC,IACpB,CACJ,CAAC,CAAC,CAAC,CACF,8BAAkB,MAAM,6BAAsB,CAC/C,GACI,CACR,CAAC;AACJ,CAAC,CACF,CAAC;AAEF,eAAe,eAAe,CAAC","sourcesContent":["import { forwardRef, FunctionComponent, PropsWithoutRef, Ref } from 'react';\n\nimport { BaseProps, ForwardProps, NoChildrenProp } from '../../types';\nimport { useConfiguration } from '../../hooks';\nimport VisuallyHiddenText from '../VisuallyHiddenText';\n\nimport { formatCurrency, isValidCurrency } from './utils';\n\nexport interface CurrencyDisplayProps extends BaseProps, NoChildrenProp {\n  /** Number value. */\n  value?: number | bigint;\n  /** Three letter currency shorthand ISO code. If not provided or invalid, component renders only the number. */\n  currencyISOCode?: string;\n  /** Options to define formatting. */\n  formattingOptions?: {\n    currency?: 'symbol' | 'code' | 'name';\n    /**\n     * Determines negative value notation: using minus sign or parentheses.\n     * @default 'minus-sign'\n     */\n    negative?: 'minus-sign' | 'parentheses';\n    /**\n     * Value display notation.\n     * @default 'standard'\n     */\n    notation?: 'standard' | 'compact';\n    /**\n     * Fixed number of fraction digits. Maximum is 20, default is currency dependant.\n     * @default variable\n     */\n    fractionDigits?: number;\n    /** Determines whether group separators should be shown.\n     * @default true\n     */\n    groupSeparators?: boolean;\n  };\n  /** Ref for the wrapping element. */\n  ref?: Ref<HTMLAnchorElement>;\n}\n\nconst CurrencyDisplay: FunctionComponent<CurrencyDisplayProps & ForwardProps> = forwardRef(\n  (\n    {\n      value,\n      currencyISOCode,\n      formattingOptions: {\n        currency = 'symbol',\n        negative = 'minus-sign',\n        notation = 'standard',\n        groupSeparators = true,\n        fractionDigits\n      } = {},\n      ...restProps\n    }: PropsWithoutRef<CurrencyDisplayProps>,\n    ref: CurrencyDisplayProps['ref']\n  ) => {\n    const { locale } = useConfiguration();\n\n    const options =\n      currencyISOCode && isValidCurrency(currencyISOCode)\n        ? ({\n            style: 'currency',\n            currency: currencyISOCode,\n            currencyDisplay: currency,\n            useGrouping: groupSeparators,\n            notation,\n            currencySign: negative === 'parentheses' ? 'accounting' : 'standard',\n            minimumFractionDigits: fractionDigits,\n            maximumFractionDigits: fractionDigits\n          } as Intl.NumberFormatOptions)\n        : undefined;\n\n    const srOptions = {\n      ...options,\n      useGrouping: false,\n      currencySign: 'standard',\n      currencyDisplay: 'name'\n    };\n\n    return (\n      <span ref={ref} {...restProps}>\n        {value || value === 0 ? (\n          <>\n            <span aria-hidden='true'>{formatCurrency(value, { locale, options })}</span>\n            <VisuallyHiddenText>\n              {formatCurrency(value, { locale, options: srOptions })}\n            </VisuallyHiddenText>\n          </>\n        ) : (\n          <span aria-hidden='true'>&ndash;&ndash;</span>\n        )}\n      </span>\n    );\n  }\n);\n\nexport default CurrencyDisplay;\n"]}