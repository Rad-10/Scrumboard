import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef, useCallback, useState } from 'react';
import styled, { css } from 'styled-components';
import { hideVisually } from 'polished';
import { useOverride, useConsolidatedRef, useI18n, useUID, useDirection } from '../../hooks';
import FormControl from '../FormControl';
import { defaultThemeProp } from '../../theme';
import Flex from '../Flex';
import Text from '../Text';
import Icon, { registerIcon } from '../Icon';
import * as paperClipIcon from '../Icon/icons/paper-clip.icon';
import FormField from '../FormField';
import Grid from '../Grid';
import FileUploadItem from './FileUploadItem';
registerIcon(paperClipIcon);
export const StyledDropZone = styled(FormControl)(({ dragOver, theme }) => {
    return css `
    padding: calc(2 * ${theme.base.spacing});
    min-height: 4rem;
    border-style: dashed;
    cursor: pointer;

    ${dragOver &&
        css `
      border-style: solid;
    `}
  `;
});
export const StyledFileInput = styled.div(({ theme }) => {
    return css `
      position: relative;

      input {
        ${hideVisually}
      }

      input:enabled:focus + ${StyledDropZone} {
        box-shadow: ${theme.components['form-control'][':focus']['box-shadow']};
      }

      input[hidden] + ${StyledDropZone} {
        display: none;
      }
    `;
});
StyledFileInput.defaultProps = defaultThemeProp;
const StyledInteractiveText = styled.span(({ theme }) => {
    return css `
    color: ${theme.base.palette.interactive};
  `;
});
StyledInteractiveText.defaultProps = defaultThemeProp;
const BaseFileInput = forwardRef((props, ref) => {
    const uid = useUID();
    const { id = uid, label, labelHidden, info, required = false, disabled = false, files, onFilesAdded, multiple = false, status, ...restProps } = props;
    const icon = _jsx(Icon, { name: 'paper-clip' });
    const inputRef = useConsolidatedRef(ref);
    const onChange = useCallback((e) => {
        if (e.target.files) {
            onFilesAdded?.(Array.from(e.target.files));
        }
        /**
         * WHY are we doing this?
         * We are not working with the "value" prop of the input but rather the File instances that are created.
         * The consumer of this component should manage an array or File(s) and allow for a user to remove a selected file.
         * Since we can not modify the input value of files for browser security reasons,
         * and since setting the files property is less than ideal, we reset/toggle the input to a fresh state after a render.
         * This enables onChange to fire even if the user had just previously selected a file, removed it, and selected it again.
         */
        if (inputRef.current)
            inputRef.current.value = '';
    }, [onFilesAdded]);
    const t = useI18n();
    const [dragOver, setDragOver] = useState(false);
    const { ltr, rtl } = useDirection();
    const fileInput = (_jsxs(StyledFileInput, { children: [_jsx("input", { ...restProps, ref: inputRef, type: 'file', id: id, disabled: disabled, onChange: onChange, multiple: multiple }), _jsxs(Flex, { container: { alignItems: 'center', justify: 'center' }, item: { grow: 1 }, as: StyledDropZone, dragOver: dragOver, onClick: () => {
                    inputRef.current?.focus();
                    inputRef.current?.click();
                }, onDragOver: (e) => {
                    e.preventDefault();
                }, onDragEnter: () => setDragOver(true), onDragLeave: () => setDragOver(false), onDrop: (e) => {
                    e.preventDefault();
                    setDragOver(false);
                    onFilesAdded?.(Array.from(e.dataTransfer.files));
                }, children: [ltr && icon, _jsxs(Text, { variant: 'primary', children: ["\u00A0", t('file_upload_text_main', [
                                _jsx(StyledInteractiveText, { children: t(multiple ? 'file_upload_text_multiple' : 'file_upload_text_one') })
                            ]), "\u00A0"] }), rtl && icon] })] }));
    return (_jsxs(Grid, { container: { rowGap: 1 }, children: [label ? (_jsx(FormField, { ...{ label, labelHidden, id, info, required, disabled, status }, children: fileInput })) : (fileInput), !!files?.length && (_jsx(Grid, { container: {
                    gap: 1,
                    cols: 'repeat(2, minmax(0, 1fr))'
                }, as: 'ul', children: files.map(({ name, ...file }, index) => {
                    // eslint-disable-next-line react/no-array-index-key
                    return _jsx(FileUploadItem, { name: name, ...file }, index);
                }) }))] }));
});
const FileInput = forwardRef((props, ref) => {
    const Override = useOverride('FileInput');
    if (Override)
        return _jsx(Override, { ...props, ref: ref });
    return _jsx(BaseFileInput, { ...props, ref: ref });
});
export default FileInput;
//# sourceMappingURL=FileInput.js.map