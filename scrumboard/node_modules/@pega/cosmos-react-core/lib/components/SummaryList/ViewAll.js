import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef, useState } from 'react';
import styled, { css } from 'styled-components';
import Actions from '../Actions';
import Flex from '../Flex';
import EmptyState from '../EmptyState';
import SearchInput, { StyledSearchInput } from '../SearchInput';
import { defaultThemeProp } from '../../theme';
import Progress from '../Progress';
import { StyledCard } from '../Card';
import { StyledCardContent } from '../Card/CardContent';
import { omitProps } from '../../styles';
import SummaryList from './SummaryList';
const StyledToolbar = styled.div(({ theme: { base } }) => {
    return css `
    position: sticky;
    top: 0;
    z-index: 1;
    background-color: ${base.palette['primary-background']};
    margin-bottom: ${base.spacing};
    transform: translateY(calc(-0.5 * ${base.spacing}));
    padding: ${base.spacing} 0;

    ${StyledSearchInput} {
      flex-grow: 1;
    }
  `;
});
StyledToolbar.defaultProps = defaultThemeProp;
export const StyledViewAll = styled.div.withConfig(omitProps('loading'))(({ loading }) => css `
    ${StyledCardContent}:not(${StyledCard} ${StyledCard} > ${StyledCardContent}) {
      padding: 0;
    }

    ${loading &&
    css `
      min-height: 8rem;
    `}
  `);
const SearchableList = forwardRef(({ loading, actions, items, searchInputProps, ...restProps }, ref) => {
    const [searchValue, setSearchValue] = useState('');
    return (_jsxs(StyledViewAll, { ref: ref, loading: loading, ...restProps, children: [!loading && (searchInputProps || actions) && (_jsxs(Flex, { container: { justify: 'between', alignItems: 'center', gap: 2 }, as: StyledToolbar, children: [searchInputProps && (_jsx(Flex, { container: { alignItems: 'center', gap: 1 }, item: { grow: 1 }, children: _jsx(SearchInput, { onSearchChange: val => {
                                searchInputProps.onSearchChange?.(val);
                                setSearchValue(val);
                            }, value: searchInputProps.value || searchValue }) })), actions && _jsx(Actions, { iconOnly: false, items: actions })] })), loading && _jsx(Progress, { placement: 'local' }), !loading && (items.length ? _jsx(SummaryList, { items: items }) : _jsx(EmptyState, {}))] }));
});
export default SearchableList;
//# sourceMappingURL=ViewAll.js.map