import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef, useState, useEffect, useRef } from 'react';
import { createPortal } from 'react-dom';
import styled, { css } from 'styled-components';
import { readableColor, rgba } from 'polished';
import Backdrop from '../Backdrop';
import Text from '../Text';
import { calculateFontSize } from '../../styles';
import { tryCatch } from '../../utils';
import { useConfiguration } from '../../hooks';
import Bar from './Bar';
import Ellipsis from './Ellipsis';
import Ring from './Ring';
const StyledMessage = styled.span(({ theme }) => {
    const color = tryCatch(() => {
        return rgba(readableColor(theme.base.palette['primary-background']), theme.base.transparency['transparent-3']);
    });
    const fontSize = calculateFontSize(theme.base['font-size'], theme.base['font-scale']);
    return css `
    margin-top: 0.5rem;
    font-size: ${fontSize[theme.components.label['font-size']]};
    font-weight: ${theme.base['font-weight']['semi-bold']};
    color: ${color};
  `;
});
const Progress = forwardRef(({ variant = 'ring', placement = 'global', visible = true, onTransitionEndIn, onTransitionEndOut, value, message, ...restProps }, ref) => {
    const [isVisible, setIsVisible] = useState(visible);
    const [isNull, setIsNull] = useState(!visible);
    const { portalTarget } = useConfiguration();
    const showTime = useRef();
    const showTimeout = useRef();
    const hideTimeout = useRef();
    let Comp = Ring;
    if (variant === 'bar')
        Comp = Bar;
    else if (variant === 'ellipsis')
        Comp = Ellipsis;
    const onBackdropTransitionEnd = () => {
        setIsNull(true);
        onTransitionEndOut?.();
    };
    useEffect(() => {
        if (visible) {
            clearTimeout(hideTimeout.current);
            showTime.current = Date.now();
            showTimeout.current = window.setTimeout(() => {
                setIsVisible(true);
                setIsNull(false);
            }, 100);
        }
        else {
            clearTimeout(showTimeout.current);
            if (typeof showTime.current === 'number') {
                const minimumDuration = 1000;
                const timeElapsed = Date.now() - showTime.current;
                if (timeElapsed > minimumDuration)
                    setIsVisible(false);
                else {
                    hideTimeout.current = window.setTimeout(() => {
                        setIsVisible(false);
                    }, minimumDuration - timeElapsed);
                }
            }
            else
                setIsVisible(false);
        }
    }, [visible]);
    useEffect(() => {
        return () => {
            clearTimeout(showTimeout.current);
            clearTimeout(hideTimeout.current);
        };
    }, []);
    if (isNull)
        return null;
    const comp = (_jsx(Comp, { ...restProps, placement: placement, value: value, "aria-valuetext": message && typeof value === 'number' ? `${message} - ${value}` : message, ref: ref }));
    const content = placement === 'inline' ? (comp) : (_jsxs(Backdrop, { open: isVisible, container: { direction: 'column' }, position: placement === 'global' ? 'fixed' : 'absolute', variant: 'light', alpha: 0.5, onAfterTransitionIn: onTransitionEndIn, onAfterTransitionOut: onBackdropTransitionEnd, children: [comp, !!message && (_jsx(Text, { as: StyledMessage, variant: 'secondary', "aria-hidden": 'true', children: message }))] }));
    return placement === 'global' && portalTarget ? createPortal(content, portalTarget) : content;
});
export default Progress;
//# sourceMappingURL=Progress.js.map