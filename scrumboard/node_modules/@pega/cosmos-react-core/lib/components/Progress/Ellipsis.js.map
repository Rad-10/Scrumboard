{"version":3,"file":"Ellipsis.js","sourceRoot":"","sources":["../../../src/components/Progress/Ellipsis.tsx"],"names":[],"mappings":";AAAA,OAAO,EAAM,UAAU,EAAmB,MAAM,OAAO,CAAC;AACxD,OAAO,MAAM,EAAE,EAAE,GAAG,EAAE,MAAM,mBAAmB,CAAC;AAEhD,OAAO,EAAE,gBAAgB,EAAE,MAAM,aAAa,CAAC;AAK/C,MAAM,CAAC,MAAM,sBAAsB,GAAG,MAAM,CAAC,GAAG,CAC9C,CAAC,EAAE,KAAK,EAAE,SAAS,EAAE,EAAE,EAAE;IACvB,OAAO,GAAG,CAAA;;iBAEG,SAAS,KAAK,QAAQ,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,OAAO;;;;;;;;;;;;;;;;;;;;;;;UAuBvD,SAAS,KAAK,QAAQ;QACxB,GAAG,CAAA;;;SAGF;;;;;sBAKa,KAAK,CAAC,UAAU,CAAC,QAAQ,CAAC,gBAAgB,CAAC;;8CAEnB,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK;;UAE9D,SAAS,KAAK,QAAQ;QACxB,GAAG,CAAA;;;SAGF;;UAEC,SAAS,KAAK,OAAO;QACvB,GAAG,CAAA;;;SAGF;;QAED,SAAS,KAAK,QAAQ;QACtB,GAAG,CAAA;;;;yCAI8B,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK;SAC1D;;;;;;;6BAOoB,MAAM,GAAG,CAAC;;;KAGlC,CAAC;AACJ,CAAC,CACF,CAAC;AAEF,sBAAsB,CAAC,YAAY,GAAG,gBAAgB,CAAC;AAEvD,MAAM,QAAQ,GAAqC,UAAU,CAC3D,CACE,EAAE,OAAO,EAAE,SAAS,EAAE,GAAG,SAAS,EAAkC,EACpE,GAAyB,EACzB,EAAE;IACF,OAAO,CACL,KAAC,sBAAsB,IAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAC,aAAa,EAAC,SAAS,EAAE,SAAS,KAAM,SAAS,YACtF,2BACE,gBAAQ,EACR,gBAAQ,EACR,gBAAQ,IACH,GACgB,CAC1B,CAAC;AACJ,CAAC,CACF,CAAC;AAEF,eAAe,QAAQ,CAAC","sourcesContent":["import { FC, forwardRef, PropsWithoutRef } from 'react';\nimport styled, { css } from 'styled-components';\n\nimport { defaultThemeProp } from '../../theme';\nimport { ForwardProps } from '../../types';\n\nimport { ProgressProps } from './Progress.types';\n\nexport const StyledProgressEllipsis = styled.div<Pick<ProgressProps, 'placement'>>(\n  ({ theme, placement }) => {\n    return css`\n      line-height: 1;\n      display: ${placement === 'inline' ? 'inline-flex' : 'block'};\n\n      @keyframes LoadingEllipsis {\n        0% {\n          transform: scale(0);\n          opacity: 0;\n        }\n\n        50% {\n          transform: scale(1);\n          opacity: 1;\n        }\n\n        100% {\n          transform: scale(0);\n          opacity: 0;\n        }\n      }\n\n      > span {\n        display: flex;\n        mix-blend-mode: multiply;\n\n        ${placement === 'inline' &&\n        css`\n          display: inline-flex;\n          margin-left: 0.1875rem;\n        `}\n      }\n\n      > span span {\n        margin: 0 0.3125rem;\n        background: ${theme.components.progress['progress-color']};\n        border-radius: 50%;\n        animation: LoadingEllipsis calc(4 * ${theme.base.animation.speed}) infinite;\n\n        ${placement === 'global' &&\n        css`\n          width: 1.25rem;\n          height: 1.25rem;\n        `}\n\n        ${placement === 'local' &&\n        css`\n          width: 0.625rem;\n          height: 0.625rem;\n        `}\n\n      ${placement === 'inline' &&\n        css`\n          width: 0.1875rem;\n          height: 0.1875rem;\n          margin: 0 0.1875rem;\n          animation-duration: calc(4 * ${theme.base.animation.speed});\n        `}\n\n      &:nth-child(2) {\n          animation-delay: 0.1667s;\n        }\n\n        &:nth-child(3) {\n          animation-delay: ${0.1667 * 2}s;\n        }\n      }\n    `;\n  }\n);\n\nStyledProgressEllipsis.defaultProps = defaultThemeProp;\n\nconst Ellipsis: FC<ProgressProps & ForwardProps> = forwardRef(\n  (\n    { message, placement, ...restProps }: PropsWithoutRef<ProgressProps>,\n    ref: ProgressProps['ref']\n  ) => {\n    return (\n      <StyledProgressEllipsis ref={ref} role='progressbar' placement={placement} {...restProps}>\n        <span>\n          <span />\n          <span />\n          <span />\n        </span>\n      </StyledProgressEllipsis>\n    );\n  }\n);\n\nexport default Ellipsis;\n"]}