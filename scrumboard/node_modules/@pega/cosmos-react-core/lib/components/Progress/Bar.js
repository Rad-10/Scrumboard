import { jsx as _jsx } from "react/jsx-runtime";
import { forwardRef } from 'react';
import styled, { css } from 'styled-components';
import { defaultThemeProp } from '../../theme';
export const StyledProgressBar = styled.div(({ theme, placement, determinate }) => {
    return css `
      height: 0.375rem;
      background-color: ${theme.base.colors.gray['extra-light']};
      border-radius: ${theme.base['border-radius']};
      min-width: 2rem;
      overflow: hidden;

      @keyframes LoadingBar {
        0% {
          transform: translateX(-100%);
        }

        100% {
          transform: translateX(200%);
        }
      }

      ::before {
        content: '';
        display: block;
        height: 100%;
        width: 100%;
        left: 0;
        border-radius: ${theme.base['border-radius']};
        background-color: ${theme.components.progress['progress-color']};
        ${determinate &&
        css `
          transform: translateX(var(--progress, 0));
          transform-origin: 0 50%;
          transition: transform calc(0.5 * ${theme.base.animation.speed})
            ${theme.base.animation.timing.ease};
        `}

        ${!determinate &&
        css `
          animation: LoadingBar calc(8 * ${theme.base.animation.speed}) linear infinite;
          width: 50%;
        `}
      }

      ${placement === 'inline'
        ? css `
            display: inline-block;
            position: relative;
          `
        : css `
            width: 50%;
          `}
    `;
});
StyledProgressBar.defaultProps = defaultThemeProp;
const Bar = forwardRef(({ value, minValue = 0, maxValue = 100, message, placement, style, ...restProps }, ref) => {
    let percentage = value;
    if (typeof value === 'number') {
        if (value > maxValue || minValue > maxValue)
            percentage = 0;
        else if (value < minValue)
            percentage = 100;
        else
            percentage = (1 - (value - minValue) / (maxValue - minValue)) * -100;
    }
    return (_jsx(StyledProgressBar, { ref: ref, role: 'progressbar', "aria-valuemin": minValue, "aria-valuemax": maxValue, "aria-valuenow": value, placement: placement, determinate: typeof value === 'number', style: { ...style, '--progress': percentage ? `${percentage}%` : '' }, ...restProps }));
});
export default Bar;
//# sourceMappingURL=Bar.js.map