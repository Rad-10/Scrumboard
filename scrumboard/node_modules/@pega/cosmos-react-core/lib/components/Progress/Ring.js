import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef } from 'react';
import styled, { css } from 'styled-components';
import { defaultThemeProp } from '../../theme';
export const StyledProgressRing = styled.div(({ theme, placement, determinate }) => {
    return css `
    position: relative;
    min-width: 1em;
    min-height: 1em;

    @keyframes LoadingRing {
      0% {
        transform: rotate(0deg);
      }

      100% {
        transform: rotate(360deg);
      }
    }

    svg {
      display: block;
      position: absolute;
      height: 100%;

      circle {
        fill: transparent;
        stroke: ${theme.base.colors.gray['extra-light']};
        stroke-width: 2;
        r: 45%;
        cx: 50%;
        cy: 50%;
        transform: rotate(-90deg);
        transform-origin: 50% 50%;

        &:nth-child(2) {
          stroke: ${theme.components.progress['progress-color']};
          transition: stroke-dashoffset calc(0.5 * ${theme.base.animation.speed})
            ${theme.base.animation.timing.ease};

          ${!determinate &&
        css `
            animation: LoadingRing calc(4 * ${theme.base.animation.speed}) linear infinite;
          `}
        }
      }
    }

    ${placement === 'inline'
        ? css `
          display: inline-flex;
          vertical-align: top;
        `
        : css `
          width: 2rem;
          height: 2rem;
        `}
  `;
});
StyledProgressRing.defaultProps = defaultThemeProp;
const Ring = forwardRef(({ value, minValue = 0, maxValue = 100, placement, ...restProps }, ref) => {
    let strokeDashoffset;
    const circumference = 18 * Math.PI;
    if (typeof value !== 'number')
        strokeDashoffset = (1 - 33 / 100) * circumference;
    else if (value > maxValue || minValue > maxValue)
        strokeDashoffset = 0;
    else if (value < minValue)
        strokeDashoffset = circumference;
    else
        strokeDashoffset = (1 - (value - minValue) / (maxValue - minValue)) * circumference;
    return (_jsx(StyledProgressRing, { ref: ref, role: 'progressbar', "aria-valuemin": minValue, "aria-valuemax": maxValue, "aria-valuenow": value, placement: placement, determinate: typeof value === 'number', ...restProps, children: _jsxs("svg", { viewBox: '0 0 20 20', children: [_jsx("circle", {}), _jsx("circle", { strokeDasharray: circumference, style: { strokeDashoffset } })] }) }));
});
export default Ring;
//# sourceMappingURL=Ring.js.map