import { jsx as _jsx } from "react/jsx-runtime";
import { useMemo } from 'react';
import Grid from '../Grid';
import { StyledTickButton, StyledTickItem, StyledTicksContainer } from './Slider.styles';
import { calculateTicksRegions } from './utils';
const SliderTicks = ({ ticks, min, max, step, orientation, onClick }) => {
    const cellsCount = (max - min) / step + 1;
    const ticksDefinitions = useMemo(() => calculateTicksRegions(ticks, min, max, step, orientation === 'horizontal'), [ticks, min, max, orientation]);
    let repeatCells;
    let gridContainerConfig;
    if (orientation === 'horizontal') {
        repeatCells = cellsCount > 2 ? `repeat(${cellsCount - 2}, minmax(0, 1fr))` : '';
        gridContainerConfig = {
            cols: `minmax(0, 0.5fr) ${repeatCells} minmax(0, 0.5fr)`
        };
    }
    else {
        repeatCells = `repeat(${cellsCount}, 1em)`;
        gridContainerConfig = { rows: repeatCells, alignContent: 'between' };
    }
    return (_jsx(Grid, { container: gridContainerConfig, as: StyledTicksContainer, children: ticksDefinitions.map(tick => {
            return (_jsx(StyledTickItem, { item: orientation === 'horizontal'
                    ? {
                        colStartEnd: `${tick.start} / ${tick.end}`
                    }
                    : {
                        rowStartEnd: `${-tick.start} / ${-tick.end}`
                    }, orientation: orientation, lowerBoundaryItem: tick.value === min, upperBoundaryItem: tick.value === max, children: _jsx(StyledTickButton, { tabIndex: -1, role: 'button', "aria-hidden": true, onClick: () => onClick(tick.value), children: tick.label }) }, tick.label ?? tick.value));
        }) }));
};
export default SliderTicks;
//# sourceMappingURL=SliderTicks.js.map