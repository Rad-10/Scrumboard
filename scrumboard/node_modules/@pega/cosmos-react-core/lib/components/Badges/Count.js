import { jsx as _jsx } from "react/jsx-runtime";
import { forwardRef } from 'react';
import styled, { css } from 'styled-components';
import { mix, transparentize } from 'polished';
import { defaultThemeProp } from '../../theme';
import { tryCatch } from '../../utils/utils';
import { calculateFontSize } from '../../styles';
export const StyledCount = styled.span(props => {
    const { foreground, background } = props.variant === 'default'
        ? props.theme.components.badges.count.base
        : props.theme.components.badges.count[props.variant];
    const invertedBackground = tryCatch(() => transparentize(0.5, mix(0.2, background, '#ffffff')));
    const displayBackground = props.variant === 'inverted' ? invertedBackground : background;
    const borderRadius = props.theme.base['border-radius'];
    const { spacing } = props.theme.base;
    const fontSize = calculateFontSize(props.theme.base['font-size'], props.theme.base['font-scale']);
    return css `
    background: ${displayBackground};
    border-radius: calc(1.125 * ${borderRadius});
    color: ${foreground};
    display: inline-block;
    font-size: ${fontSize.xxs};
    font-weight: bold;
    line-height: normal;
    text-align: center;
    ${props.children.length > 1 &&
        css `
      padding: 0 ${spacing};
    `}
    ${props.children.length === 1 &&
        css `
      width: 1.125rem;
    `}
  `;
});
StyledCount.defaultProps = defaultThemeProp;
// Replace this with Intl.NumberDisplay when roundingMode is supported.
/* eslint-disable yoda */
const getLabel = (val) => {
    if (val < 1000)
        return '';
    if (1000 <= val && val < 1000000)
        return 'K';
    if (1000000 <= val && val < 1000000000)
        return 'M';
    if (1000000000 <= val && val < 1000000000000)
        return 'B';
    if (1000000000000 <= val && val < 1000000000000000)
        return 'T';
    return '';
};
/* eslint-enable yoda */
const truncateValue = (val) => {
    for (let magnitude = 3; magnitude < 15; magnitude += 3) {
        if (val < 10 ** (magnitude + 1)) {
            return `${`${val}`.slice(0, 1)}.${`${val}`.slice(1, 2)}${getLabel(val)}`;
        }
        if (val < 10 ** (magnitude + 2)) {
            return `${`${val}`.slice(0, 2)}${getLabel(val)}`;
        }
        if (val < 10 ** (magnitude + 3)) {
            return `${`${val}`.slice(0, 3)}${getLabel(val)}`;
        }
    }
    return '999T+';
};
const formatValue = (val) => {
    const absVal = Math.abs(val);
    if (absVal < 1000)
        return `${val}`;
    return `${val < 0 ? '-' : ''}${truncateValue(absVal)}`;
};
const Count = forwardRef((props, ref) => {
    const { variant = 'default', children, ...restProps } = props;
    return Number.isInteger(children) ? (_jsx(StyledCount, { variant: variant, ...restProps, ref: ref, children: formatValue(children) })) : null;
});
export default Count;
//# sourceMappingURL=Count.js.map