import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { createContext, useContext, useMemo, useState, useEffect } from 'react';
import { createPortal } from 'react-dom';
import { ThemeProvider, StyleSheetManager } from 'styled-components';
import { GlobalStyle } from '../../styles';
import { ThemeMachine, BaseThemeMachine } from '../../theme';
import { createTranslationPack, DefaultTranslation, direction as directionOfLocale } from '../../i18n';
import { windowIsAvailable, navigatorIsAvailable, documentIsAvailable } from '../../utils';
import pkg from '../../../package.json';
import '../../init';
const defaultLocale = navigatorIsAvailable ? navigator.language : 'en';
export const ConfigurationContext = createContext({
    locale: defaultLocale,
    direction: directionOfLocale(defaultLocale),
    translations: DefaultTranslation,
    themeMachine: BaseThemeMachine,
    styleSheetTarget: documentIsAvailable ? document.head : undefined,
    portalTarget: documentIsAvailable ? document.body : undefined,
    overrideMap: {},
    renderNativeControls: false,
    initialized: false
});
const mountedConfigs = new Set();
const instance = {
    version: pkg.version,
    mountedConfigs: [],
    mountOrder: [],
    mountCount: {}
};
const mountConfig = (sym) => {
    mountedConfigs.add(sym);
    instance.mountedConfigs = [...mountedConfigs].map(i => i.description ?? 'Unknown');
    const description = sym.description ?? 'Unknown';
    instance.mountOrder.push(description);
    if (!(description in instance.mountCount)) {
        instance.mountCount[description] = 0;
    }
    instance.mountCount[description] += 1;
};
const unmountConfig = (sym) => {
    mountedConfigs.delete(sym);
    instance.mountedConfigs = [...mountedConfigs].map(i => i.description ?? 'Unknown');
};
if (windowIsAvailable) {
    if (!window.cosmos.instances) {
        window.cosmos.instances = [];
    }
    window.cosmos.instances.push(instance);
}
const Configuration = ({ children, locale, direction, translations: customTranslations, theme, disableDefaultFontLoading, styleSheetTarget, portalTarget, overrideMap, renderNativeControls, id }) => {
    const context = windowIsAvailable
        ? window.cosmos.configurationContext ?? ConfigurationContext
        : ConfigurationContext;
    const ctx = useContext(context);
    const themeMachine = theme
        ? new ThemeMachine({ theme, parent: ctx.themeMachine })
        : ctx.themeMachine;
    const translations = useMemo(() => createTranslationPack({ ...ctx.translations, ...customTranslations }), [ctx.translations, customTranslations]);
    const [mounted, setMounted] = useState(false);
    useEffect(() => {
        setMounted(true);
    }, []);
    useEffect(() => {
        const sym = Symbol(id);
        mountConfig(sym);
        return () => {
            unmountConfig(sym);
        };
    }, [id]);
    const wrappedChildren = ctx.initialized ? (children) : (_jsx(StyleSheetManager, { disableVendorPrefixes: true, target: styleSheetTarget ?? ctx.styleSheetTarget, children: _jsxs(_Fragment, { children: [!disableDefaultFontLoading &&
                    mounted &&
                    documentIsAvailable &&
                    createPortal(_jsx("link", { rel: 'stylesheet', href: 'https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,400..700;1,400..700&display=swap', "data-cosmos-global-style": true }), styleSheetTarget ?? ctx.styleSheetTarget ?? document.head), _jsx(GlobalStyle, {}), children] }) }));
    return (_jsx(context.Provider, { value: {
            locale: locale ?? ctx.locale,
            direction: direction ?? (locale !== undefined ? directionOfLocale(locale) : ctx.direction),
            translations,
            themeMachine,
            styleSheetTarget: styleSheetTarget ?? ctx.styleSheetTarget,
            portalTarget: portalTarget ?? ctx.portalTarget,
            overrideMap: overrideMap ? { ...ctx.overrideMap, ...overrideMap } : ctx.overrideMap,
            renderNativeControls: renderNativeControls ?? ctx.renderNativeControls,
            initialized: true
        }, children: _jsx(ThemeProvider, { theme: themeMachine.theme, children: wrappedChildren }) }));
};
export default Configuration;
//# sourceMappingURL=Configuration.js.map