import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef, useEffect } from 'react';
import styled, { css } from 'styled-components';
import { useConsolidatedRef, useEscape, useFocusTrap, useI18n, useOuterEvent, useUID } from '../../hooks';
import { getFocusables } from '../../utils';
import Button from '../Button';
import Flex from '../Flex';
import Popover from '../Popover';
import Text from '../Text';
import { defaultThemeProp } from '../../theme';
const StyledQueryListPopover = styled(Popover)(({ theme: { base: { 'content-width': contentWidth } } }) => {
    return css `
      min-width: min(${contentWidth.md}, 100vw);
    `;
});
StyledQueryListPopover.defaultProps = defaultThemeProp;
const QueryOptionPopover = forwardRef(({ target, heading, children, onCancel, onSubmit }, ref) => {
    const t = useI18n();
    const headingId = useUID();
    const popoverRef = useConsolidatedRef(ref);
    useEscape(onCancel, popoverRef);
    useFocusTrap(popoverRef);
    useOuterEvent('mousedown', [popoverRef], onCancel);
    useEffect(() => {
        getFocusables(popoverRef)[0]?.focus();
    }, [popoverRef]);
    return (_jsx(StyledQueryListPopover, { target: target, ref: popoverRef, role: 'dialog', "aria-labelledby": headingId, arrow: true, children: _jsxs(Flex, { container: { direction: 'column', gap: 2, pad: 2 }, children: [_jsx(Text, { variant: 'h3', id: headingId, children: heading }), children, _jsxs(Flex, { container: { justify: 'between' }, children: [_jsx(Button, { onClick: () => {
                                onCancel();
                                target?.focus();
                            }, children: t('cancel') }), _jsx(Button, { variant: 'primary', onClick: () => {
                                onSubmit();
                                target?.focus();
                            }, children: t('submit') })] })] }) }));
});
export default QueryOptionPopover;
//# sourceMappingURL=QueryOptionPopover.js.map