import { ElementType, MouseEvent } from 'react';
export interface BaseProps {
    /** Additional CSS classes. */
    className?: string;
}
export interface ForwardProps {
    [prop: string]: unknown;
}
export interface NoChildrenProp {
    children?: never;
}
export declare type HTMLTag = keyof JSX.IntrinsicElements;
export interface AsProp {
    /** HTML tag or React Component to render the component as. */
    as?: ElementType;
    /** HTML tag or React Component to finally render the component as. */
    forwardedAs?: ElementType;
}
export interface Action extends ForwardProps {
    /** A string to uniquely identify this Action within the onClick handler. */
    id: string;
    /** The text content of the Action. */
    text: string;
    /** The name of the Cosmos Icon to render, if any. */
    icon?: string;
    /** A location to navigate to. Passing an href will render a Link styled as a Button. */
    href?: string;
    /** Called when the Action is clicked. */
    onClick?: (id: string, e: MouseEvent<HTMLButtonElement | HTMLAnchorElement | HTMLInputElement>) => void;
    /** Determines if the Action will be disabled. */
    disabled?: boolean;
}
export declare type OmitStrict<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
export declare type PartialByKey<T extends object, K extends keyof T> = OmitStrict<T, K> & Partial<Pick<T, K>>;
export declare type RequiredByKey<T extends object, K extends keyof T> = OmitStrict<T, K> & Required<Pick<T, K>>;
export declare type DeepPartial<T> = T extends (infer U)[] ? DeepPartial<U>[] : T extends object ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : T;
export declare type DeepRequired<T> = T extends (infer U)[] ? DeepRequired<U>[] : T extends Function ? T : T extends object ? {
    [K in keyof T]-?: DeepRequired<T[K]>;
} : T;
export declare type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<T, Exclude<keyof T, Keys>> & {
    [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>;
}[Keys];
export declare type DeferInfer<T> = T & {
    [K in keyof T]: T[K];
};
export declare type PropsWithDefaults<Props extends object = {}, Defaults extends keyof Props = never> = OmitStrict<Props, Defaults> & Required<Pick<Props, Defaults>>;
export declare type PrettyPrint<T> = T extends object ? {
    [K in keyof T]: T[K];
} : T;
//# sourceMappingURL=types.d.ts.map