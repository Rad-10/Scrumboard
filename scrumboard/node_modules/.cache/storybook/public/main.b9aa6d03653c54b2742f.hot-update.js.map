{"version":3,"file":"main.b9aa6d03653c54b2742f.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;;AAEA;;AAEA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAKA;AALA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AApDA;AAsDA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","sources":["webpack://scrumboard/./src/components/Pega_Extensions_Scrumboard/index.jsx"],"sourcesContent":["/* eslint-disable no-nested-ternary */\nimport { Fragment, useEffect, useState } from 'react';\nimport { DateTimeDisplay, Card, CardHeader, CardContent, Flex } from '@pega/cosmos-react-core';\nimport PropTypes from 'prop-types';\nimport App from './App';\n\n// includes in bundle\nimport Operator from './Operator.jsx';\n\nimport StyledPegaExtensionsScrumboardWrapper from './styles';\n\n// Duplicated runtime code from Constellation Design System Component\n\n// props passed in combination of props from property panel (config.json) and run time props from Constellation\n// any default values in config.pros should be set in defaultProps at bottom of this file\nexport default function PegaExtensionsScrumboard(props) {\n  const {\n    getPConnect,\n    title,\n    label,\n    createLabel,\n    updateLabel,\n    createOperator,\n    updateOperator,\n    createDateTime,\n    updateDateTime,\n    resolveLabel,\n    resolveOperator,\n    resolveDateTime,\n    hideLabel\n  } = props;\n\n  const pConn = getPConnect();\n  const actions = pConn.getActionsApi();\n\n  const [_label, user, dateTimeValue] =\n    label === 'Create operator'\n      ? [createLabel, createOperator, createDateTime]\n      : label === 'Update operator'\n      ? [updateLabel, updateOperator, updateDateTime]\n      : [resolveLabel, resolveOperator, resolveDateTime];\n\n  const [isLoading, setIsLoading] = useState(true);\n  const [items, setItems] = useState([]);\n\n  useEffect(() => {\n    setIsLoading(true);\n    const dataViewName = 'D_AllSprintItems';\n    const parameters = {\n      SprintInsKey: 'PEGAPROJMGMT-WORK SPR-63051'\n    };\n\n    const context = 'app/primary_1';\n    PCore.getDataPageUtils()\n      .getDataAsync(dataViewName, context, parameters)\n      .then(response => console.log(response))\n      //.then(data => setItems(data))\n      .catch(error => {\n        console.log(error);\n      });\n  }, []);\n\n  return (\n    <StyledPegaExtensionsScrumboardWrapper>\n      <App></App>\n    </StyledPegaExtensionsScrumboardWrapper>\n  );\n}\n\nwindow.PCore = {\n  ...window.PCore,\n\n  getDataApiUtils: () => {\n    return {\n      getDataAsync: (dataViewName, payLoad, context) => {\n        console.log('calling get data from story book');\n        return new Promise((resolve, reject) => {\n          resolve({\n            data: {\n              data: [\n                { pyUserIdentifier: 'user1', pyUserName: 'user 1' },\n                { pyUserIdentifier: 'user2', pyUserName: 'user 2' }\n              ]\n            }\n          });\n        });\n      }\n    };\n  },\n  getRestClient: () => {\n    return {\n      doesRestApiExist: () => {\n        return false; // Expected to be called using `getDataFromSRS`.\n      }\n    };\n  },\n\n  getPubSubUtils: () => {\n    return {\n      subscribe: () => {},\n      unsubscribe: () => {}\n    };\n  },\n  registerModule: (moduleName, module) => {\n    global.PCore[moduleName] = () => module;\n  },\n  getAsynchronousUtils: () => {\n    return {\n      getDebouncedSubject: () => {\n        return new Subject();\n      }\n    };\n  },\n  getEnvironmentInfo: () => {\n    return {\n      getEnvironmentKeys: () => {\n        return [\n          'APPLICATION_NAME',\n          'APPLICATION_DESC',\n          'ACCESS_GROUP',\n          'USER_NAME',\n          'USER_ID',\n          'USER_IMAGE',\n          'LOCALE',\n          'TIMEZONE',\n          'WORK_GROUP'\n        ];\n      },\n      environmentInfoObject: {\n        pxApplication: {\n          pyHasAlternateDesignSystem: false\n        }\n      }\n    };\n  }\n};\n\nPegaExtensionsScrumboard.defaultProps = {\n  label: 'Create operator',\n  title: 'Create operator',\n  createLabel: null,\n  updateLabel: null,\n  createOperator: null,\n  updateOperator: null,\n  createDateTime: null,\n  updateDateTime: null,\n  resolveLabel: null,\n  resolveOperator: null,\n  resolveDateTime: null,\n  hideLabel: false\n};\n\nPegaExtensionsScrumboard.propTypes = {\n  getPConnect: PropTypes.func.isRequired,\n  label: PropTypes.string,\n  title: PropTypes.string,\n  createLabel: PropTypes.string,\n  updateLabel: PropTypes.string,\n  resolveLabel: PropTypes.string,\n  createOperator: PropTypes.objectOf(PropTypes.any),\n  updateOperator: PropTypes.objectOf(PropTypes.any),\n  resolveOperator: PropTypes.objectOf(PropTypes.any),\n  createDateTime: PropTypes.string,\n  updateDateTime: PropTypes.string,\n  resolveDateTime: PropTypes.string,\n  hideLabel: PropTypes.bool\n};\n\n// as objects are there in props, shallow comparision fails & re-rendering of comp happens even with\n// same key value pairs in obj. hence using custom comparison function on when to re-render\n// const comparisonFn = (prevProps, nextProps) => {\n//   return prevProps.updateDateTime === nextProps.updateDateTime;\n// };\n"],"names":[],"sourceRoot":""}