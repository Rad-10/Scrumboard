{"version":3,"file":"main.ab52d3cce53a62bd9c2a.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAIA;AAAA;AAOA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AAvBA;AAyBA;;;;;;;;;;;;;;;;;;;;ACrCA;AAMA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AAEA;AACA;AAEA;AACA;AAGA;AAEA;AAAA;AAAA;AAQA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AAlCA;AAoCA;;;;;;;;;;;;;;;;;;;;;;ACvDA;AAUA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAQA;AAAA;AAAA;AAkBA;AASA;AAAA;AAAA;AAcA","sources":["webpack://scrumboard/./src/components/Pega_Extensions_Scrumboard/components/Badge/index.tsx","webpack://scrumboard/./src/components/Pega_Extensions_Scrumboard/components/Badge/styles.ts","webpack://scrumboard/./src/components/Pega_Extensions_Scrumboard/components/Card/index.tsx","webpack://scrumboard/./src/components/Pega_Extensions_Scrumboard/components/Card/styles.ts"],"sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\r\nimport { ThemeContext } from 'styled-components';\r\nimport getCategoryBackgroundColor from '../../helpers/getCategoryBackgroundColor';\r\nimport IStatus from '../../interfaces/IStatus';\r\nimport ICategory from '../../interfaces/ICategory';\r\nimport { BadgeContainer } from './styles';\r\n\r\ninterface BadgeProps {\r\n  value: string;\r\n  valuetype: string;\r\n}\r\n\r\nconst Badge: React.FC<BadgeProps> = ({ value, valuetype }) => {\r\n  const theme = useContext(ThemeContext);\r\n\r\n  const [color, setColor] = useState<string>(theme.colors.primary);\r\n\r\n  useEffect(() => {\r\n    if (valuetype === 'category') {\r\n      // Set color to #7352CF for 'category'\r\n      setColor('#7352CF');\r\n    } else if (valuetype === 'status') {\r\n      // Set color to #61D856 for 'status'\r\n      setColor('#61D856');\r\n    } else {\r\n      // Set a default color if valuetype is neither 'category' nor 'status'\r\n      setColor(theme.colors.primary);\r\n    }\r\n  }, [valuetype, theme.colors.primary]);\r\n\r\n  return (\r\n    <BadgeContainer color={color}>\r\n      <p>{value}</p>\r\n    </BadgeContainer>\r\n  );\r\n};\r\n\r\nexport default Badge;\r\n","import styled from 'styled-components';\r\n\r\ninterface BadgeContainerProps{\r\n  color: string;\r\n}\r\n\r\nexport const BadgeContainer = styled.div<BadgeContainerProps>`\r\n  background-color: ${({color}) => color};\r\n  border-radius: 5px;\r\n  \r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 0 4px;\r\n\r\n  p {\r\n    color: #fff;\r\n    font-weight: bold;\r\n    text-transform: uppercase;\r\n    padding: 4px 2px;\r\n  }\r\n`;\r\n","import React, { useContext, useEffect, useState } from 'react';\r\n\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport { ThemeContext } from 'styled-components';\r\n\r\nimport getCategoryBackgroundColor from '../../helpers/getCategoryBackgroundColor';\r\nimport { useModal } from '../../hooks/useModal';\r\nimport { useAppSelector } from '../../hooks/useRedux';\r\nimport ICard from '../../interfaces/ICard';\r\nimport Badge from '../Badge';\r\n\r\nimport { CardBorder, CardBottom, CardContainer } from './styles';\r\nimport { Category } from 'emoji-mart';\r\n\r\ninterface CardProps {\r\n  card: ICard;\r\n  index: number;\r\n}\r\n\r\nconst Card: React.FC<CardProps> = ({ card, index }) => {\r\n  const theme = useContext(ThemeContext);\r\n\r\n  const [backgroundColor, setBackgroundColor] = useState<string>(theme.colors.primary);\r\n\r\n  const { toggleVisibility } = useModal();\r\n\r\n  useEffect(() => {\r\n    if (card) {\r\n      const categoryColor = getCategoryBackgroundColor(theme, card.category);\r\n      setBackgroundColor(categoryColor);\r\n    }\r\n  }, [card]);\r\n\r\n  return (\r\n    <Draggable draggableId={card.id} index={index}>\r\n      {provided => (\r\n        <CardContainer\r\n          onClick={() => toggleVisibility(card)}\r\n          hideCard={card.hidden}\r\n          ref={provided.innerRef}\r\n          {...provided.draggableProps}\r\n          {...provided.dragHandleProps}\r\n        >\r\n          <CardBorder color={backgroundColor} />\r\n          <h3>{card.title}</h3>\r\n          <CardBottom>\r\n            <Badge value={card.category} />\r\n            <p>+ View More</p>\r\n          </CardBottom>\r\n        </CardContainer>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import styled from \"styled-components\";\r\n\r\ninterface ColorProps {\r\n  color: string;\r\n}\r\n\r\ninterface CardContainerProps {\r\n  hideCard: boolean;\r\n}\r\n\r\nexport const CardContainer = styled.div<CardContainerProps>`\r\n  background-color: ${({ theme }) => theme.colors.components_background};\r\n  opacity:  ${({ hideCard }) => hideCard ? 0.2 : 1};\r\n\r\n  width: 300px;\r\n  height: 110px;\r\n  margin: 0.7rem 0;\r\n  padding: 1.2rem 1rem 0.7rem 1rem;\r\n\r\n  border-radius: 5px;\r\n  border: 1px solid ${({theme}) => theme.colors.border};\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n\r\n  position: relative;\r\n\r\n  h3 {\r\n    text-overflow: ellipsis;\r\n    width: 100%;\r\n    overflow: hidden;\r\n    display: -webkit-box;\r\n    -webkit-line-clamp: 2;\r\n    -webkit-box-orient: vertical;\r\n  }\r\n`\r\n\r\nexport const CardBorder = styled.div<ColorProps>`\r\n  cursor: grab;\r\n  position: absolute;\r\n  width: calc(100% + 2px);\r\n  top: -1px;\r\n  left: -1px;\r\n  border-top-left-radius: 5px;\r\n  border-top-right-radius: 5px;\r\n  height: 10px;\r\n  background-color: ${({color}) => color};\r\n\r\n  &:before{\r\n    content: '';\r\n    height: 0.5px;\r\n    width: 80px;\r\n    background-color: #ffffff;\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, 0);\r\n  }\r\n`\r\n\r\nexport const CardBottom = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: space-between ;\r\n  width: 100%;\r\n\r\n  p {\r\n    cursor: pointer !important;\r\n  }\r\n`"],"names":[],"sourceRoot":""}