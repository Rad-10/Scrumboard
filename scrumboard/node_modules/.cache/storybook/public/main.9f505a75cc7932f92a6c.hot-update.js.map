{"version":3,"file":"main.9f505a75cc7932f92a6c.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AAKA;AACA;AACA;AAGA;AACA;AACA;AAUA;AACA;AACA;AAAA;AAAA;AAAA;AAMA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAEA;AAFA;AAAA;AAIA;AAEA;AACA;AAAA;AAAA;AAEA;AAEA;AAGA;AACA;AACA;AAEA;AAEA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;;AAGA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAAA;AAGA;AACA;AAEA;AAEA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AAGA;AACA;AAEA;AAEA;AAAA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAwBA;AACA;AAAA;AAEA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AAEA;AAAA;AAAA;AAGA;AAEA","sources":["webpack://scrumboard/./src/components/Pega_Extensions_Scrumboard/components/KanbanBoard/index.tsx"],"sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\r\n\r\nimport Switch from 'react-switch';\r\nimport { ThemeContext } from 'styled-components';\r\nimport { DragDropContext, DropResult } from 'react-beautiful-dnd';\r\n\r\nimport ICard from '../../interfaces/ICard';\r\nimport IStatus from '../../interfaces/IStatus';\r\nimport IColumn from '../../interfaces/IColumn';\r\nimport ICategory from '../../interfaces/ICategory';\r\nimport Column from '../Column';\r\nimport Modal from '../Modal';\r\nimport SearchInput from '../SearchInput';\r\nimport getCategoryBackgroundColor from '../../helpers/getCategoryBackgroundColor';\r\nimport { useModal } from '../../hooks/useModal';\r\nimport { useAppDispatch, useAppSelector } from '../../hooks/useRedux';\r\nimport {\r\n  Container,\r\n  FiltersContainer,\r\n  Header,\r\n  LabelContainer,\r\n  SearchAndFilters,\r\n  StatusesColumnsContainer,\r\n  SwitchIcon,\r\n  TitleAndSwitch\r\n} from './styles';\r\nimport { setColumns } from '../../store/slices/columns.slice';\r\nimport { filterCards, setCards } from '../../store/slices/cards.slice';\r\nimport { ButtonAddCard } from '../ButtonAddCard';\r\n\r\ninterface KanbanBoardProps {\r\n  toggleTheme: () => void;\r\n}\r\n\r\nconst KanbanBoard: React.FC<KanbanBoardProps> = ({ toggleTheme }) => {\r\n  const { colors, title } = useContext(ThemeContext);\r\n  const theme = useContext(ThemeContext);\r\n\r\n  const { cards } = useAppSelector(state => state.cards);\r\n  const { columns } = useAppSelector(state => state.columns);\r\n  const { visible } = useModal();\r\n\r\n  const [selectedCategories, setSelectedCategories] = useState<Array<ICategory>>(\r\n    Object.values(ICategory)\r\n  );\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const onDragEnd = (result: DropResult) => {\r\n    const { destination, source, draggableId } = result;\r\n\r\n    if (!destination) return;\r\n\r\n    if (destination.droppableId === source.droppableId && destination.index === source.index)\r\n      return;\r\n\r\n    const updatedCards: Array<ICard> = cards.map(card => {\r\n      if (card.id === draggableId) {\r\n        const status: IStatus = destination.droppableId as IStatus;\r\n\r\n        return {\r\n          ...card,\r\n          status\r\n        };\r\n      } else return card;\r\n    });\r\n\r\n    const sourceColumn: IColumn = columns.find(\r\n      column => column.id === source.droppableId\r\n    ) as IColumn;\r\n    const destinationColumn: IColumn = columns.find(\r\n      column => column.id === destination.droppableId\r\n    ) as IColumn;\r\n\r\n    // Moving cards in the same column\r\n    if (sourceColumn === destinationColumn) {\r\n      const newColumnCardsIds = [...destinationColumn.cardsIds];\r\n\r\n      newColumnCardsIds.splice(source.index, 1);\r\n      newColumnCardsIds.splice(destination.index, 0, draggableId);\r\n\r\n      const newDestinationColumn: IColumn = {\r\n        ...destinationColumn,\r\n        cardsIds: newColumnCardsIds\r\n      };\r\n\r\n      const updatedColumns: Array<IColumn> = columns.map(column => {\r\n        if (column.id === newDestinationColumn.id) return newDestinationColumn;\r\n        else return column;\r\n      });\r\n\r\n      dispatch(setColumns(updatedColumns));\r\n      dispatch(setCards(updatedCards));\r\n\r\n      return;\r\n    }\r\n\r\n    // Moving cards from one column to another\r\n    const sourceCardsIds = [...sourceColumn.cardsIds];\r\n    sourceCardsIds.splice(source.index, 1);\r\n\r\n    const newSourceColumn: IColumn = {\r\n      ...sourceColumn,\r\n      cardsIds: sourceCardsIds\r\n    };\r\n\r\n    const destinationCardsIds = [...destinationColumn.cardsIds];\r\n    destinationCardsIds.splice(destination.index, 0, draggableId);\r\n\r\n    const newDestinationColumn: IColumn = {\r\n      ...destinationColumn,\r\n      cardsIds: destinationCardsIds\r\n    };\r\n\r\n    const updatedColumns: Array<IColumn> = columns.map(column => {\r\n      if (column.id === newDestinationColumn.id) return newDestinationColumn;\r\n      if (column.id === newSourceColumn.id) return newSourceColumn;\r\n      else return column;\r\n    });\r\n\r\n    dispatch(setColumns(updatedColumns));\r\n    dispatch(setCards(updatedCards));\r\n  };\r\n\r\n  const handleChangeCheckbox = (category: ICategory) => {\r\n    const foundCategory = selectedCategories.find(item => item === category);\r\n\r\n    if (foundCategory) {\r\n      const categoriesWithItemRemoved = selectedCategories.filter(item => item !== category);\r\n      setSelectedCategories(categoriesWithItemRemoved);\r\n      return;\r\n    }\r\n\r\n    setSelectedCategories([...selectedCategories, category]);\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(filterCards({ categories: selectedCategories }));\r\n  }, [selectedCategories]);\r\n\r\n  return (\r\n    <>\r\n      <Container>\r\n        <Header>\r\n          <TitleAndSwitch>\r\n            <h2>\r\n              Scrum <span>Board</span>\r\n            </h2>\r\n            <Switch\r\n              onChange={toggleTheme}\r\n              checked={title === 'light'}\r\n              checkedIcon={<SwitchIcon src='sunu' alt='Sun' />}\r\n              uncheckedIcon={<SwitchIcon src='moonu' alt='Moon' />}\r\n              onColor={colors.primary}\r\n              offColor={colors.switch}\r\n            />\r\n          </TitleAndSwitch>\r\n          {/*     <SearchAndFilters>\r\n            <SearchInput/>\r\n            <FiltersContainer>\r\n              {Object.values(ICategory).map(category => (\r\n                <LabelContainer\r\n                  key={category}\r\n                  color={() => getCategoryBackgroundColor(theme, category)}\r\n                  onClick={() => handleChangeCheckbox(category)}\r\n                >\r\n                  <input\r\n                    type='checkbox'\r\n                    name={category}\r\n                    value={category}\r\n                    checked={selectedCategories.includes(category)}\r\n                    onChange={() => handleChangeCheckbox(category)}\r\n                  />\r\n                  <label>{category}</label>\r\n                </LabelContainer>\r\n              ))}\r\n          </FiltersContainer>\r\n              </SearchAndFilters> */}\r\n        </Header>\r\n\r\n        <StatusesColumnsContainer>\r\n          <DragDropContext onDragEnd={onDragEnd}>\r\n            {columns.map((column, index) => {\r\n              const cardsArray: Array<ICard> = [];\r\n\r\n              column.cardsIds.forEach(cardId => {\r\n                const foundedCard = cards.find(card => card.id === cardId);\r\n                if (foundedCard) cardsArray.push(foundedCard);\r\n              });\r\n\r\n              return <Column key={column.id} index={index} status={column.id} cards={cardsArray} />;\r\n            })}\r\n          </DragDropContext>\r\n        </StatusesColumnsContainer>\r\n        <ButtonAddCard />\r\n      </Container>\r\n      <Modal visible={visible} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default KanbanBoard;\r\n"],"names":[],"sourceRoot":""}