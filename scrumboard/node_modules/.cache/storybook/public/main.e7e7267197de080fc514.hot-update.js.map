{"version":3,"file":"main.e7e7267197de080fc514.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://scrumboard/./.storybook/preview.tsx-generated-config-entry.js"],"sourcesContent":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\r\n\r\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\r\n\r\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\r\n\r\n/* eslint-disable import/no-unresolved */\r\nimport { addDecorator, addParameters, addLoader, addArgs, addArgTypes, addArgsEnhancer, addArgTypesEnhancer, setGlobalRender } from 'C:/Users/jains8/HACK Q3/Scrumboard/scrumboard/node_modules/@storybook/client-api';\r\nimport * as config from 'C:/Users/jains8/HACK Q3/Scrumboard/scrumboard/.storybook/preview.tsx';\r\nObject.keys(config).forEach(function (key) {\r\n  var value = config[key];\r\n\r\n  switch (key) {\r\n    case 'args':\r\n      {\r\n        return addArgs(value);\r\n      }\r\n\r\n    case 'argTypes':\r\n      {\r\n        return addArgTypes(value);\r\n      }\r\n\r\n    case 'decorators':\r\n      {\r\n        return value.forEach(function (decorator) {\r\n          return addDecorator(decorator, false);\r\n        });\r\n      }\r\n\r\n    case 'loaders':\r\n      {\r\n        return value.forEach(function (loader) {\r\n          return addLoader(loader, false);\r\n        });\r\n      }\r\n\r\n    case 'parameters':\r\n      {\r\n        return addParameters(_objectSpread({}, value), false);\r\n      }\r\n\r\n    case 'argTypesEnhancers':\r\n      {\r\n        return value.forEach(function (enhancer) {\r\n          return addArgTypesEnhancer(enhancer);\r\n        });\r\n      }\r\n\r\n    case 'argsEnhancers':\r\n      {\r\n        return value.forEach(function (enhancer) {\r\n          return addArgsEnhancer(enhancer);\r\n        });\r\n      }\r\n\r\n    case 'render':\r\n      {\r\n        return setGlobalRender(value);\r\n      }\r\n\r\n    case 'globals':\r\n    case 'globalTypes':\r\n      {\r\n        var v = {};\r\n        v[key] = value;\r\n        return addParameters(v, false);\r\n      }\r\n\r\n    case '__namedExportsOrder':\r\n    case 'decorateStory':\r\n    case 'renderToDOM':\r\n      {\r\n        return null; // This key is not handled directly in v6 mode.\r\n      }\r\n\r\n    default:\r\n      {\r\n        // eslint-disable-next-line prefer-template\r\n        return console.log(key + ' was not supported :( !');\r\n      }\r\n  }\r\n});"],"names":[],"sourceRoot":""}