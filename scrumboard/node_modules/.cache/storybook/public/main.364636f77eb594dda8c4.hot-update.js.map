{"version":3,"file":"main.364636f77eb594dda8c4.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AACA;AACA;;AAEA;AACA;AAEA;;AAEA;;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAgDA;AAAA;AAhDA;AAAA;AAAA;AAAA;AAEA;AAYA;AAGA;AAOA;AAAA;AAKA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAhDA;AAkDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","sources":["webpack://scrumboard/./src/components/Pega_Extensions_Scrumboard/index.jsx"],"sourcesContent":["/* eslint-disable no-nested-ternary */\nimport { Fragment } from 'react';\nimport { DateTimeDisplay, Card, CardHeader, CardContent, Flex } from '@pega/cosmos-react-core';\nimport PropTypes from 'prop-types';\n\n// includes in bundle\nimport Operator from './Operator.jsx';\n\nimport StyledPegaExtensionsScrumboardWrapper from './styles';\n\n// Duplicated runtime code from Constellation Design System Component\n\n// props passed in combination of props from property panel (config.json) and run time props from Constellation\n// any default values in config.pros should be set in defaultProps at bottom of this file\nexport default async function PegaExtensionsScrumboard(props) {\n  const {\n    getPConnect,\n    title,\n    label,\n    createLabel,\n    updateLabel,\n    createOperator,\n    updateOperator,\n    createDateTime,\n    updateDateTime,\n    resolveLabel,\n    resolveOperator,\n    resolveDateTime,\n    hideLabel\n  } = props;\n\n  const [_label, user, dateTimeValue] =\n    label === 'Create operator'\n      ? [createLabel, createOperator, createDateTime]\n      : label === 'Update operator'\n      ? [updateLabel, updateOperator, updateDateTime]\n      : [resolveLabel, resolveOperator, resolveDateTime];\n\n  if (1 == 1) {\n    await PCore.getDataApiUtils()\n      .getData(\n        'D_CreateModeratorForPoker',\n        {\n          dataViewParameters: {\n            USId: id\n          }\n        },\n        context\n      )\n      .then(response => {\n        console.log('Create moderator response');\n        console.log(response);\n        console.log('moderator is set to' + response.data.data[0].UserID);\n\n        moderator = response.data.data[0].UserID;\n        gameStatus = response.data.data[0].GameStatus;\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }\n  return <StyledPegaExtensionsScrumboardWrapper></StyledPegaExtensionsScrumboardWrapper>;\n}\n\nPegaExtensionsScrumboard.defaultProps = {\n  label: 'Create operator',\n  title: 'Create operator',\n  createLabel: null,\n  updateLabel: null,\n  createOperator: null,\n  updateOperator: null,\n  createDateTime: null,\n  updateDateTime: null,\n  resolveLabel: null,\n  resolveOperator: null,\n  resolveDateTime: null,\n  hideLabel: false\n};\n\nPegaExtensionsScrumboard.propTypes = {\n  getPConnect: PropTypes.func.isRequired,\n  label: PropTypes.string,\n  title: PropTypes.string,\n  createLabel: PropTypes.string,\n  updateLabel: PropTypes.string,\n  resolveLabel: PropTypes.string,\n  createOperator: PropTypes.objectOf(PropTypes.any),\n  updateOperator: PropTypes.objectOf(PropTypes.any),\n  resolveOperator: PropTypes.objectOf(PropTypes.any),\n  createDateTime: PropTypes.string,\n  updateDateTime: PropTypes.string,\n  resolveDateTime: PropTypes.string,\n  hideLabel: PropTypes.bool\n};\n\n// as objects are there in props, shallow comparision fails & re-rendering of comp happens even with\n// same key value pairs in obj. hence using custom comparison function on when to re-render\n// const comparisonFn = (prevProps, nextProps) => {\n//   return prevProps.updateDateTime === nextProps.updateDateTime;\n// };\n"],"names":[],"sourceRoot":""}