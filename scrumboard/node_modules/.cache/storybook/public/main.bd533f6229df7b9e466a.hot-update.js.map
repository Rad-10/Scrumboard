{"version":3,"file":"main.bd533f6229df7b9e466a.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAAA;AAOA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AArBA;AAuBA;;;;;;;;;;;;;;;;;;;;AChCA;AAMA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;ACPA;AACA;AAEA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AAZA;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AAEA;AAKA;AAAA;AAAA;AASA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjBA;AAEA;AACA;AAEA;AACA;AAGA;AAEA;AAAA;AAAA;AAQA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AAnCA;AAqCA;;;;;;;;;;;;;;;;;;;;;;ACxDA;AAUA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAQA;AAAA;AAAA;AAkBA;AASA;AAAA;AAAA;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7DA;AAEA;AAIA;AACA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAGA;AAjBA;AAmBA;;;;;;;;;;;;;;;;;;;;;;AClCA;AACA;AAMA;AAGA;AAAA;AAEA;AAGA;AAAA;AAEA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrBA;AAEA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAGA;AACA;AACA;AAUA;AACA;AACA;AAAA;AAAA;AAAA;AAMA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAEA;AAFA;AAAA;AAIA;AAEA;AACA;AAAA;AAAA;AAEA;AAEA;AAGA;AACA;AACA;AAEA;AAEA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;;AAGA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAAA;AAGA;AACA;AAEA;AAEA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AAGA;AACA;AAEA;AAEA;AAAA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAwBA;AACA;AAAA;AAEA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAEA;AAEA;AAAA;AAAA;AACA;AAGA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChNA;AACA;AAMA;AAeA;AAMA;AAYA;AAeA;AAQA;AAEA;AAAA;AAAA;AAiBA;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1FA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AAAA;AAMA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAFA;AAAA;AAGA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AA3GA;AA6GA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvIA;AACA;AAUA;AAYA;AAIA;AAAA;AAAA;AAwBA;AAGA;AAAA;AAAA;AAKA;AAGA;AAAA;AAAA;AAKA;AAYA;AAEA;AAAA;AAAA;AAUA;AAEA;AAAA;AAAA;AAoBA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;ACjHA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;ACzBA;AAGA;AACA;AACA","sources":["webpack://scrumboard/./src/components/Pega_Extensions_Scrumboard/components/Badge/index.tsx","webpack://scrumboard/./src/components/Pega_Extensions_Scrumboard/components/Badge/styles.ts","webpack://scrumboard/./src/components/Pega_Extensions_Scrumboard/components/ButtonAddCard/index.tsx","webpack://scrumboard/./src/components/Pega_Extensions_Scrumboard/components/ButtonAddCard/styles.ts","webpack://scrumboard/./src/components/Pega_Extensions_Scrumboard/components/Card/index.tsx","webpack://scrumboard/./src/components/Pega_Extensions_Scrumboard/components/Card/styles.ts","webpack://scrumboard/./src/components/Pega_Extensions_Scrumboard/components/Column/index.tsx","webpack://scrumboard/./src/components/Pega_Extensions_Scrumboard/components/Column/styles.ts","webpack://scrumboard/./src/components/Pega_Extensions_Scrumboard/components/KanbanBoard/index.tsx","webpack://scrumboard/./src/components/Pega_Extensions_Scrumboard/components/KanbanBoard/styles.ts","webpack://scrumboard/./src/components/Pega_Extensions_Scrumboard/components/Modal/index.tsx","webpack://scrumboard/./src/components/Pega_Extensions_Scrumboard/components/Modal/styles.ts","webpack://scrumboard/./src/components/Pega_Extensions_Scrumboard/helpers/getCategoryBackgroundColor.ts","webpack://scrumboard/./src/components/Pega_Extensions_Scrumboard/hooks/useRedux.ts"],"sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\r\nimport { ThemeContext } from 'styled-components';\r\nimport { BadgeContainer } from './styles';\r\n\r\ninterface BadgeProps {\r\n  value: string;\r\n  valuetype: string;\r\n}\r\n\r\nconst Badge: React.FC<BadgeProps> = ({ value, valuetype }) => {\r\n  const theme = useContext(ThemeContext);\r\n\r\n  const [color, setColor] = useState<string>(theme.colors.primary);\r\n\r\n  useEffect(() => {\r\n    if (valuetype === 'CaseID') {\r\n      setColor('#131FC2');\r\n    } else if (valuetype === 'CaseStatus') {\r\n      setColor('#61D856');\r\n    } else {\r\n      // Set a default color if valuetype is neither 'category' nor 'status'\r\n      setColor(theme.colors.primary);\r\n    }\r\n  }, [valuetype, theme.colors.primary]);\r\n\r\n  return (\r\n    <BadgeContainer color={color}>\r\n      <p>{value}</p>\r\n    </BadgeContainer>\r\n  );\r\n};\r\n\r\nexport default Badge;\r\n","import styled from 'styled-components';\r\n\r\ninterface BadgeContainerProps{\r\n  color: string;\r\n}\r\n\r\nexport const BadgeContainer = styled.div<BadgeContainerProps>`\r\n  background-color: ${({color}) => color};\r\n  border-radius: 5px;\r\n  \r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 0 4px;\r\n\r\n  p {\r\n    color: #fff;\r\n    font-weight: bold;\r\n    text-transform: uppercase;\r\n    padding: 4px 2px;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { useModal } from '../../hooks/useModal';\r\n\r\nimport { Container } from './styles';\r\n\r\nexport const ButtonAddCard: React.FC = () => {\r\n    const { toggleVisibility } = useModal();\r\n\r\n    const handleOpenModal = () => {\r\n        toggleVisibility(undefined)\r\n    }\r\n\r\n  return (\r\n    <Container onClick={handleOpenModal}>\r\n        <strong>+ Add Card</strong>\r\n    </Container>\r\n  );\r\n}","import styled from \"styled-components\";\r\nimport { SCREEN_BREAKPOINTS } from \"../../constants/breakpoints\";\r\n\r\nexport const Container = styled.div` \r\n    width: fit-content;\r\n    padding: 5px 15px;\r\n    margin: 2rem 0 0 10rem;\r\n    border-radius: 5px;\r\n    background: ${({ theme }) => theme.colors.primary};\r\n    justify-items: center;\r\n    align-items: center;\r\n    display: flex;\r\n    -webkit-box-shadow: 2px 5px 10px 2px rgba(0,0,0,0.11); \r\n    box-shadow: 2px 5px 10px 2px rgba(0,0,0,0.11);\r\n    cursor: pointer;\r\n    strong{\r\n        margin: 0 auto;\r\n        color: ${({ theme }) => theme.colors.components_background};\r\n        font-size: 1.5rem;\r\n        font-weight: bold;\r\n    }\r\n\r\n    @media(max-width: ${SCREEN_BREAKPOINTS.EXTRA_LARGE}px) {\r\n      margin: 2rem 2rem 0 2rem;\r\n    }\r\n\r\n    @media(max-width: ${SCREEN_BREAKPOINTS.MEDIUM}px) {\r\n      width: calc(100% - 4rem);\r\n      top: 90vh;\r\n      left:80vw;\r\n\r\n      strong{\r\n        font-size: 1.5rem;\r\n      }\r\n    }\r\n`","import React, { useContext, useEffect, useState } from 'react';\r\n\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport { ThemeContext } from 'styled-components';\r\n\r\nimport getCategoryBackgroundColor from '../../helpers/getCategoryBackgroundColor';\r\nimport { useModal } from '../../hooks/useModal';\r\nimport { useAppSelector } from '../../hooks/useRedux';\r\nimport ICard from '../../interfaces/ICard';\r\nimport Badge from '../Badge';\r\n\r\nimport { CardBorder, CardBottom, CardContainer } from './styles';\r\nimport { Category } from 'emoji-mart';\r\n\r\ninterface CardProps {\r\n  card: ICard;\r\n  index: number;\r\n}\r\n\r\nconst Card: React.FC<CardProps> = ({ card, index }) => {\r\n  const theme = useContext(ThemeContext);\r\n\r\n  const [backgroundColor, setBackgroundColor] = useState<string>(theme.colors.primary);\r\n\r\n  const { toggleVisibility } = useModal();\r\n\r\n  useEffect(() => {\r\n    if (card) {\r\n      const categoryColor = getCategoryBackgroundColor(theme, card.category);\r\n      setBackgroundColor(categoryColor);\r\n    }\r\n  }, [card]);\r\n\r\n  return (\r\n    <Draggable draggableId={card.id} index={index}>\r\n      {provided => (\r\n        <CardContainer\r\n          onClick={() => toggleVisibility(card)}\r\n          hideCard={card.hidden}\r\n          ref={provided.innerRef}\r\n          {...provided.draggableProps}\r\n          {...provided.dragHandleProps}\r\n        >\r\n          <CardBorder color={backgroundColor} />\r\n          <h3>{card.title}</h3>\r\n          <CardBottom>\r\n            <Badge value={card.category} valuetype='CaseID' />\r\n            <Badge value={card.status} valuetype='CaseStatus' />\r\n            <Badge value={card.status} valuetype='AssignedTo' />\r\n          </CardBottom>\r\n        </CardContainer>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import styled from \"styled-components\";\r\n\r\ninterface ColorProps {\r\n  color: string;\r\n}\r\n\r\ninterface CardContainerProps {\r\n  hideCard: boolean;\r\n}\r\n\r\nexport const CardContainer = styled.div<CardContainerProps>`\r\n  background-color: ${({ theme }) => theme.colors.components_background};\r\n  opacity:  ${({ hideCard }) => hideCard ? 0.2 : 1};\r\n\r\n  width: 300px;\r\n  height: 110px;\r\n  margin: 0.7rem 0;\r\n  padding: 1.2rem 1rem 0.7rem 1rem;\r\n\r\n  border-radius: 5px;\r\n  border: 1px solid ${({theme}) => theme.colors.border};\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n\r\n  position: relative;\r\n\r\n  h3 {\r\n    text-overflow: ellipsis;\r\n    width: 100%;\r\n    overflow: hidden;\r\n    display: -webkit-box;\r\n    -webkit-line-clamp: 2;\r\n    -webkit-box-orient: vertical;\r\n  }\r\n`\r\n\r\nexport const CardBorder = styled.div<ColorProps>`\r\n  cursor: grab;\r\n  position: absolute;\r\n  width: calc(100% + 2px);\r\n  top: -1px;\r\n  left: -1px;\r\n  border-top-left-radius: 5px;\r\n  border-top-right-radius: 5px;\r\n  height: 10px;\r\n  background-color: ${({color}) => color};\r\n\r\n  &:before{\r\n    content: '';\r\n    height: 0.5px;\r\n    width: 80px;\r\n    background-color: #ffffff;\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, 0);\r\n  }\r\n`\r\n\r\nexport const CardBottom = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: space-between ;\r\n  width: 100%;\r\n\r\n  p {\r\n    cursor: pointer !important;\r\n  }\r\n`","import React from 'react';\r\n\r\nimport { Droppable } from 'react-beautiful-dnd';\r\n\r\nimport ICard from '../../interfaces/ICard';\r\nimport IStatus from '../../interfaces/IStatus';\r\nimport Card from '../Card';\r\nimport { CardsList, Container } from './styles';\r\n\r\ninterface ColumnProps {\r\n  status: IStatus;\r\n  cards: ICard[];\r\n  index: number;\r\n}\r\n\r\nconst Column: React.FC<ColumnProps> = ({ status, cards, index }) => {\r\n  return (\r\n    <Container isFirstColumn={index === 0}>\r\n      <h2>{status}</h2>\r\n      <Droppable droppableId={status}>\r\n        {(provided) => (\r\n          <CardsList ref={provided.innerRef} {...provided.droppableProps}>\r\n            {cards\r\n              .filter(card => card.status === status)\r\n              .map((card, index) => <Card key={card.id} card={card} index={index}/>)\r\n            }\r\n            {provided.placeholder}\r\n        </CardsList>\r\n        )}\r\n        </Droppable>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Column;","import styled from \"styled-components\";\r\nimport { SCREEN_BREAKPOINTS } from \"../../constants/breakpoints\";\r\n\r\ninterface ContainerProps{\r\n  isFirstColumn: boolean\r\n}\r\n\r\nexport const Container = styled.div<ContainerProps>`\r\n  width: 300px;\r\n\r\n  ${({ isFirstColumn }) => isFirstColumn && `\r\n    margin-left: 10rem;\r\n  `}\r\n\r\n  @media(max-width: ${SCREEN_BREAKPOINTS.EXTRA_LARGE}px) {\r\n    ${({ isFirstColumn }) => isFirstColumn && `\r\n    margin-left: 2rem;\r\n    `}\r\n  }\r\n`\r\n\r\nexport const CardsList = styled.div`\r\n  margin-top: 1rem;\r\n  height: 50vh;\r\n  width: 300px;\r\n  overflow-y: auto;\r\n  overflow-x: hidden;\r\n`;","import React, { useContext, useEffect, useState } from 'react';\r\nimport KanbanBoardTheme from './KanbanBoardTheme';\r\nimport Switch from 'react-switch';\r\nimport { Flex, Icon } from '@pega/cosmos-react-core';\r\nimport { ThemeContext } from 'styled-components';\r\nimport { DragDropContext, DropResult } from 'react-beautiful-dnd';\r\nimport { ThemeProvider } from 'styled-components';\r\nimport { DefaultTheme } from 'styled-components';\r\nimport ICard from '../../interfaces/ICard';\r\nimport IStatus from '../../interfaces/IStatus';\r\nimport IColumn from '../../interfaces/IColumn';\r\nimport ICategory from '../../interfaces/ICategory';\r\nimport Column from '../Column';\r\nimport Modal from '../Modal';\r\nimport SearchInput from '../SearchInput';\r\nimport getCategoryBackgroundColor from '../../helpers/getCategoryBackgroundColor';\r\nimport { useModal } from '../../hooks/useModal';\r\nimport { useAppDispatch, useAppSelector } from '../../hooks/useRedux';\r\nimport {\r\n  Container,\r\n  FiltersContainer,\r\n  Header,\r\n  LabelContainer,\r\n  SearchAndFilters,\r\n  StatusesColumnsContainer,\r\n  SwitchIcon,\r\n  TitleAndSwitch\r\n} from './styles';\r\nimport { setColumns } from '../../store/slices/columns.slice';\r\nimport { filterCards, setCards } from '../../store/slices/cards.slice';\r\nimport { ButtonAddCard } from '../ButtonAddCard';\r\n\r\ninterface KanbanBoardProps {\r\n  toggleTheme: () => void;\r\n}\r\n\r\nconst KanbanBoard: React.FC<KanbanBoardProps> = ({ toggleTheme }) => {\r\n  const { colors, title } = useContext(ThemeContext);\r\n  const theme = useContext(ThemeContext);\r\n\r\n  const { cards } = useAppSelector(state => state.cards);\r\n  const { columns } = useAppSelector(state => state.columns);\r\n  const { visible } = useModal();\r\n\r\n  const [selectedCategories, setSelectedCategories] = useState<Array<ICategory>>(\r\n    Object.values(ICategory)\r\n  );\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const onDragEnd = (result: DropResult) => {\r\n    const { destination, source, draggableId } = result;\r\n\r\n    if (!destination) return;\r\n\r\n    if (destination.droppableId === source.droppableId && destination.index === source.index)\r\n      return;\r\n\r\n    const updatedCards: Array<ICard> = cards.map(card => {\r\n      if (card.id === draggableId) {\r\n        const status: IStatus = destination.droppableId as IStatus;\r\n\r\n        return {\r\n          ...card,\r\n          status\r\n        };\r\n      } else return card;\r\n    });\r\n\r\n    const sourceColumn: IColumn = columns.find(\r\n      column => column.id === source.droppableId\r\n    ) as IColumn;\r\n    const destinationColumn: IColumn = columns.find(\r\n      column => column.id === destination.droppableId\r\n    ) as IColumn;\r\n\r\n    // Moving cards in the same column\r\n    if (sourceColumn === destinationColumn) {\r\n      const newColumnCardsIds = [...destinationColumn.cardsIds];\r\n\r\n      newColumnCardsIds.splice(source.index, 1);\r\n      newColumnCardsIds.splice(destination.index, 0, draggableId);\r\n\r\n      const newDestinationColumn: IColumn = {\r\n        ...destinationColumn,\r\n        cardsIds: newColumnCardsIds\r\n      };\r\n\r\n      const updatedColumns: Array<IColumn> = columns.map(column => {\r\n        if (column.id === newDestinationColumn.id) return newDestinationColumn;\r\n        else return column;\r\n      });\r\n\r\n      dispatch(setColumns(updatedColumns));\r\n      dispatch(setCards(updatedCards));\r\n\r\n      return;\r\n    }\r\n\r\n    // Moving cards from one column to another\r\n    const sourceCardsIds = [...sourceColumn.cardsIds];\r\n    sourceCardsIds.splice(source.index, 1);\r\n\r\n    const newSourceColumn: IColumn = {\r\n      ...sourceColumn,\r\n      cardsIds: sourceCardsIds\r\n    };\r\n\r\n    const destinationCardsIds = [...destinationColumn.cardsIds];\r\n    destinationCardsIds.splice(destination.index, 0, draggableId);\r\n\r\n    const newDestinationColumn: IColumn = {\r\n      ...destinationColumn,\r\n      cardsIds: destinationCardsIds\r\n    };\r\n\r\n    const updatedColumns: Array<IColumn> = columns.map(column => {\r\n      if (column.id === newDestinationColumn.id) return newDestinationColumn;\r\n      if (column.id === newSourceColumn.id) return newSourceColumn;\r\n      else return column;\r\n    });\r\n\r\n    dispatch(setColumns(updatedColumns));\r\n    dispatch(setCards(updatedCards));\r\n  };\r\n\r\n  const handleChangeCheckbox = (category: ICategory) => {\r\n    const foundCategory = selectedCategories.find(item => item === category);\r\n\r\n    if (foundCategory) {\r\n      const categoriesWithItemRemoved = selectedCategories.filter(item => item !== category);\r\n      setSelectedCategories(categoriesWithItemRemoved);\r\n      return;\r\n    }\r\n\r\n    setSelectedCategories([...selectedCategories, category]);\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(filterCards({ categories: selectedCategories }));\r\n  }, [selectedCategories]);\r\n\r\n  return (\r\n    <>\r\n      <ThemeProvider theme={theme as KanbanBoardTheme}>\r\n        <Container>\r\n          <Header>\r\n            <TitleAndSwitch>\r\n              <h1>\r\n                Scrum <span>Board</span>\r\n              </h1>\r\n\r\n              <Switch\r\n                onChange={toggleTheme}\r\n                checked={title === 'light'}\r\n                checkedIcon={<Icon style={{ height: 27, width: 27 }} name='sun-solid' />}\r\n                uncheckedIcon={<Icon style={{ height: 27, width: 27 }} name='moon-solid' />}\r\n                onColor={colors.placeholder}\r\n                offColor={colors.switch}\r\n              />\r\n            </TitleAndSwitch>\r\n            {/*     <SearchAndFilters>\r\n            <SearchInput/>\r\n            <FiltersContainer>\r\n              {Object.values(ICategory).map(category => (\r\n                <LabelContainer\r\n                  key={category}\r\n                  color={() => getCategoryBackgroundColor(theme, category)}\r\n                  onClick={() => handleChangeCheckbox(category)}\r\n                >\r\n                  <input\r\n                    type='checkbox'\r\n                    name={category}\r\n                    value={category}\r\n                    checked={selectedCategories.includes(category)}\r\n                    onChange={() => handleChangeCheckbox(category)}\r\n                  />\r\n                  <label>{category}</label>\r\n                </LabelContainer>\r\n              ))}\r\n          </FiltersContainer>\r\n              </SearchAndFilters> */}\r\n          </Header>\r\n\r\n          <StatusesColumnsContainer>\r\n            <DragDropContext onDragEnd={onDragEnd}>\r\n              {columns.map((column, index) => {\r\n                const cardsArray: Array<ICard> = [];\r\n\r\n                column.cardsIds.forEach(cardId => {\r\n                  const foundedCard = cards.find(card => card.id === cardId);\r\n                  if (foundedCard) cardsArray.push(foundedCard);\r\n                });\r\n\r\n                return (\r\n                  <Column key={column.id} index={index} status={column.id} cards={cardsArray} />\r\n                );\r\n              })}\r\n            </DragDropContext>\r\n          </StatusesColumnsContainer>\r\n          <ButtonAddCard />\r\n        </Container>\r\n        <Modal visible={visible} />\r\n      </ThemeProvider>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default KanbanBoard;\r\n","import styled from 'styled-components';\r\nimport { SCREEN_BREAKPOINTS } from '../../constants/breakpoints';\r\n\r\ninterface LabelContainerProps {\r\n  color: any;\r\n}\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  min-height: 100vh;\r\n  width: 100%;\r\n  padding: 0rem 0 0rem 0;\r\n  position: left;\r\n  justify-content: flex-start;\r\n  align-items: flex-end;\r\n\r\n  @media (max-width: ${SCREEN_BREAKPOINTS.EXTRA_LARGE}px) {\r\n    padding: 2rem 0 2rem 0;\r\n  }\r\n`;\r\n\r\nexport const SwitchIcon = styled.img`\r\n  margin: 4px;\r\n  height: 70%;\r\n  width: 70%;\r\n`;\r\n\r\nexport const StatusesColumnsContainer = styled.div`\r\n  padding-top: 4rem;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: flex-start;\r\n  justify-content: center;\r\n\r\n  gap: 1.5rem;\r\n  width: 100%;\r\n  overflow-x: auto;\r\n`;\r\n\r\nexport const Header = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 0 0rem;\r\n\r\n  @media (max-width: ${SCREEN_BREAKPOINTS.EXTRA_LARGE}px) {\r\n    flex-direction: column;\r\n\r\n    padding: 0 2rem;\r\n  }\r\n`;\r\n\r\nexport const FiltersContainer = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  flex-direction: row;\r\n  gap: 2rem;\r\n  padding-top: 1.5rem;\r\n`;\r\n\r\nexport const LabelContainer = styled.div<LabelContainerProps>`\r\n  padding: 5px;\r\n  background-color: ${({ color }) => color};\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n\r\n  label {\r\n    font-weight: bold;\r\n    color: #fff;\r\n    padding-left: 5px;\r\n    text-transform: uppercase;\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nexport const SearchAndFilters = styled.div`\r\n  width: auto;\r\n\r\n  @media (max-width: ${SCREEN_BREAKPOINTS.EXTRA_LARGE}px) {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nexport const TitleAndSwitch = styled.div`\r\n  @media (max-width: ${SCREEN_BREAKPOINTS.EXTRA_LARGE}px) {\r\n    Switch {\r\n    }\r\n    h1 {\r\n      padding-bottom: 0;\r\n    }\r\n  }\r\n`;\r\n","import React, { useContext, useEffect, useState } from 'react';\r\nimport { ThemeContext } from 'styled-components';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport getCategoryBackgroundColor from '../../helpers/getCategoryBackgroundColor';\r\nimport { useModal } from '../../hooks/useModal';\r\nimport { useAppDispatch } from '../../hooks/useRedux';\r\nimport ICategory from '../../interfaces/ICategory';\r\nimport IStatus from '../../interfaces/IStatus';\r\nimport { addCard, updateOneCard } from '../../store/slices/cards.slice';\r\nimport { updateColumns } from '../../store/slices/columns.slice';\r\nimport {\r\n  Container,\r\n  Input,\r\n  Button,\r\n  ModalContent,\r\n  MultilineInput,\r\n  CategoriesContainer,\r\n  LabelContainer,\r\n  ErrorMessage\r\n} from './styles';\r\n\r\ninterface ModalProps {\r\n  visible: boolean;\r\n}\r\n\r\nconst Modal: React.FC<ModalProps> = ({ visible }) => {\r\n  const { toggleVisibility, selectedCard } = useModal();\r\n  const theme = useContext(ThemeContext);\r\n\r\n  const [title, setTitle] = useState<string | undefined>(selectedCard?.title);\r\n  const [description, setDescription] = useState<string | undefined>(selectedCard?.description);\r\n  const [cardCategory, setCardCategory] = useState<ICategory>(\r\n    selectedCard?.category || ICategory.FEATURE\r\n  );\r\n  const [errorMessage, setErrorMessage] = useState<string | undefined>();\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    setTitle(selectedCard?.title);\r\n    setDescription(selectedCard?.description);\r\n    setCardCategory(selectedCard?.category || ICategory.FEATURE);\r\n  }, [selectedCard, visible]);\r\n\r\n  const handleSave = () => {\r\n    if (!title) {\r\n      setErrorMessage('The title field can´t be empty!');\r\n      return;\r\n    }\r\n\r\n    setErrorMessage(undefined);\r\n\r\n    if (!selectedCard?.id) {\r\n      const newCard = {\r\n        id: uuidv4(),\r\n        title,\r\n        description,\r\n        category: cardCategory,\r\n        status: IStatus.BACKLOG,\r\n        hidden: false\r\n      };\r\n      dispatch(addCard(newCard));\r\n      dispatch(updateColumns(newCard.id));\r\n      toggleVisibility(undefined);\r\n    }\r\n\r\n    const updatedCard = {\r\n      ...selectedCard,\r\n      title,\r\n      description,\r\n      category: cardCategory\r\n    };\r\n\r\n    dispatch(updateOneCard(updatedCard));\r\n    toggleVisibility(undefined);\r\n  };\r\n\r\n  const handleCloseModal = () => {\r\n    toggleVisibility(undefined);\r\n    setTitle(undefined);\r\n    setDescription(undefined);\r\n    setCardCategory(ICategory.FEATURE);\r\n    setErrorMessage(undefined);\r\n  };\r\n\r\n  if (!visible) return null;\r\n\r\n  return (\r\n    <Container>\r\n      <ModalContent>\r\n        <img src='closeicon' alt='Gray X icon' onClick={handleCloseModal} />\r\n\r\n        <h3>Title</h3>\r\n        <Input\r\n          value={title}\r\n          onChange={e => setTitle(e.target.value)}\r\n          minLength={1}\r\n          maxLength={50}\r\n          containsError={!!errorMessage}\r\n        />\r\n        {errorMessage && <ErrorMessage>{errorMessage}</ErrorMessage>}\r\n\r\n        <h3>Description</h3>\r\n        <MultilineInput\r\n          aria-multiline\r\n          value={description}\r\n          onChange={e => setDescription(e.target.value)}\r\n          maxLength={300}\r\n        />\r\n\r\n        <CategoriesContainer>\r\n          {Object.values(ICategory).map(category => (\r\n            <LabelContainer color={() => getCategoryBackgroundColor(theme, category)}>\r\n              <label>\r\n                <input\r\n                  type='radio'\r\n                  name={category}\r\n                  value={category}\r\n                  checked={cardCategory === category}\r\n                  onChange={e => setCardCategory(e.currentTarget.value as ICategory)}\r\n                />\r\n                <i>{category}</i>\r\n              </label>\r\n            </LabelContainer>\r\n          ))}\r\n        </CategoriesContainer>\r\n        <Button type='button' onClick={handleSave}>\r\n          {selectedCard ? 'Save Changes' : 'Add card to Open'}\r\n        </Button>\r\n      </ModalContent>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import styled from \"styled-components\";\r\nimport { SCREEN_BREAKPOINTS } from \"../../constants/breakpoints\";\r\n\r\ninterface LabelContainerProps {\r\n  color: any;\r\n}\r\n\r\ninterface ErrorProps {\r\n  containsError?: boolean\r\n}\r\n\r\nexport const Container = styled.div`\r\n  position: fixed;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  top: 0;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background: rgba(0, 0, 0, 0.5);\r\n`\r\n\r\nexport const ModalContent = styled.div`\r\n  padding: 3rem;\r\n  min-height: 400px;\r\n  width: 600px;\r\n  background-color: ${({theme}) => theme.colors.components_background};\r\n  border-radius: 5px;\r\n  position: relative;\r\n\r\n  img {\r\n    height: 15px;\r\n    width: 15px;\r\n    position: absolute;\r\n    right: 2rem;\r\n    top: 2rem;\r\n    cursor: pointer;\r\n  }\r\n\r\n  @media(max-width: ${SCREEN_BREAKPOINTS.SMALL}px) {\r\n    padding: 2rem;\r\n    width: 80VW;\r\n\r\n    img{\r\n      right: 1rem;\r\n      top: 1rem;\r\n    }\r\n  }\r\n`\r\n\r\nexport const Input = styled.input<ErrorProps>`\r\n  width: 100%;\r\n  height: 2rem;\r\n  margin: 0.5rem 0 ${({ containsError }) => containsError ? 0 : '2rem'} 0;\r\n  border-radius: 5px;\r\n  padding: 0.3rem;\r\n`\r\n\r\nexport const MultilineInput = styled.textarea<ErrorProps>`\r\n  width: 100%;\r\n  height: 4rem;\r\n  margin: 0.5rem 0 ${({ containsError }) => containsError ? 0 : '2rem'} 0;\r\n  padding: 0.3rem;\r\n  border-radius: 5px;\r\n`\r\n\r\nexport const CategoriesContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n  gap: 1rem;\r\n\r\n  @media(max-width: ${SCREEN_BREAKPOINTS.SMALL}px) {\r\n    gap: 10px;\r\n  }\r\n`\r\n\r\nexport const Button = styled.button`\r\n  margin-top: 2rem;\r\n  background-color: ${({theme}) => theme.colors.primary};\r\n  color: #fff;\r\n  font-weight: bold;\r\n  padding: 8px 0;\r\n  border-radius: 5px;\r\n  border: none;\r\n  cursor: pointer;\r\n  width: 100%;\r\n`\r\n\r\nexport const LabelContainer = styled.div<LabelContainerProps>`\r\n  padding: 5px;\r\n  background-color: ${({color}) => color};\r\n  border-radius: 5px;\r\n\r\n  label{\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    justify-content:space-between ;\r\n  }\r\n\r\n  i{\r\n    font-style: normal;\r\n    font-weight: bold;\r\n    color: #fff;\r\n    padding-left: 5px;\r\n    text-transform: uppercase;\r\n    cursor: pointer;\r\n  }\r\n`\r\n\r\nexport const ErrorMessage = styled.p`\r\n  color: ${({theme}) => theme.colors.bug};\r\n  padding: 0.5rem 0 1.5rem 0;\r\n`","import { DefaultTheme } from \"styled-components\";\r\nimport ICategory from \"../interfaces/ICategory\";\r\n\r\nconst getCategoryBackgroundColor = (theme: DefaultTheme, value: ICategory) => {\r\n  switch (value) {\r\n    case ICategory.BUG:\r\n      return theme.colors.bug;\r\n\r\n    case ICategory.FEATURE:\r\n      return theme.colors.feature;\r\n\r\n    case ICategory.INFRA:\r\n      return theme.colors.infra;\r\n\r\n    case ICategory.REFACTOR:\r\n      return theme.colors.refactor;\r\n\r\n    case ICategory.DEPLOY:\r\n      return theme.colors.deploy;\r\n\r\n    default:\r\n      return theme.colors.primary;\r\n  }\r\n}\r\n\r\nexport default getCategoryBackgroundColor;","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\nimport type { RootState, AppDispatch } from '../store'\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch: () => AppDispatch = useDispatch;\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector"],"names":[],"sourceRoot":""}