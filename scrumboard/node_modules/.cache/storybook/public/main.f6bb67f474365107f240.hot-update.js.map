{"version":3,"file":"main.f6bb67f474365107f240.hot-update.js","mappings":"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;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AApDA;AAsDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACxGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;;;;;;;;;;;;;;ACRA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;;;;;;;;;;;;;;;;;ACRA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfA;AAEA;AAEA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1EA;AAEA;AAEA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AAEA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;AC7CA;AACA;AAEA;AASA;AAAA;AAAA;AACA;AAAA;AAAA;AASA;AAAA;AAAA;AAGA;AAAA;AAAA;AAkBA;AAAA;AAAA;AAWA;AAAA;AAAA;AAKA;AAAA;AAAA;AAMA;AAAA;AAAA;;;;;;;;;;;;;;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;ACvBA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;ACxBA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://scrumboard/./src/components/Pega_Extensions_Scrumboard/App.tsx","webpack://scrumboard/./src/components/Pega_Extensions_Scrumboard/components/Badge/index.tsx","webpack://scrumboard/./src/components/Pega_Extensions_Scrumboard/components/Badge/styles.ts","webpack://scrumboard/./src/components/Pega_Extensions_Scrumboard/components/ButtonAddCard/index.tsx","webpack://scrumboard/./src/components/Pega_Extensions_Scrumboard/components/ButtonAddCard/styles.ts","webpack://scrumboard/./src/components/Pega_Extensions_Scrumboard/components/Card/index.tsx","webpack://scrumboard/./src/components/Pega_Extensions_Scrumboard/components/Card/styles.ts","webpack://scrumboard/./src/components/Pega_Extensions_Scrumboard/components/Column/index.tsx","webpack://scrumboard/./src/components/Pega_Extensions_Scrumboard/components/Column/styles.ts","webpack://scrumboard/./src/components/Pega_Extensions_Scrumboard/components/KanbanBoard/index.tsx","webpack://scrumboard/./src/components/Pega_Extensions_Scrumboard/components/KanbanBoard/styles.ts","webpack://scrumboard/./src/components/Pega_Extensions_Scrumboard/components/Modal/index.tsx","webpack://scrumboard/./src/components/Pega_Extensions_Scrumboard/components/Modal/styles.ts","webpack://scrumboard/./src/components/Pega_Extensions_Scrumboard/constants/breakpoints.ts","webpack://scrumboard/./src/components/Pega_Extensions_Scrumboard/data/cards.ts","webpack://scrumboard/./src/components/Pega_Extensions_Scrumboard/data/columns.ts","webpack://scrumboard/./src/components/Pega_Extensions_Scrumboard/helpers/getCategoryBackgroundColor.ts","webpack://scrumboard/./src/components/Pega_Extensions_Scrumboard/hooks/useModal.tsx","webpack://scrumboard/./src/components/Pega_Extensions_Scrumboard/hooks/useRedux.ts","webpack://scrumboard/./src/components/Pega_Extensions_Scrumboard/index.jsx","webpack://scrumboard/./src/components/Pega_Extensions_Scrumboard/interfaces/ICategory.ts","webpack://scrumboard/./src/components/Pega_Extensions_Scrumboard/interfaces/IStatus.ts","webpack://scrumboard/./src/components/Pega_Extensions_Scrumboard/store/index.tsx","webpack://scrumboard/./src/components/Pega_Extensions_Scrumboard/store/slices/cards.slice.ts","webpack://scrumboard/./src/components/Pega_Extensions_Scrumboard/store/slices/columns.slice.ts","webpack://scrumboard/./src/components/Pega_Extensions_Scrumboard/styles/global.ts","webpack://scrumboard/./src/components/Pega_Extensions_Scrumboard/styles/themes/dark.ts","webpack://scrumboard/./src/components/Pega_Extensions_Scrumboard/styles/themes/light.ts","webpack://scrumboard/./src/components/Pega_Extensions_Scrumboard/styles.js"],"sourcesContent":["import { useState } from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { ThemeProvider } from 'styled-components';\r\nimport { DefaultTheme } from 'styled-components';\r\n\r\nimport KanbanBoard from './components/KanbanBoard/index';\r\nimport { ModalProvider } from './hooks/useModal';\r\nimport store from './store';\r\nimport GlobalStyle from './styles/global';\r\nimport darkTheme from './styles/themes/dark';\r\nimport lightTheme from './styles/themes/light';\r\n\r\nfunction App() {\r\n  const [theme, setTheme] = useState(darkTheme);\r\n\r\n  const toggleTheme = () => {\r\n    setTheme(theme.title === 'light' ? darkTheme : lightTheme);\r\n  };\r\n\r\n  return (\r\n    <Provider store={store}>\r\n      <ThemeProvider theme={theme as DefaultTheme}>\r\n        <ModalProvider>\r\n          <div className='App'>\r\n            <GlobalStyle />\r\n            <KanbanBoard toggleTheme={toggleTheme} />\r\n          </div>\r\n        </ModalProvider>\r\n      </ThemeProvider>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React, { useContext, useEffect, useState } from 'react';\r\nimport { ThemeContext } from 'styled-components';\r\nimport getCategoryBackgroundColor from '../../helpers/getCategoryBackgroundColor';\r\n\r\nimport ICategory from '../../interfaces/ICategory';\r\nimport { BadgeContainer } from './styles';\r\n\r\ninterface BadgeProps {\r\n  category: ICategory\r\n}\r\n\r\nconst Badge: React.FC<BadgeProps> = ({ category }) => {\r\n  const theme = useContext(ThemeContext); \r\n\r\n  const [color, setColor] = useState<string>(theme.colors.primary);\r\n\r\n  useEffect(() => {\r\n    if (category) {\r\n      const categoryColor = getCategoryBackgroundColor(theme, category);\r\n      setColor(categoryColor);\r\n    }\r\n  }, [category])\r\n\r\n  return ( \r\n    <BadgeContainer color={color}>\r\n      <p>{category}</p>\r\n    </BadgeContainer>\r\n  )\r\n}\r\n\r\nexport default Badge;","import styled from 'styled-components';\r\n\r\ninterface BadgeContainerProps{\r\n  color: string;\r\n}\r\n\r\nexport const BadgeContainer = styled.div<BadgeContainerProps>`\r\n  background-color: ${({color}) => color};\r\n  border-radius: 5px;\r\n  \r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 0 4px;\r\n\r\n  p {\r\n    color: #fff;\r\n    font-weight: bold;\r\n    text-transform: uppercase;\r\n    padding: 4px 2px;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { useModal } from '../../hooks/useModal';\r\n\r\nimport { Container } from './styles';\r\n\r\nexport const ButtonAddCard: React.FC = () => {\r\n    const { toggleVisibility } = useModal();\r\n\r\n    const handleOpenModal = () => {\r\n        toggleVisibility(undefined)\r\n    }\r\n\r\n  return (\r\n    <Container onClick={handleOpenModal}>\r\n        <strong>+ Add Card</strong>\r\n    </Container>\r\n  );\r\n}","import styled from \"styled-components\";\r\nimport { SCREEN_BREAKPOINTS } from \"../../constants/breakpoints\";\r\n\r\nexport const Container = styled.div` \r\n    width: fit-content;\r\n    padding: 5px 15px;\r\n    margin: 2rem 0 0 10rem;\r\n    border-radius: 5px;\r\n    background: ${({ theme }) => theme.colors.primary};\r\n    justify-items: center;\r\n    align-items: center;\r\n    display: flex;\r\n    -webkit-box-shadow: 2px 5px 10px 2px rgba(0,0,0,0.11); \r\n    box-shadow: 2px 5px 10px 2px rgba(0,0,0,0.11);\r\n    cursor: pointer;\r\n    strong{\r\n        margin: 0 auto;\r\n        color: ${({ theme }) => theme.colors.components_background};\r\n        font-size: 1.5rem;\r\n        font-weight: bold;\r\n    }\r\n\r\n    @media(max-width: ${SCREEN_BREAKPOINTS.EXTRA_LARGE}px) {\r\n      margin: 2rem 2rem 0 2rem;\r\n    }\r\n\r\n    @media(max-width: ${SCREEN_BREAKPOINTS.MEDIUM}px) {\r\n      width: calc(100% - 4rem);\r\n      top: 90vh;\r\n      left:80vw;\r\n\r\n      strong{\r\n        font-size: 1.5rem;\r\n      }\r\n    }\r\n`","import React, { useContext, useEffect, useState } from 'react';\r\n\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport { ThemeContext } from 'styled-components';\r\n\r\nimport getCategoryBackgroundColor from '../../helpers/getCategoryBackgroundColor';\r\nimport { useModal } from '../../hooks/useModal';\r\nimport { useAppSelector } from '../../hooks/useRedux';\r\nimport ICard from '../../interfaces/ICard';\r\nimport Badge from '../Badge';\r\n\r\nimport { CardBorder, CardBottom, CardContainer } from './styles';\r\n\r\ninterface CardProps {\r\n  card: ICard;\r\n  index: number;\r\n}\r\n\r\nconst Card: React.FC<CardProps> = ({ card, index }) => {\r\n  const theme = useContext(ThemeContext); \r\n\r\n  const [backgroundColor, setBackgroundColor] = useState<string>(theme.colors.primary);\r\n\r\n  const { toggleVisibility } = useModal();\r\n\r\n  useEffect(() => {\r\n    if (card) {\r\n      const categoryColor = getCategoryBackgroundColor(theme, card.category);\r\n      setBackgroundColor(categoryColor);\r\n    }\r\n  }, [card])\r\n\r\n  return (\r\n    <Draggable draggableId={card.id} index={index}>\r\n      {provided => (\r\n        <CardContainer \r\n          onClick={() => toggleVisibility(card)} \r\n          hideCard={card.hidden}\r\n          ref={provided.innerRef} \r\n          {...provided.draggableProps} \r\n          {...provided.dragHandleProps}\r\n        >\r\n          <CardBorder color={backgroundColor}/> \r\n          <h3>{card.title}</h3>\r\n          <CardBottom>\r\n            <Badge category={card.category}/>\r\n            <p>+ View More</p>\r\n          </CardBottom>\r\n        </CardContainer>\r\n      )}\r\n    </Draggable>\r\n  )\r\n}\r\n\r\nexport default Card;","import styled from \"styled-components\";\r\n\r\ninterface ColorProps {\r\n  color: string;\r\n}\r\n\r\ninterface CardContainerProps {\r\n  hideCard: boolean;\r\n}\r\n\r\nexport const CardContainer = styled.div<CardContainerProps>`\r\n  background-color: ${({ theme }) => theme.colors.components_background};\r\n  opacity:  ${({ hideCard }) => hideCard ? 0.2 : 1};\r\n\r\n  width: 300px;\r\n  height: 110px;\r\n  margin: 0.7rem 0;\r\n  padding: 1.2rem 1rem 0.7rem 1rem;\r\n\r\n  border-radius: 5px;\r\n  border: 1px solid ${({theme}) => theme.colors.border};\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n\r\n  position: relative;\r\n\r\n  h3 {\r\n    text-overflow: ellipsis;\r\n    width: 100%;\r\n    overflow: hidden;\r\n    display: -webkit-box;\r\n    -webkit-line-clamp: 2;\r\n    -webkit-box-orient: vertical;\r\n  }\r\n`\r\n\r\nexport const CardBorder = styled.div<ColorProps>`\r\n  cursor: grab;\r\n  position: absolute;\r\n  width: calc(100% + 2px);\r\n  top: -1px;\r\n  left: -1px;\r\n  border-top-left-radius: 5px;\r\n  border-top-right-radius: 5px;\r\n  height: 10px;\r\n  background-color: ${({color}) => color};\r\n\r\n  &:before{\r\n    content: '';\r\n    height: 0.5px;\r\n    width: 80px;\r\n    background-color: #ffffff;\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, 0);\r\n  }\r\n`\r\n\r\nexport const CardBottom = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: space-between ;\r\n  width: 100%;\r\n\r\n  p {\r\n    cursor: pointer !important;\r\n  }\r\n`","import React from 'react';\r\n\r\nimport { Droppable } from 'react-beautiful-dnd';\r\n\r\nimport ICard from '../../interfaces/ICard';\r\nimport IStatus from '../../interfaces/IStatus';\r\nimport Card from '../Card';\r\nimport { CardsList, Container } from './styles';\r\n\r\ninterface ColumnProps {\r\n  status: IStatus;\r\n  cards: ICard[];\r\n  index: number;\r\n}\r\n\r\nconst Column: React.FC<ColumnProps> = ({ status, cards, index }) => {\r\n  return (\r\n    <Container isFirstColumn={index === 0}>\r\n      <h2>{status}</h2>\r\n      <Droppable droppableId={status}>\r\n        {(provided) => (\r\n          <CardsList ref={provided.innerRef} {...provided.droppableProps}>\r\n            {cards\r\n              .filter(card => card.status === status)\r\n              .map((card, index) => <Card key={card.id} card={card} index={index}/>)\r\n            }\r\n            {provided.placeholder}\r\n        </CardsList>\r\n        )}\r\n        </Droppable>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Column;","import styled from \"styled-components\";\r\nimport { SCREEN_BREAKPOINTS } from \"../../constants/breakpoints\";\r\n\r\ninterface ContainerProps{\r\n  isFirstColumn: boolean\r\n}\r\n\r\nexport const Container = styled.div<ContainerProps>`\r\n  width: 300px;\r\n\r\n  ${({ isFirstColumn }) => isFirstColumn && `\r\n    margin-left: 10rem;\r\n  `}\r\n\r\n  @media(max-width: ${SCREEN_BREAKPOINTS.EXTRA_LARGE}px) {\r\n    ${({ isFirstColumn }) => isFirstColumn && `\r\n    margin-left: 2rem;\r\n    `}\r\n  }\r\n`\r\n\r\nexport const CardsList = styled.div`\r\n  margin-top: 1rem;\r\n  height: 50vh;\r\n  width: 300px;\r\n  overflow-y: auto;\r\n  overflow-x: hidden;\r\n`;","import React, { useContext, useEffect, useState } from 'react';\r\n\r\nimport Switch from 'react-switch';\r\nimport { ThemeContext } from 'styled-components';\r\nimport { DragDropContext, DropResult } from 'react-beautiful-dnd';\r\n\r\nimport ICard from '../../interfaces/ICard';\r\nimport IStatus from '../../interfaces/IStatus';\r\nimport IColumn from '../../interfaces/IColumn';\r\nimport ICategory from '../../interfaces/ICategory';\r\nimport Column from '../Column';\r\nimport Modal from '../Modal';\r\nimport SearchInput from '../SearchInput';\r\nimport getCategoryBackgroundColor from '../../helpers/getCategoryBackgroundColor';\r\nimport { useModal } from '../../hooks/useModal';\r\nimport { useAppDispatch, useAppSelector } from '../../hooks/useRedux';\r\nimport {\r\n  Container,\r\n  FiltersContainer,\r\n  Header,\r\n  LabelContainer,\r\n  SearchAndFilters,\r\n  StatusesColumnsContainer,\r\n  SwitchIcon,\r\n  TitleAndSwitch\r\n} from './styles';\r\nimport { setColumns } from '../../store/slices/columns.slice';\r\nimport { filterCards, setCards } from '../../store/slices/cards.slice';\r\nimport { ButtonAddCard } from '../ButtonAddCard';\r\n\r\ninterface KanbanBoardProps {\r\n  toggleTheme: () => void;\r\n}\r\n\r\nconst KanbanBoard: React.FC<KanbanBoardProps> = ({ toggleTheme }) => {\r\n  const { colors, title } = useContext(ThemeContext);\r\n  const theme = useContext(ThemeContext);\r\n\r\n  const { cards } = useAppSelector(state => state.cards);\r\n  const { columns } = useAppSelector(state => state.columns);\r\n  const { visible } = useModal();\r\n\r\n  const [selectedCategories, setSelectedCategories] = useState<ICategory[]>(\r\n    Object.values(ICategory)\r\n  );\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const onDragEnd = (result: DropResult) => {\r\n    const { destination, source, draggableId } = result;\r\n\r\n    if (!destination) return;\r\n\r\n    if (destination.droppableId === source.droppableId && destination.index === source.index)\r\n      return;\r\n\r\n    const updatedCards: ICard[] = cards.map(card => {\r\n      if (card.id === draggableId) {\r\n        const status: IStatus = destination.droppableId as IStatus;\r\n\r\n        return {\r\n          ...card,\r\n          status\r\n        };\r\n      } else return card;\r\n    });\r\n\r\n    const sourceColumn: IColumn = columns.find(\r\n      column => column.id === source.droppableId\r\n    ) as IColumn;\r\n    const destinationColumn: IColumn = columns.find(\r\n      column => column.id === destination.droppableId\r\n    ) as IColumn;\r\n\r\n    //Moving cards in the same column\r\n    if (sourceColumn === destinationColumn) {\r\n      const newColumnCardsIds = [...destinationColumn.cardsIds];\r\n\r\n      newColumnCardsIds.splice(source.index, 1);\r\n      newColumnCardsIds.splice(destination.index, 0, draggableId);\r\n\r\n      const newDestinationColumn: IColumn = {\r\n        ...destinationColumn,\r\n        cardsIds: newColumnCardsIds\r\n      };\r\n\r\n      const updatedColumns: IColumn[] = columns.map(column => {\r\n        if (column.id === newDestinationColumn.id) return newDestinationColumn;\r\n        else return column;\r\n      });\r\n\r\n      dispatch(setColumns(updatedColumns));\r\n      dispatch(setCards(updatedCards));\r\n\r\n      return;\r\n    }\r\n\r\n    //Moving cards from one column to another\r\n    const sourceCardsIds = [...sourceColumn.cardsIds];\r\n    sourceCardsIds.splice(source.index, 1);\r\n\r\n    const newSourceColumn: IColumn = {\r\n      ...sourceColumn,\r\n      cardsIds: sourceCardsIds\r\n    };\r\n\r\n    const destinationCardsIds = [...destinationColumn.cardsIds];\r\n    destinationCardsIds.splice(destination.index, 0, draggableId);\r\n\r\n    const newDestinationColumn: IColumn = {\r\n      ...destinationColumn,\r\n      cardsIds: destinationCardsIds\r\n    };\r\n\r\n    const updatedColumns: IColumn[] = columns.map(column => {\r\n      if (column.id === newDestinationColumn.id) return newDestinationColumn;\r\n      if (column.id === newSourceColumn.id) return newSourceColumn;\r\n      else return column;\r\n    });\r\n\r\n    dispatch(setColumns(updatedColumns));\r\n    dispatch(setCards(updatedCards));\r\n  };\r\n\r\n  const handleChangeCheckbox = (category: ICategory) => {\r\n    const foundCategory = selectedCategories.find(item => item === category);\r\n\r\n    if (foundCategory) {\r\n      const categoriesWithItemRemoved = selectedCategories.filter(item => item !== category);\r\n      setSelectedCategories(categoriesWithItemRemoved);\r\n      return;\r\n    }\r\n\r\n    setSelectedCategories([...selectedCategories, category]);\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(filterCards({ categories: selectedCategories }));\r\n  }, [selectedCategories]);\r\n\r\n  return (\r\n    <>\r\n      <Container>\r\n        <Header>\r\n          <TitleAndSwitch>\r\n            <h1>\r\n              Scrum <span>Board</span>\r\n            </h1>\r\n            <Switch\r\n              onChange={toggleTheme}\r\n              checked={title === 'light'}\r\n              checkedIcon={<SwitchIcon src='sunu' alt='Sun' />}\r\n              uncheckedIcon={<SwitchIcon src='moonu' alt='Moon' />}\r\n              onColor={colors.primary}\r\n              offColor={colors.switch}\r\n            />\r\n          </TitleAndSwitch>\r\n          {/*     <SearchAndFilters>\r\n            <SearchInput/>\r\n            <FiltersContainer>\r\n              {Object.values(ICategory).map(category => (\r\n                <LabelContainer\r\n                  key={category}\r\n                  color={() => getCategoryBackgroundColor(theme, category)}\r\n                  onClick={() => handleChangeCheckbox(category)}\r\n                >\r\n                  <input\r\n                    type='checkbox'\r\n                    name={category}\r\n                    value={category}\r\n                    checked={selectedCategories.includes(category)}\r\n                    onChange={() => handleChangeCheckbox(category)}\r\n                  />\r\n                  <label>{category}</label>\r\n                </LabelContainer>\r\n              ))}\r\n          </FiltersContainer>\r\n              </SearchAndFilters> */}\r\n        </Header>\r\n\r\n        <StatusesColumnsContainer>\r\n          <DragDropContext onDragEnd={onDragEnd}>\r\n            {columns.map((column, index) => {\r\n              const cardsArray: ICard[] = [];\r\n\r\n              column.cardsIds.forEach(cardId => {\r\n                const foundedCard = cards.find(card => card.id === cardId);\r\n                if (foundedCard) cardsArray.push(foundedCard);\r\n              });\r\n\r\n              return <Column key={column.id} index={index} status={column.id} cards={cardsArray} />;\r\n            })}\r\n          </DragDropContext>\r\n        </StatusesColumnsContainer>\r\n        <ButtonAddCard />\r\n      </Container>\r\n      <Modal visible={visible} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default KanbanBoard;\r\n","import styled from 'styled-components';\r\nimport { SCREEN_BREAKPOINTS } from '../../constants/breakpoints';\r\n\r\ninterface LabelContainerProps {\r\n  color: any;\r\n}\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  min-height: 100vh;\r\n  width: 100%;\r\n  padding: 5rem 0 5rem 0;\r\n  position: relative;\r\n\r\n  @media (max-width: ${SCREEN_BREAKPOINTS.EXTRA_LARGE}px) {\r\n    padding: 2rem 0 2rem 0;\r\n  }\r\n`;\r\n\r\nexport const SwitchIcon = styled.img`\r\n  margin: 4px;\r\n  height: 70%;\r\n  width: 70%;\r\n`;\r\n\r\nexport const StatusesColumnsContainer = styled.div`\r\n  padding-top: 4rem;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: flex-start;\r\n  gap: 1.5rem;\r\n  max-width: 100vw;\r\n  overflow-x: auto;\r\n`;\r\n\r\nexport const Header = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: flex-start;\r\n  justify-content: space-between;\r\n  padding: 0 10rem;\r\n\r\n  @media (max-width: ${SCREEN_BREAKPOINTS.EXTRA_LARGE}px) {\r\n    flex-direction: column;\r\n    padding: 0 2rem;\r\n  }\r\n`;\r\n\r\nexport const FiltersContainer = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  flex-direction: row;\r\n  gap: 2rem;\r\n  padding-top: 1.5rem;\r\n`;\r\n\r\nexport const LabelContainer = styled.div<LabelContainerProps>`\r\n  padding: 5px;\r\n  background-color: ${({ color }) => color};\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n\r\n  label {\r\n    font-weight: bold;\r\n    color: #fff;\r\n    padding-left: 5px;\r\n    text-transform: uppercase;\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nexport const SearchAndFilters = styled.div`\r\n  width: auto;\r\n\r\n  @media (max-width: ${SCREEN_BREAKPOINTS.EXTRA_LARGE}px) {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nexport const TitleAndSwitch = styled.div`\r\n  @media (max-width: ${SCREEN_BREAKPOINTS.EXTRA_LARGE}px) {\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n\r\n    h1 {\r\n      padding-bottom: 0;\r\n    }\r\n  }\r\n`;\r\n","import React, { useContext, useEffect, useState } from 'react';\r\nimport { ThemeContext } from 'styled-components';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport getCategoryBackgroundColor from '../../helpers/getCategoryBackgroundColor';\r\nimport { useModal } from '../../hooks/useModal';\r\nimport { useAppDispatch } from '../../hooks/useRedux';\r\nimport ICategory from '../../interfaces/ICategory';\r\nimport IStatus from '../../interfaces/IStatus';\r\nimport { addCard, updateOneCard } from '../../store/slices/cards.slice';\r\nimport { updateColumns } from '../../store/slices/columns.slice';\r\nimport {\r\n  Container,\r\n  Input,\r\n  Button,\r\n  ModalContent,\r\n  MultilineInput,\r\n  CategoriesContainer,\r\n  LabelContainer,\r\n  ErrorMessage\r\n} from './styles';\r\n\r\ninterface ModalProps {\r\n  visible: boolean;\r\n}\r\n\r\nconst Modal: React.FC<ModalProps> = ({ visible }) => {\r\n  const { toggleVisibility, selectedCard } = useModal();\r\n  const theme = useContext(ThemeContext);\r\n\r\n  const [title, setTitle] = useState<string | undefined>(selectedCard?.title);\r\n  const [description, setDescription] = useState<string | undefined>(selectedCard?.description);\r\n  const [cardCategory, setCardCategory] = useState<ICategory>(\r\n    selectedCard?.category || ICategory.FEATURE\r\n  );\r\n  const [errorMessage, setErrorMessage] = useState<string | undefined>();\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    setTitle(selectedCard?.title);\r\n    setDescription(selectedCard?.description);\r\n    setCardCategory(selectedCard?.category || ICategory.FEATURE);\r\n  }, [selectedCard, visible]);\r\n\r\n  const handleSave = () => {\r\n    if (!title) {\r\n      setErrorMessage('The title field can´t be empty!');\r\n      return;\r\n    }\r\n\r\n    setErrorMessage(undefined);\r\n\r\n    if (!selectedCard?.id) {\r\n      const newCard = {\r\n        id: uuidv4(),\r\n        title,\r\n        description,\r\n        category: cardCategory,\r\n        status: IStatus.BACKLOG,\r\n        hidden: false\r\n      };\r\n      dispatch(addCard(newCard));\r\n      dispatch(updateColumns(newCard.id));\r\n      toggleVisibility(undefined);\r\n    }\r\n\r\n    const updatedCard = {\r\n      ...selectedCard,\r\n      title,\r\n      description,\r\n      category: cardCategory\r\n    };\r\n\r\n    dispatch(updateOneCard(updatedCard));\r\n    toggleVisibility(undefined);\r\n  };\r\n\r\n  const handleCloseModal = () => {\r\n    toggleVisibility(undefined);\r\n    setTitle(undefined);\r\n    setDescription(undefined);\r\n    setCardCategory(ICategory.FEATURE);\r\n    setErrorMessage(undefined);\r\n  };\r\n\r\n  if (!visible) return null;\r\n\r\n  return (\r\n    <Container>\r\n      <ModalContent>\r\n        <img src='closeicon' alt='Gray X icon' onClick={handleCloseModal} />\r\n\r\n        <h3>Title</h3>\r\n        <Input\r\n          value={title}\r\n          onChange={e => setTitle(e.target.value)}\r\n          minLength={1}\r\n          maxLength={50}\r\n          containsError={!!errorMessage}\r\n        />\r\n        {errorMessage && <ErrorMessage>{errorMessage}</ErrorMessage>}\r\n\r\n        <h3>Description</h3>\r\n        <MultilineInput\r\n          aria-multiline\r\n          value={description}\r\n          onChange={e => setDescription(e.target.value)}\r\n          maxLength={300}\r\n        />\r\n\r\n        <CategoriesContainer>\r\n          {Object.values(ICategory).map(category => (\r\n            <LabelContainer color={() => getCategoryBackgroundColor(theme, category)}>\r\n              <label>\r\n                <input\r\n                  type='radio'\r\n                  name={category}\r\n                  value={category}\r\n                  checked={cardCategory === category}\r\n                  onChange={e => setCardCategory(e.currentTarget.value as ICategory)}\r\n                />\r\n                <i>{category}</i>\r\n              </label>\r\n            </LabelContainer>\r\n          ))}\r\n        </CategoriesContainer>\r\n        <Button type='button' onClick={handleSave}>\r\n          {selectedCard ? 'Save Changes' : 'Add card to Open'}\r\n        </Button>\r\n      </ModalContent>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import styled from \"styled-components\";\r\nimport { SCREEN_BREAKPOINTS } from \"../../constants/breakpoints\";\r\n\r\ninterface LabelContainerProps {\r\n  color: any;\r\n}\r\n\r\ninterface ErrorProps {\r\n  containsError?: boolean\r\n}\r\n\r\nexport const Container = styled.div`\r\n  position: fixed;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  top: 0;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background: rgba(0, 0, 0, 0.5);\r\n`\r\n\r\nexport const ModalContent = styled.div`\r\n  padding: 3rem;\r\n  min-height: 400px;\r\n  width: 600px;\r\n  background-color: ${({theme}) => theme.colors.components_background};\r\n  border-radius: 5px;\r\n  position: relative;\r\n\r\n  img {\r\n    height: 15px;\r\n    width: 15px;\r\n    position: absolute;\r\n    right: 2rem;\r\n    top: 2rem;\r\n    cursor: pointer;\r\n  }\r\n\r\n  @media(max-width: ${SCREEN_BREAKPOINTS.SMALL}px) {\r\n    padding: 2rem;\r\n    width: 80VW;\r\n\r\n    img{\r\n      right: 1rem;\r\n      top: 1rem;\r\n    }\r\n  }\r\n`\r\n\r\nexport const Input = styled.input<ErrorProps>`\r\n  width: 100%;\r\n  height: 2rem;\r\n  margin: 0.5rem 0 ${({ containsError }) => containsError ? 0 : '2rem'} 0;\r\n  border-radius: 5px;\r\n  padding: 0.3rem;\r\n`\r\n\r\nexport const MultilineInput = styled.textarea<ErrorProps>`\r\n  width: 100%;\r\n  height: 4rem;\r\n  margin: 0.5rem 0 ${({ containsError }) => containsError ? 0 : '2rem'} 0;\r\n  padding: 0.3rem;\r\n  border-radius: 5px;\r\n`\r\n\r\nexport const CategoriesContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n  gap: 1rem;\r\n\r\n  @media(max-width: ${SCREEN_BREAKPOINTS.SMALL}px) {\r\n    gap: 10px;\r\n  }\r\n`\r\n\r\nexport const Button = styled.button`\r\n  margin-top: 2rem;\r\n  background-color: ${({theme}) => theme.colors.primary};\r\n  color: #fff;\r\n  font-weight: bold;\r\n  padding: 8px 0;\r\n  border-radius: 5px;\r\n  border: none;\r\n  cursor: pointer;\r\n  width: 100%;\r\n`\r\n\r\nexport const LabelContainer = styled.div<LabelContainerProps>`\r\n  padding: 5px;\r\n  background-color: ${({color}) => color};\r\n  border-radius: 5px;\r\n\r\n  label{\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    justify-content:space-between ;\r\n  }\r\n\r\n  i{\r\n    font-style: normal;\r\n    font-weight: bold;\r\n    color: #fff;\r\n    padding-left: 5px;\r\n    text-transform: uppercase;\r\n    cursor: pointer;\r\n  }\r\n`\r\n\r\nexport const ErrorMessage = styled.p`\r\n  color: ${({theme}) => theme.colors.bug};\r\n  padding: 0.5rem 0 1.5rem 0;\r\n`","export enum SCREEN_BREAKPOINTS {\r\n  'TINY' = 320,\r\n  'EXTRA_SMALL' = 481,\r\n  'SMALL' = 576,\r\n  'MEDIUM' = 769,\r\n  'LARGE' = 1025,\r\n  'EXTRA_LARGE' = 1200,\r\n}\r\n","import ICard from \"../interfaces/ICard\";\r\nimport ICategory from \"../interfaces/ICategory\";\r\nimport IStatus from \"../interfaces/IStatus\";\r\n\r\nconst mockCards: ICard[] = [\r\n  {\r\n    id: '2fab1909-0b9f-4783-976c-4ffecb805ac5',\r\n    category: ICategory.BUG,\r\n    title: 'Reset password button not working',\r\n    description: 'The button does not contain any feedback, when you click on it, it does nothing',\r\n    status: IStatus.DOING,\r\n    hidden: false\r\n  },\r\n \r\n  {\r\n    id: '74d031c0-59bb-4f4b-9910-71bb1c88c624',\r\n    category: ICategory.FEATURE,\r\n    title: 'Create landing page',\r\n    description: '',\r\n    status: IStatus.DONE,\r\n    hidden: false\r\n  },\r\n  {\r\n    id: 'a04170d8-5f03-4a97-bbd7-cbc9516d0840',\r\n    category: ICategory.REFACTOR,\r\n    title: 'Make the onDragEnd function more efficient',\r\n    description: '',\r\n    status: IStatus.TO_DO,\r\n    hidden: false\r\n  },\r\n  {\r\n    id: '29065b36-8873-4ccd-8c42-dcff14736650',\r\n    category: ICategory.DEPLOY,\r\n    title: 'Send first deploy to develop environment',\r\n    description: '',\r\n    status: IStatus.DONE,\r\n    hidden: false\r\n  },\r\n  {\r\n    id: '32eb3393-eddc-487a-abc3-1c199b86c4a2',\r\n    category: ICategory.FEATURE,\r\n    title: 'Create light and dark theme switch',\r\n    description: '',\r\n    status: IStatus.IN_REVIEW,\r\n    hidden: false\r\n  },\r\n]\r\n\r\nexport default mockCards;","import IColumn from \"../interfaces/IColumn\";\r\nimport IStatus from \"../interfaces/IStatus\";\r\n\r\nconst mockColumns: IColumn[] = [\r\n\r\n  {\r\n    id: IStatus.TO_DO,\r\n    title: 'Open',\r\n    cardsIds: ['a04170d8-5f03-4a97-bbd7-cbc9516d0840']\r\n  },\r\n  {\r\n    id: IStatus.DOING,\r\n    title: 'In progress',\r\n    cardsIds: ['2fab1909-0b9f-4783-976c-4ffecb805ac5']\r\n  },\r\n  {\r\n    id: IStatus.IN_REVIEW,\r\n    title: 'Verify',\r\n    cardsIds: ['32eb3393-eddc-487a-abc3-1c199b86c4a2']\r\n  },\r\n  {\r\n    id: IStatus.DONE,\r\n    title: 'Completed',\r\n    cardsIds: ['29065b36-8873-4ccd-8c42-dcff14736650', '74d031c0-59bb-4f4b-9910-71bb1c88c624']\r\n  }\r\n]\r\n\r\nexport default mockColumns;","import { DefaultTheme } from \"styled-components\";\r\nimport ICategory from \"../interfaces/ICategory\";\r\n\r\nconst getCategoryBackgroundColor = (theme: DefaultTheme, value: ICategory) => {\r\n  switch (value) {\r\n    case ICategory.BUG:\r\n      return theme.colors.bug;\r\n\r\n    case ICategory.FEATURE:\r\n      return theme.colors.feature;\r\n\r\n    case ICategory.INFRA:\r\n      return theme.colors.infra;\r\n\r\n    case ICategory.REFACTOR:\r\n      return theme.colors.refactor;\r\n\r\n    case ICategory.DEPLOY:\r\n      return theme.colors.deploy;\r\n\r\n    default:\r\n      return theme.colors.primary;\r\n  }\r\n}\r\n\r\nexport default getCategoryBackgroundColor;","import React, { createContext, ReactNode, useContext, useState } from 'react';\r\nimport ICard from '../interfaces/ICard';\r\n\r\ninterface ModalContextData {\r\n  visible: boolean;\r\n  toggleVisibility: (card: ICard | undefined) => void;\r\n  selectedCard: ICard | undefined;\r\n}\r\n\r\ninterface ModalProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nconst ModalContext = createContext<ModalContextData>({} as ModalContextData);\r\n\r\nconst ModalProvider: React.FC<ModalProviderProps> = ({ children }) => {\r\n  const [visible, setVisible] = useState<boolean>(false);\r\n  const [selectedCard, setSelectedCard] = useState<ICard | undefined>();\r\n\r\n  const toggleVisibility = (card: ICard | undefined) => {\r\n    if (card) setSelectedCard(card);\r\n    else setSelectedCard(undefined);\r\n    setVisible(!visible);\r\n  }\r\n\r\n  return (\r\n    <ModalContext.Provider value={{ visible, toggleVisibility, selectedCard }}>\r\n      {children}\r\n    </ModalContext.Provider>\r\n  );\r\n};\r\n\r\nfunction useModal(): ModalContextData {\r\n  const context = useContext(ModalContext);\r\n\r\n  if (!context) {\r\n    throw new Error('useModal must be used within a ModalProvider');\r\n  }\r\n\r\n  return context;\r\n}\r\n\r\nexport { ModalProvider, useModal };\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\nimport type { RootState, AppDispatch } from '../store'\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch: () => AppDispatch = useDispatch;\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","/* eslint-disable no-nested-ternary */\nimport { Fragment, useEffect, useState } from 'react';\nimport { DateTimeDisplay, Card, CardHeader, CardContent, Flex } from '@pega/cosmos-react-core';\nimport PropTypes from 'prop-types';\nimport App from './App';\n\n// includes in bundle\nimport Operator from './Operator.jsx';\n\nimport StyledPegaExtensionsScrumboardWrapper from './styles';\n\n// Duplicated runtime code from Constellation Design System Component\n\n// props passed in combination of props from property panel (config.json) and run time props from Constellation\n// any default values in config.pros should be set in defaultProps at bottom of this file\nexport default function PegaExtensionsScrumboard(props) {\n  const {\n    getPConnect,\n    title,\n    label,\n    createLabel,\n    updateLabel,\n    createOperator,\n    updateOperator,\n    createDateTime,\n    updateDateTime,\n    resolveLabel,\n    resolveOperator,\n    resolveDateTime,\n    hideLabel\n  } = props;\n\n  const pConn = getPConnect();\n  const actions = pConn.getActionsApi();\n\n  const [_label, user, dateTimeValue] =\n    label === 'Create operator'\n      ? [createLabel, createOperator, createDateTime]\n      : label === 'Update operator'\n      ? [updateLabel, updateOperator, updateDateTime]\n      : [resolveLabel, resolveOperator, resolveDateTime];\n\n  const [isLoading, setIsLoading] = useState(true);\n  const [items, setItems] = useState([]);\n\n  useEffect(() => {\n    setIsLoading(true);\n    const dataViewName = 'D_AllSprintItems';\n    const parameters = {\n      SprintInsKey: 'PEGAPROJMGMT-WORK SPR-63051'\n    };\n\n    const context = 'app/primary_1';\n    PCore.getDataPageUtils()\n      .getDataAsync(dataViewName, context, parameters)\n      .then(response => console.log(response))\n      //.then(data => setItems(data))\n      .catch(error => {\n        console.log(error);\n      });\n  }, []);\n\n  return (\n    <StyledPegaExtensionsScrumboardWrapper>\n      <App></App>\n    </StyledPegaExtensionsScrumboardWrapper>\n  );\n}\n\nPegaExtensionsScrumboard.defaultProps = {\n  label: 'Create operator',\n  title: 'Create operator',\n  createLabel: null,\n  updateLabel: null,\n  createOperator: null,\n  updateOperator: null,\n  createDateTime: null,\n  updateDateTime: null,\n  resolveLabel: null,\n  resolveOperator: null,\n  resolveDateTime: null,\n  hideLabel: false\n};\n\nPegaExtensionsScrumboard.propTypes = {\n  getPConnect: PropTypes.func.isRequired,\n  label: PropTypes.string,\n  title: PropTypes.string,\n  createLabel: PropTypes.string,\n  updateLabel: PropTypes.string,\n  resolveLabel: PropTypes.string,\n  createOperator: PropTypes.objectOf(PropTypes.any),\n  updateOperator: PropTypes.objectOf(PropTypes.any),\n  resolveOperator: PropTypes.objectOf(PropTypes.any),\n  createDateTime: PropTypes.string,\n  updateDateTime: PropTypes.string,\n  resolveDateTime: PropTypes.string,\n  hideLabel: PropTypes.bool\n};\n\n// as objects are there in props, shallow comparision fails & re-rendering of comp happens even with\n// same key value pairs in obj. hence using custom comparison function on when to re-render\n// const comparisonFn = (prevProps, nextProps) => {\n//   return prevProps.updateDateTime === nextProps.updateDateTime;\n// };\n","enum ICategory {\r\n  FEATURE = 'feature',\r\n  BUG = 'bug',\r\n  REFACTOR = 'refactor',\r\n  DEPLOY = 'deploy',\r\n  INFRA = 'infra'\r\n} \r\n\r\nexport default ICategory;","enum IStatus {\r\n  BACKLOG = 'Backlog',\r\n  TO_DO = 'Open',\r\n  DOING = 'In progress',\r\n  IN_REVIEW = 'Verify',\r\n  DONE = 'Completed'\r\n} \r\n\r\nexport default IStatus;","import { configureStore } from '@reduxjs/toolkit'\r\n\r\nimport columnsReducer from './slices/columns.slice';\r\nimport cardsReducer from './slices/cards.slice';\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    columns: columnsReducer,\r\n    cards: cardsReducer\r\n  }\r\n})\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppDispatch = typeof store.dispatch\r\n\r\nexport default store\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nimport mockCards from \"../../data/cards\";\r\nimport ICard from \"../../interfaces/ICard\";\r\nimport ICategory from \"../../interfaces/ICategory\";\r\n\r\ninterface CardsSliceState {\r\n  cards: ICard[],\r\n  searchText: string\r\n}\r\n\r\nconst initialState: CardsSliceState = {\r\n  cards: mockCards,\r\n  searchText: ''\r\n}\r\n\r\nexport const cardsSlice = createSlice({\r\n  name: 'cards',\r\n  initialState,\r\n  reducers: {\r\n    setCards: (state, action) => {\r\n      state.cards = action.payload\r\n    },\r\n    setSearchText: (state, action) => {\r\n      state.searchText = action.payload\r\n    },\r\n    addCard: (state, action) => {\r\n      const card = action.payload\r\n\r\n      state.cards = [...state.cards, card]\r\n    },\r\n    updateOneCard: (state, action) => {\r\n      const cardId = action.payload.id;\r\n\r\n      const updatedCards = state.cards.map(card => {\r\n        if (card.id === cardId) return action.payload;\r\n        else return card;\r\n      })\r\n\r\n      state.cards = updatedCards;\r\n    },\r\n    filterCards: (state, action) => {\r\n      const searchText = state.searchText;\r\n      const categories = action.payload.categories || Object.values(ICategory);\r\n\r\n      const filteredCards = [...state.cards]\r\n        .map(card => {\r\n            if (searchText.length > 0){\r\n              if (card.title.toUpperCase()\r\n                .includes(searchText.toUpperCase()) && categories\r\n                .includes(card.category)\r\n                ) return {...card, hidden: false}\r\n            } else {\r\n              if (categories.includes(card.category)) return {...card, hidden: false}\r\n            }\r\n            return {...card, hidden: true}\r\n          }\r\n        );\r\n\r\n      state.cards = filteredCards;\r\n    },\r\n    clearFilters: (state) => {\r\n      const clearedFiltersCards = state.cards.map(card => ({\r\n        ...card,\r\n        hidden: false\r\n      }))\r\n\r\n      state.cards = clearedFiltersCards;\r\n    }\r\n  }\r\n})\r\n\r\nexport const { setCards, updateOneCard, filterCards, clearFilters, addCard, setSearchText } = cardsSlice.actions;\r\n\r\nexport default cardsSlice.reducer;","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nimport mockColumns from \"../../data/columns\";\r\nimport IColumn from \"../../interfaces/IColumn\";\r\nimport IStatus from \"../../interfaces/IStatus\";\r\n\r\ninterface ColumnsSliceState {\r\n  columns: IColumn[],\r\n  updatedColumns: IColumn[] | undefined\r\n}\r\n\r\nconst initialState: ColumnsSliceState = {\r\n  columns: mockColumns,\r\n  updatedColumns: undefined\r\n}\r\n\r\nexport const columnsSlice = createSlice({\r\n  name: 'columns',\r\n  initialState,\r\n  reducers: {\r\n    setColumns: (state, action) => {\r\n      state.columns = action.payload;\r\n     },\r\n     updateColumns: (state, action) => {\r\n\r\n      const cardId = action.payload\r\n\r\n      const column = state.columns.find(item => item.id === IStatus.BACKLOG)\r\n  \r\n      const columns = state.columns.filter(item => item.id !== IStatus.BACKLOG)\r\n\r\n      if(column) {\r\n        const updatedColumn = {\r\n          ...column,\r\n          cardsIds: [...column.cardsIds, cardId]\r\n        }\r\n  \r\n        state.columns = [updatedColumn, ...columns]\r\n      }\r\n    }\r\n  }\r\n})\r\n\r\nexport const { setColumns, updateColumns } = columnsSlice.actions;\r\n\r\nexport default columnsSlice.reducer;","import { createGlobalStyle } from 'styled-components'\r\nimport { SCREEN_BREAKPOINTS } from '../constants/breakpoints'\r\n\r\nexport default createGlobalStyle`\r\n  * {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n    font-family: 'Roboto', sans-serif;\r\n  }\r\n\r\n  body {\r\n    background: ${({theme}) => theme.colors.background};\r\n    color: ${({theme}) => theme.colors.text_primary};\r\n    font-size: 14px;\r\n    overflow-y: auto;\r\n  }\r\n\r\n  h1 {\r\n    font-size: 3rem;\r\n    line-height: 3rem;\r\n    padding-bottom: 1rem;\r\n    color: ${({ theme }) => theme.colors.text_secondary};\r\n\r\n    span{\r\n      color: ${({ theme }) => theme.colors.primary};\r\n    }\r\n\r\n    @media(max-width: ${SCREEN_BREAKPOINTS.MEDIUM}px) {\r\n      font-size: 2.5rem;\r\n      line-height: 2.5rem;\r\n    }\r\n  }\r\n\r\n  h2 {\r\n    font-size: 1.5rem;\r\n  }\r\n\r\n  h3 {\r\n    font-size: 1.1rem;\r\n  }\r\n\r\n  p {\r\n    color: ${({ theme }) => theme.colors.text_tertiary};\r\n  }\r\n\r\n    /* width */\r\n  ::-webkit-scrollbar {\r\n    width: 10px;\r\n    height: 10px;\r\n  }\r\n\r\n  /* Track */\r\n  ::-webkit-scrollbar-track {\r\n    background: ${({ theme }) => theme.colors.scrollbar_background};\r\n  }\r\n\r\n  /* Handle */\r\n  ::-webkit-scrollbar-thumb {\r\n    background: ${({ theme }) => theme.colors.scrollbar_thumb};\r\n    border-radius: 5px;\r\n  }\r\n\r\n  /* Handle on hover */\r\n  ::-webkit-scrollbar-thumb:hover {\r\n    background: ${({ theme }) => theme.colors.scrollbar_thumb_hover};\r\n  }\r\n\r\n`","const darkTheme = {\r\n  title: 'dark',\r\n  colors: {\r\n    primary: '#EB622F',\r\n    feature: '#F47E52',\r\n    bug: '#DB4B4B',\r\n    deploy: '#61D856',\r\n    infra: '#131FC2',\r\n    refactor: '#7352CF',\r\n    text_primary: '#BBBBBB',\r\n    text_secondary: '#C6C6C6',\r\n    text_tertiary: '#939393',\r\n    placeholder: '#BBBBBB',\r\n    background: '#1B1B1B',\r\n    components_background: '#2E2E2E',\r\n    border: '#434343',\r\n    switch: '#505050',\r\n    scrollbar_background: '#2E2E2E',\r\n    scrollbar_thumb: '#505050',\r\n    scrollbar_thumb_hover: '#636363'\r\n  }\r\n};\r\n\r\nexport default darkTheme;\r\n","const lightTheme = {\r\n  title: 'light',\r\n\r\n  colors: {\r\n    primary: '#EB622F',\r\n    feature: '#F47E52',\r\n    bug: '#DB4B4B',\r\n    deploy: '#61D856',\r\n    refactor: '#7352CF',\r\n    infra: '#131FC2',\r\n    text_primary: '#656565',\r\n    text_secondary: '#505050',\r\n    text_tertiary: '#939393',\r\n    placeholder: '#BBBBBB',\r\n    background: '#F7F5F4',\r\n    components_background: '#FFFFFF',\r\n    border: '#D8D8D8',\r\n    switch: '#EB622F',\r\n    scrollbar_background: '#E7E7E7',\r\n    scrollbar_thumb: '#D0D0D0',\r\n    scrollbar_thumb_hover: '#BBBBBB'\r\n  }\r\n};\r\n\r\nexport default lightTheme;\r\n","// utilizing theming, comment out, if want individual style\nimport styled from 'styled-components';\nimport { Configuration } from '@pega/cosmos-react-core';\n\nexport default styled(Configuration)``;\n\n// individual style, comment out above, and uncomment here and add styles\n// import styled, { css } from 'styled-components';\n//\n// export default styled.div(() => {\n//  return css`\n//    margin: 0px 0;\n//  `;\n// });\n"],"names":[],"sourceRoot":""}